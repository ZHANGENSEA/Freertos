
TP1_freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005354  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  08005524  08005524  00015524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005688  08005688  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08005688  08005688  00015688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005690  08005690  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005690  08005690  00015690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005694  08005694  00015694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08005698  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000041f0  2000006c  08005704  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000425c  08005704  0002425c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014183  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000300d  00000000  00000000  00034262  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001200  00000000  00000000  00037270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000deb  00000000  00000000  00038470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000289c0  00000000  00000000  0003925b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000172bd  00000000  00000000  00061c1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f9e1e  00000000  00000000  00078ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005034  00000000  00000000  00172cf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  00177d2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800550c 	.word	0x0800550c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	0800550c 	.word	0x0800550c

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b970 	b.w	8000508 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	460d      	mov	r5, r1
 8000248:	4604      	mov	r4, r0
 800024a:	460f      	mov	r7, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4694      	mov	ip, r2
 8000254:	d965      	bls.n	8000322 <__udivmoddi4+0xe2>
 8000256:	fab2 f382 	clz	r3, r2
 800025a:	b143      	cbz	r3, 800026e <__udivmoddi4+0x2e>
 800025c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000260:	f1c3 0220 	rsb	r2, r3, #32
 8000264:	409f      	lsls	r7, r3
 8000266:	fa20 f202 	lsr.w	r2, r0, r2
 800026a:	4317      	orrs	r7, r2
 800026c:	409c      	lsls	r4, r3
 800026e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000272:	fa1f f58c 	uxth.w	r5, ip
 8000276:	fbb7 f1fe 	udiv	r1, r7, lr
 800027a:	0c22      	lsrs	r2, r4, #16
 800027c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000280:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000284:	fb01 f005 	mul.w	r0, r1, r5
 8000288:	4290      	cmp	r0, r2
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028c:	eb1c 0202 	adds.w	r2, ip, r2
 8000290:	f101 37ff 	add.w	r7, r1, #4294967295
 8000294:	f080 811c 	bcs.w	80004d0 <__udivmoddi4+0x290>
 8000298:	4290      	cmp	r0, r2
 800029a:	f240 8119 	bls.w	80004d0 <__udivmoddi4+0x290>
 800029e:	3902      	subs	r1, #2
 80002a0:	4462      	add	r2, ip
 80002a2:	1a12      	subs	r2, r2, r0
 80002a4:	b2a4      	uxth	r4, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002b2:	fb00 f505 	mul.w	r5, r0, r5
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	d90a      	bls.n	80002d0 <__udivmoddi4+0x90>
 80002ba:	eb1c 0404 	adds.w	r4, ip, r4
 80002be:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c2:	f080 8107 	bcs.w	80004d4 <__udivmoddi4+0x294>
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	f240 8104 	bls.w	80004d4 <__udivmoddi4+0x294>
 80002cc:	4464      	add	r4, ip
 80002ce:	3802      	subs	r0, #2
 80002d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d4:	1b64      	subs	r4, r4, r5
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11e      	cbz	r6, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40dc      	lsrs	r4, r3
 80002dc:	2300      	movs	r3, #0
 80002de:	e9c6 4300 	strd	r4, r3, [r6]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0xbc>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80ed 	beq.w	80004ca <__udivmoddi4+0x28a>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e9c6 0500 	strd	r0, r5, [r6]
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	d149      	bne.n	8000398 <__udivmoddi4+0x158>
 8000304:	42ab      	cmp	r3, r5
 8000306:	d302      	bcc.n	800030e <__udivmoddi4+0xce>
 8000308:	4282      	cmp	r2, r0
 800030a:	f200 80f8 	bhi.w	80004fe <__udivmoddi4+0x2be>
 800030e:	1a84      	subs	r4, r0, r2
 8000310:	eb65 0203 	sbc.w	r2, r5, r3
 8000314:	2001      	movs	r0, #1
 8000316:	4617      	mov	r7, r2
 8000318:	2e00      	cmp	r6, #0
 800031a:	d0e2      	beq.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	e9c6 4700 	strd	r4, r7, [r6]
 8000320:	e7df      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000322:	b902      	cbnz	r2, 8000326 <__udivmoddi4+0xe6>
 8000324:	deff      	udf	#255	; 0xff
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8090 	bne.w	8000450 <__udivmoddi4+0x210>
 8000330:	1a8a      	subs	r2, r1, r2
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2101      	movs	r1, #1
 800033c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000340:	fb07 2015 	mls	r0, r7, r5, r2
 8000344:	0c22      	lsrs	r2, r4, #16
 8000346:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800034a:	fb0e f005 	mul.w	r0, lr, r5
 800034e:	4290      	cmp	r0, r2
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x124>
 8000352:	eb1c 0202 	adds.w	r2, ip, r2
 8000356:	f105 38ff 	add.w	r8, r5, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4290      	cmp	r0, r2
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2b8>
 8000362:	4645      	mov	r5, r8
 8000364:	1a12      	subs	r2, r2, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb2 f0f7 	udiv	r0, r2, r7
 800036c:	fb07 2210 	mls	r2, r7, r0, r2
 8000370:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x14e>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 32ff 	add.w	r2, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x14c>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2c2>
 800038c:	4610      	mov	r0, r2
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000396:	e79f      	b.n	80002d8 <__udivmoddi4+0x98>
 8000398:	f1c1 0720 	rsb	r7, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa05 f401 	lsl.w	r4, r5, r1
 80003aa:	fa20 f307 	lsr.w	r3, r0, r7
 80003ae:	40fd      	lsrs	r5, r7
 80003b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b4:	4323      	orrs	r3, r4
 80003b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ba:	fa1f fe8c 	uxth.w	lr, ip
 80003be:	fb09 5518 	mls	r5, r9, r8, r5
 80003c2:	0c1c      	lsrs	r4, r3, #16
 80003c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c8:	fb08 f50e 	mul.w	r5, r8, lr
 80003cc:	42a5      	cmp	r5, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	fa00 f001 	lsl.w	r0, r0, r1
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2b4>
 80003e4:	42a5      	cmp	r5, r4
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2b4>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4464      	add	r4, ip
 80003f0:	1b64      	subs	r4, r4, r5
 80003f2:	b29d      	uxth	r5, r3
 80003f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f8:	fb09 4413 	mls	r4, r9, r3, r4
 80003fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000400:	fb03 fe0e 	mul.w	lr, r3, lr
 8000404:	45a6      	cmp	lr, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2ac>
 8000412:	45a6      	cmp	lr, r4
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2ac>
 8000416:	3b02      	subs	r3, #2
 8000418:	4464      	add	r4, ip
 800041a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800041e:	fba3 9502 	umull	r9, r5, r3, r2
 8000422:	eba4 040e 	sub.w	r4, r4, lr
 8000426:	42ac      	cmp	r4, r5
 8000428:	46c8      	mov	r8, r9
 800042a:	46ae      	mov	lr, r5
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x29c>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x298>
 8000430:	b156      	cbz	r6, 8000448 <__udivmoddi4+0x208>
 8000432:	ebb0 0208 	subs.w	r2, r0, r8
 8000436:	eb64 040e 	sbc.w	r4, r4, lr
 800043a:	fa04 f707 	lsl.w	r7, r4, r7
 800043e:	40ca      	lsrs	r2, r1
 8000440:	40cc      	lsrs	r4, r1
 8000442:	4317      	orrs	r7, r2
 8000444:	e9c6 7400 	strd	r7, r4, [r6]
 8000448:	4618      	mov	r0, r3
 800044a:	2100      	movs	r1, #0
 800044c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000450:	f1c3 0120 	rsb	r1, r3, #32
 8000454:	fa02 fc03 	lsl.w	ip, r2, r3
 8000458:	fa20 f201 	lsr.w	r2, r0, r1
 800045c:	fa25 f101 	lsr.w	r1, r5, r1
 8000460:	409d      	lsls	r5, r3
 8000462:	432a      	orrs	r2, r5
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000470:	fb07 1510 	mls	r5, r7, r0, r1
 8000474:	0c11      	lsrs	r1, r2, #16
 8000476:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047a:	fb00 f50e 	mul.w	r5, r0, lr
 800047e:	428d      	cmp	r5, r1
 8000480:	fa04 f403 	lsl.w	r4, r4, r3
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x258>
 8000486:	eb1c 0101 	adds.w	r1, ip, r1
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 8000490:	428d      	cmp	r5, r1
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 8000494:	3802      	subs	r0, #2
 8000496:	4461      	add	r1, ip
 8000498:	1b49      	subs	r1, r1, r5
 800049a:	b292      	uxth	r2, r2
 800049c:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a0:	fb07 1115 	mls	r1, r7, r5, r1
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	fb05 f10e 	mul.w	r1, r5, lr
 80004ac:	4291      	cmp	r1, r2
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x282>
 80004b0:	eb1c 0202 	adds.w	r2, ip, r2
 80004b4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 80004be:	3d02      	subs	r5, #2
 80004c0:	4462      	add	r2, ip
 80004c2:	1a52      	subs	r2, r2, r1
 80004c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0xfc>
 80004ca:	4631      	mov	r1, r6
 80004cc:	4630      	mov	r0, r6
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xa2>
 80004d0:	4639      	mov	r1, r7
 80004d2:	e6e6      	b.n	80002a2 <__udivmoddi4+0x62>
 80004d4:	4610      	mov	r0, r2
 80004d6:	e6fb      	b.n	80002d0 <__udivmoddi4+0x90>
 80004d8:	4548      	cmp	r0, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004e4:	3b01      	subs	r3, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e8:	4645      	mov	r5, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x282>
 80004ec:	462b      	mov	r3, r5
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1da>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x258>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f8:	3d02      	subs	r5, #2
 80004fa:	4462      	add	r2, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x124>
 80004fe:	4608      	mov	r0, r1
 8000500:	e70a      	b.n	8000318 <__udivmoddi4+0xd8>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x14e>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800050c:	b480      	push	{r7}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
 8000512:	60f8      	str	r0, [r7, #12]
 8000514:	60b9      	str	r1, [r7, #8]
 8000516:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	4a07      	ldr	r2, [pc, #28]	; (8000538 <vApplicationGetIdleTaskMemory+0x2c>)
 800051c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800051e:	68bb      	ldr	r3, [r7, #8]
 8000520:	4a06      	ldr	r2, [pc, #24]	; (800053c <vApplicationGetIdleTaskMemory+0x30>)
 8000522:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2280      	movs	r2, #128	; 0x80
 8000528:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800052a:	bf00      	nop
 800052c:	3714      	adds	r7, #20
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	2000008c 	.word	0x2000008c
 800053c:	200000e0 	.word	0x200000e0

08000540 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000540:	b5b0      	push	{r4, r5, r7, lr}
 8000542:	b088      	sub	sp, #32
 8000544:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000546:	4b0a      	ldr	r3, [pc, #40]	; (8000570 <MX_FREERTOS_Init+0x30>)
 8000548:	1d3c      	adds	r4, r7, #4
 800054a:	461d      	mov	r5, r3
 800054c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800054e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000550:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000554:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000558:	1d3b      	adds	r3, r7, #4
 800055a:	2100      	movs	r1, #0
 800055c:	4618      	mov	r0, r3
 800055e:	f002 fffd 	bl	800355c <osThreadCreate>
 8000562:	4603      	mov	r3, r0
 8000564:	4a03      	ldr	r2, [pc, #12]	; (8000574 <MX_FREERTOS_Init+0x34>)
 8000566:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000568:	bf00      	nop
 800056a:	3720      	adds	r7, #32
 800056c:	46bd      	mov	sp, r7
 800056e:	bdb0      	pop	{r4, r5, r7, pc}
 8000570:	08005530 	.word	0x08005530
 8000574:	20000088 	.word	0x20000088

08000578 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000580:	2001      	movs	r0, #1
 8000582:	f003 f837 	bl	80035f4 <osDelay>
 8000586:	e7fb      	b.n	8000580 <StartDefaultTask+0x8>

08000588 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b08a      	sub	sp, #40	; 0x28
 800058c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058e:	f107 0314 	add.w	r3, r7, #20
 8000592:	2200      	movs	r2, #0
 8000594:	601a      	str	r2, [r3, #0]
 8000596:	605a      	str	r2, [r3, #4]
 8000598:	609a      	str	r2, [r3, #8]
 800059a:	60da      	str	r2, [r3, #12]
 800059c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800059e:	4b23      	ldr	r3, [pc, #140]	; (800062c <MX_GPIO_Init+0xa4>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	4a22      	ldr	r2, [pc, #136]	; (800062c <MX_GPIO_Init+0xa4>)
 80005a4:	f043 0301 	orr.w	r3, r3, #1
 80005a8:	6313      	str	r3, [r2, #48]	; 0x30
 80005aa:	4b20      	ldr	r3, [pc, #128]	; (800062c <MX_GPIO_Init+0xa4>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ae:	f003 0301 	and.w	r3, r3, #1
 80005b2:	613b      	str	r3, [r7, #16]
 80005b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005b6:	4b1d      	ldr	r3, [pc, #116]	; (800062c <MX_GPIO_Init+0xa4>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ba:	4a1c      	ldr	r2, [pc, #112]	; (800062c <MX_GPIO_Init+0xa4>)
 80005bc:	f043 0302 	orr.w	r3, r3, #2
 80005c0:	6313      	str	r3, [r2, #48]	; 0x30
 80005c2:	4b1a      	ldr	r3, [pc, #104]	; (800062c <MX_GPIO_Init+0xa4>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c6:	f003 0302 	and.w	r3, r3, #2
 80005ca:	60fb      	str	r3, [r7, #12]
 80005cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80005ce:	4b17      	ldr	r3, [pc, #92]	; (800062c <MX_GPIO_Init+0xa4>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	4a16      	ldr	r2, [pc, #88]	; (800062c <MX_GPIO_Init+0xa4>)
 80005d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005d8:	6313      	str	r3, [r2, #48]	; 0x30
 80005da:	4b14      	ldr	r3, [pc, #80]	; (800062c <MX_GPIO_Init+0xa4>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005e2:	60bb      	str	r3, [r7, #8]
 80005e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005e6:	4b11      	ldr	r3, [pc, #68]	; (800062c <MX_GPIO_Init+0xa4>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	4a10      	ldr	r2, [pc, #64]	; (800062c <MX_GPIO_Init+0xa4>)
 80005ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005f0:	6313      	str	r3, [r2, #48]	; 0x30
 80005f2:	4b0e      	ldr	r3, [pc, #56]	; (800062c <MX_GPIO_Init+0xa4>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005fa:	607b      	str	r3, [r7, #4]
 80005fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80005fe:	2200      	movs	r2, #0
 8000600:	2102      	movs	r1, #2
 8000602:	480b      	ldr	r0, [pc, #44]	; (8000630 <MX_GPIO_Init+0xa8>)
 8000604:	f000 fe4c 	bl	80012a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000608:	2302      	movs	r3, #2
 800060a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800060c:	2301      	movs	r3, #1
 800060e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000610:	2300      	movs	r3, #0
 8000612:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000614:	2300      	movs	r3, #0
 8000616:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000618:	f107 0314 	add.w	r3, r7, #20
 800061c:	4619      	mov	r1, r3
 800061e:	4804      	ldr	r0, [pc, #16]	; (8000630 <MX_GPIO_Init+0xa8>)
 8000620:	f000 fc92 	bl	8000f48 <HAL_GPIO_Init>

}
 8000624:	bf00      	nop
 8000626:	3728      	adds	r7, #40	; 0x28
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	40023800 	.word	0x40023800
 8000630:	40022000 	.word	0x40022000

08000634 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000638:	f3bf 8f4f 	dsb	sy
}
 800063c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800063e:	4b06      	ldr	r3, [pc, #24]	; (8000658 <__NVIC_SystemReset+0x24>)
 8000640:	68db      	ldr	r3, [r3, #12]
 8000642:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000646:	4904      	ldr	r1, [pc, #16]	; (8000658 <__NVIC_SystemReset+0x24>)
 8000648:	4b04      	ldr	r3, [pc, #16]	; (800065c <__NVIC_SystemReset+0x28>)
 800064a:	4313      	orrs	r3, r2
 800064c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800064e:	f3bf 8f4f 	dsb	sy
}
 8000652:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000654:	bf00      	nop
 8000656:	e7fd      	b.n	8000654 <__NVIC_SystemReset+0x20>
 8000658:	e000ed00 	.word	0xe000ed00
 800065c:	05fa0004 	.word	0x05fa0004

08000660 <__io_putchar>:
TaskHandle_t pdTASK_GIVE_HANDLE = NULL;
TaskHandle_t pdTASK_TAKE_HANDLE = NULL;


int __io_putchar(int chr)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&chr, 1, HAL_MAX_DELAY);
 8000668:	1d39      	adds	r1, r7, #4
 800066a:	f04f 33ff 	mov.w	r3, #4294967295
 800066e:	2201      	movs	r2, #1
 8000670:	4803      	ldr	r0, [pc, #12]	; (8000680 <__io_putchar+0x20>)
 8000672:	f002 fa09 	bl	8002a88 <HAL_UART_Transmit>
	return chr;
 8000676:	687b      	ldr	r3, [r7, #4]
}
 8000678:	4618      	mov	r0, r3
 800067a:	3708      	adds	r7, #8
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	20000338 	.word	0x20000338

08000684 <taskGive>:
}

//Sémaphores de taskGive et taskTake
SemaphoreHandle_t xSemaphore = NULL;

void taskGive(void *pvParameters){
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
	TickType_t xDelay = 100/ portTICK_PERIOD_MS;
 800068c:	2364      	movs	r3, #100	; 0x64
 800068e:	60fb      	str	r3, [r7, #12]

	for(;;){
//		printf("\r\n taskGive : Prêt à donner le sémaphore \r\n");
//		xSemaphoreGive(xSemaphore);

		printf("\r\n taskGive : Prêt à enovyer la notification \r\n");
 8000690:	4809      	ldr	r0, [pc, #36]	; (80006b8 <taskGive+0x34>)
 8000692:	f004 fba5 	bl	8004de0 <puts>
		xTaskNotifyGive(pdTASK_TAKE_HANDLE);//Envoie une notification à taskTake
 8000696:	4b09      	ldr	r3, [pc, #36]	; (80006bc <taskGive+0x38>)
 8000698:	6818      	ldr	r0, [r3, #0]
 800069a:	2300      	movs	r3, #0
 800069c:	2202      	movs	r2, #2
 800069e:	2100      	movs	r1, #0
 80006a0:	f003 fd8a 	bl	80041b8 <xTaskGenericNotify>

		printf("\r\n taskGive : Notification envoyée \r\n");
 80006a4:	4806      	ldr	r0, [pc, #24]	; (80006c0 <taskGive+0x3c>)
 80006a6:	f004 fb9b 	bl	8004de0 <puts>
//		printf("\r\n taskGive : Sémaphore deonné \r\n");

		vTaskDelay(xDelay);
 80006aa:	68f8      	ldr	r0, [r7, #12]
 80006ac:	f003 fa06 	bl	8003abc <vTaskDelay>

		xDelay += 100/portTICK_PERIOD_MS; //Augmente le delai de 100ms
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	3364      	adds	r3, #100	; 0x64
 80006b4:	60fb      	str	r3, [r7, #12]
		printf("\r\n taskGive : Prêt à enovyer la notification \r\n");
 80006b6:	e7eb      	b.n	8000690 <taskGive+0xc>
 80006b8:	08005558 	.word	0x08005558
 80006bc:	200002e4 	.word	0x200002e4
 80006c0:	0800558c 	.word	0x0800558c

080006c4 <taskTake>:
	}
}

void taskTake(void *pvParameters){
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b084      	sub	sp, #16
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
	for(;;){
//		printf("\r\n taskTake : Prêt à prendre le sémaphore \r\n");
		printf("\r\n taskTake : Prêt à recevoir la notification \r\n");
 80006cc:	480a      	ldr	r0, [pc, #40]	; (80006f8 <taskTake+0x34>)
 80006ce:	f004 fb87 	bl	8004de0 <puts>

		//Attend la notification
		uint32_t ulNotificationValue = ulTaskNotifyTake(pdTRUE, MS_T0_TICKS(1000));
 80006d2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80006d6:	2001      	movs	r0, #1
 80006d8:	f003 fd26 	bl	8004128 <ulTaskNotifyTake>
 80006dc:	60f8      	str	r0, [r7, #12]

		if (ulNotificationValue >0){
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d003      	beq.n	80006ec <taskTake+0x28>
			printf("\r\n taskTake: Notification reçue \r\n");
 80006e4:	4805      	ldr	r0, [pc, #20]	; (80006fc <taskTake+0x38>)
 80006e6:	f004 fb7b 	bl	8004de0 <puts>
 80006ea:	e7ef      	b.n	80006cc <taskTake+0x8>
		}
//		if (xSemaphoreTake(xSemaphore, MS_T0_TICKS(1000)) == pdTRUE){
//			printf("\r\n taskTake: Sémaphore pris \r\n");
//		}
		else{
			printf("\r\n taskTake: Timeout de la notification, déclenchement d'un reset\r\n");
 80006ec:	4804      	ldr	r0, [pc, #16]	; (8000700 <taskTake+0x3c>)
 80006ee:	f004 fb77 	bl	8004de0 <puts>
//			printf("\r\n taskTake: échec de la prise du sémaphore, déclenchement d'un reset \r\n");
			NVIC_SystemReset();//Reset logiciel du microcontrôleur
 80006f2:	f7ff ff9f 	bl	8000634 <__NVIC_SystemReset>
 80006f6:	bf00      	nop
 80006f8:	080055b4 	.word	0x080055b4
 80006fc:	080055e8 	.word	0x080055e8
 8000700:	0800560c 	.word	0x0800560c

08000704 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800070a:	f000 fb0e 	bl	8000d2a <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800070e:	f000 f839 	bl	8000784 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000712:	f7ff ff39 	bl	8000588 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8000716:	f000 fa2d 	bl	8000b74 <MX_USART1_UART_Init>
		xTaskCreate(taskGive, "TaskGive", configMINIMAL_STACK_SIZE, NULL,4,NULL);
		xTaskCreate(taskTake, "TaskTake", configMINIMAL_STACK_SIZE, NULL,3,NULL);
		vTaskStartScheduler();
	}*/

	xTaskCreate(taskGive, "TaskGive", configMINIMAL_STACK_SIZE, NULL,4, &pdTASK_GIVE_HANDLE);
 800071a:	4b13      	ldr	r3, [pc, #76]	; (8000768 <main+0x64>)
 800071c:	9301      	str	r3, [sp, #4]
 800071e:	2304      	movs	r3, #4
 8000720:	9300      	str	r3, [sp, #0]
 8000722:	2300      	movs	r3, #0
 8000724:	2280      	movs	r2, #128	; 0x80
 8000726:	4911      	ldr	r1, [pc, #68]	; (800076c <main+0x68>)
 8000728:	4811      	ldr	r0, [pc, #68]	; (8000770 <main+0x6c>)
 800072a:	f003 f88e 	bl	800384a <xTaskCreate>
	xTaskCreate(taskTake, "TaskTake", configMINIMAL_STACK_SIZE, NULL,3, &pdTASK_TAKE_HANDLE);
 800072e:	4b11      	ldr	r3, [pc, #68]	; (8000774 <main+0x70>)
 8000730:	9301      	str	r3, [sp, #4]
 8000732:	2303      	movs	r3, #3
 8000734:	9300      	str	r3, [sp, #0]
 8000736:	2300      	movs	r3, #0
 8000738:	2280      	movs	r2, #128	; 0x80
 800073a:	490f      	ldr	r1, [pc, #60]	; (8000778 <main+0x74>)
 800073c:	480f      	ldr	r0, [pc, #60]	; (800077c <main+0x78>)
 800073e:	f003 f884 	bl	800384a <xTaskCreate>
	vTaskStartScheduler();*/// Boucle infinie, on exécute rien après !!!

	/* USER CODE END 2 */

	/* Call init function for freertos objects (in freertos.c) */
	MX_FREERTOS_Init();
 8000742:	f7ff fefd 	bl	8000540 <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 8000746:	f002 ff02 	bl	800354e <osKernelStart>

		//		HAL_Delay(100);


		char chr;
		HAL_UART_Receive(&huart1, (uint8_t *)&chr, 1, HAL_MAX_DELAY);
 800074a:	1df9      	adds	r1, r7, #7
 800074c:	f04f 33ff 	mov.w	r3, #4294967295
 8000750:	2201      	movs	r2, #1
 8000752:	480b      	ldr	r0, [pc, #44]	; (8000780 <main+0x7c>)
 8000754:	f002 fa1b 	bl	8002b8e <HAL_UART_Receive>

		//		HAL_GPIO_TogglePin(GPIOI, LED_Pin);//quand il y a un chr, le led s'allume

		HAL_UART_Transmit(&huart1, (uint8_t *)&chr, 1, HAL_MAX_DELAY);
 8000758:	1df9      	adds	r1, r7, #7
 800075a:	f04f 33ff 	mov.w	r3, #4294967295
 800075e:	2201      	movs	r2, #1
 8000760:	4807      	ldr	r0, [pc, #28]	; (8000780 <main+0x7c>)
 8000762:	f002 f991 	bl	8002a88 <HAL_UART_Transmit>
	{
 8000766:	e7f0      	b.n	800074a <main+0x46>
 8000768:	200002e0 	.word	0x200002e0
 800076c:	08005650 	.word	0x08005650
 8000770:	08000685 	.word	0x08000685
 8000774:	200002e4 	.word	0x200002e4
 8000778:	0800565c 	.word	0x0800565c
 800077c:	080006c5 	.word	0x080006c5
 8000780:	20000338 	.word	0x20000338

08000784 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b094      	sub	sp, #80	; 0x50
 8000788:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800078a:	f107 0320 	add.w	r3, r7, #32
 800078e:	2230      	movs	r2, #48	; 0x30
 8000790:	2100      	movs	r1, #0
 8000792:	4618      	mov	r0, r3
 8000794:	f004 fc04 	bl	8004fa0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000798:	f107 030c 	add.w	r3, r7, #12
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	60da      	str	r2, [r3, #12]
 80007a6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80007a8:	4b28      	ldr	r3, [pc, #160]	; (800084c <SystemClock_Config+0xc8>)
 80007aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ac:	4a27      	ldr	r2, [pc, #156]	; (800084c <SystemClock_Config+0xc8>)
 80007ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007b2:	6413      	str	r3, [r2, #64]	; 0x40
 80007b4:	4b25      	ldr	r3, [pc, #148]	; (800084c <SystemClock_Config+0xc8>)
 80007b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007bc:	60bb      	str	r3, [r7, #8]
 80007be:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007c0:	4b23      	ldr	r3, [pc, #140]	; (8000850 <SystemClock_Config+0xcc>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007c8:	4a21      	ldr	r2, [pc, #132]	; (8000850 <SystemClock_Config+0xcc>)
 80007ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007ce:	6013      	str	r3, [r2, #0]
 80007d0:	4b1f      	ldr	r3, [pc, #124]	; (8000850 <SystemClock_Config+0xcc>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007dc:	2302      	movs	r3, #2
 80007de:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007e0:	2301      	movs	r3, #1
 80007e2:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007e4:	2310      	movs	r3, #16
 80007e6:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e8:	2302      	movs	r3, #2
 80007ea:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007ec:	2300      	movs	r3, #0
 80007ee:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 10;
 80007f0:	230a      	movs	r3, #10
 80007f2:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 210;
 80007f4:	23d2      	movs	r3, #210	; 0xd2
 80007f6:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007f8:	2302      	movs	r3, #2
 80007fa:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 2;
 80007fc:	2302      	movs	r3, #2
 80007fe:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000800:	f107 0320 	add.w	r3, r7, #32
 8000804:	4618      	mov	r0, r3
 8000806:	f000 fd65 	bl	80012d4 <HAL_RCC_OscConfig>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <SystemClock_Config+0x90>
	{
		Error_Handler();
 8000810:	f000 f832 	bl	8000878 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000814:	230f      	movs	r3, #15
 8000816:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000818:	2302      	movs	r3, #2
 800081a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800081c:	2300      	movs	r3, #0
 800081e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000820:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000824:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000826:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800082a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800082c:	f107 030c 	add.w	r3, r7, #12
 8000830:	2105      	movs	r1, #5
 8000832:	4618      	mov	r0, r3
 8000834:	f000 fff2 	bl	800181c <HAL_RCC_ClockConfig>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <SystemClock_Config+0xbe>
	{
		Error_Handler();
 800083e:	f000 f81b 	bl	8000878 <Error_Handler>
	}
}
 8000842:	bf00      	nop
 8000844:	3750      	adds	r7, #80	; 0x50
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40023800 	.word	0x40023800
 8000850:	40007000 	.word	0x40007000

08000854 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a04      	ldr	r2, [pc, #16]	; (8000874 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d101      	bne.n	800086a <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000866:	f000 fa6d 	bl	8000d44 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800086a:	bf00      	nop
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40001000 	.word	0x40001000

08000878 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800087c:	b672      	cpsid	i
}
 800087e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000880:	e7fe      	b.n	8000880 <Error_Handler+0x8>
	...

08000884 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800088a:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <HAL_MspInit+0x4c>)
 800088c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088e:	4a10      	ldr	r2, [pc, #64]	; (80008d0 <HAL_MspInit+0x4c>)
 8000890:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000894:	6413      	str	r3, [r2, #64]	; 0x40
 8000896:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <HAL_MspInit+0x4c>)
 8000898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008a2:	4b0b      	ldr	r3, [pc, #44]	; (80008d0 <HAL_MspInit+0x4c>)
 80008a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008a6:	4a0a      	ldr	r2, [pc, #40]	; (80008d0 <HAL_MspInit+0x4c>)
 80008a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008ac:	6453      	str	r3, [r2, #68]	; 0x44
 80008ae:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <HAL_MspInit+0x4c>)
 80008b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008b6:	603b      	str	r3, [r7, #0]
 80008b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008ba:	2200      	movs	r2, #0
 80008bc:	210f      	movs	r1, #15
 80008be:	f06f 0001 	mvn.w	r0, #1
 80008c2:	f000 fb17 	bl	8000ef4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c6:	bf00      	nop
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40023800 	.word	0x40023800

080008d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b08e      	sub	sp, #56	; 0x38
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80008dc:	2300      	movs	r3, #0
 80008de:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80008e0:	2300      	movs	r3, #0
 80008e2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80008e4:	4b33      	ldr	r3, [pc, #204]	; (80009b4 <HAL_InitTick+0xe0>)
 80008e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e8:	4a32      	ldr	r2, [pc, #200]	; (80009b4 <HAL_InitTick+0xe0>)
 80008ea:	f043 0310 	orr.w	r3, r3, #16
 80008ee:	6413      	str	r3, [r2, #64]	; 0x40
 80008f0:	4b30      	ldr	r3, [pc, #192]	; (80009b4 <HAL_InitTick+0xe0>)
 80008f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f4:	f003 0310 	and.w	r3, r3, #16
 80008f8:	60fb      	str	r3, [r7, #12]
 80008fa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008fc:	f107 0210 	add.w	r2, r7, #16
 8000900:	f107 0314 	add.w	r3, r7, #20
 8000904:	4611      	mov	r1, r2
 8000906:	4618      	mov	r0, r3
 8000908:	f001 f96e 	bl	8001be8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800090c:	6a3b      	ldr	r3, [r7, #32]
 800090e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000912:	2b00      	cmp	r3, #0
 8000914:	d103      	bne.n	800091e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000916:	f001 f93f 	bl	8001b98 <HAL_RCC_GetPCLK1Freq>
 800091a:	6378      	str	r0, [r7, #52]	; 0x34
 800091c:	e004      	b.n	8000928 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800091e:	f001 f93b 	bl	8001b98 <HAL_RCC_GetPCLK1Freq>
 8000922:	4603      	mov	r3, r0
 8000924:	005b      	lsls	r3, r3, #1
 8000926:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800092a:	4a23      	ldr	r2, [pc, #140]	; (80009b8 <HAL_InitTick+0xe4>)
 800092c:	fba2 2303 	umull	r2, r3, r2, r3
 8000930:	0c9b      	lsrs	r3, r3, #18
 8000932:	3b01      	subs	r3, #1
 8000934:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000936:	4b21      	ldr	r3, [pc, #132]	; (80009bc <HAL_InitTick+0xe8>)
 8000938:	4a21      	ldr	r2, [pc, #132]	; (80009c0 <HAL_InitTick+0xec>)
 800093a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800093c:	4b1f      	ldr	r3, [pc, #124]	; (80009bc <HAL_InitTick+0xe8>)
 800093e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000942:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000944:	4a1d      	ldr	r2, [pc, #116]	; (80009bc <HAL_InitTick+0xe8>)
 8000946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000948:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800094a:	4b1c      	ldr	r3, [pc, #112]	; (80009bc <HAL_InitTick+0xe8>)
 800094c:	2200      	movs	r2, #0
 800094e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000950:	4b1a      	ldr	r3, [pc, #104]	; (80009bc <HAL_InitTick+0xe8>)
 8000952:	2200      	movs	r2, #0
 8000954:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000956:	4b19      	ldr	r3, [pc, #100]	; (80009bc <HAL_InitTick+0xe8>)
 8000958:	2200      	movs	r2, #0
 800095a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800095c:	4817      	ldr	r0, [pc, #92]	; (80009bc <HAL_InitTick+0xe8>)
 800095e:	f001 fd65 	bl	800242c <HAL_TIM_Base_Init>
 8000962:	4603      	mov	r3, r0
 8000964:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000968:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800096c:	2b00      	cmp	r3, #0
 800096e:	d11b      	bne.n	80009a8 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000970:	4812      	ldr	r0, [pc, #72]	; (80009bc <HAL_InitTick+0xe8>)
 8000972:	f001 fdbd 	bl	80024f0 <HAL_TIM_Base_Start_IT>
 8000976:	4603      	mov	r3, r0
 8000978:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800097c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000980:	2b00      	cmp	r3, #0
 8000982:	d111      	bne.n	80009a8 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000984:	2036      	movs	r0, #54	; 0x36
 8000986:	f000 fad1 	bl	8000f2c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	2b0f      	cmp	r3, #15
 800098e:	d808      	bhi.n	80009a2 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000990:	2200      	movs	r2, #0
 8000992:	6879      	ldr	r1, [r7, #4]
 8000994:	2036      	movs	r0, #54	; 0x36
 8000996:	f000 faad 	bl	8000ef4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800099a:	4a0a      	ldr	r2, [pc, #40]	; (80009c4 <HAL_InitTick+0xf0>)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	6013      	str	r3, [r2, #0]
 80009a0:	e002      	b.n	80009a8 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80009a2:	2301      	movs	r3, #1
 80009a4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80009a8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	3738      	adds	r7, #56	; 0x38
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	40023800 	.word	0x40023800
 80009b8:	431bde83 	.word	0x431bde83
 80009bc:	200002e8 	.word	0x200002e8
 80009c0:	40001000 	.word	0x40001000
 80009c4:	20000004 	.word	0x20000004

080009c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009cc:	e7fe      	b.n	80009cc <NMI_Handler+0x4>

080009ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009d2:	e7fe      	b.n	80009d2 <HardFault_Handler+0x4>

080009d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009d8:	e7fe      	b.n	80009d8 <MemManage_Handler+0x4>

080009da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009da:	b480      	push	{r7}
 80009dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009de:	e7fe      	b.n	80009de <BusFault_Handler+0x4>

080009e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009e4:	e7fe      	b.n	80009e4 <UsageFault_Handler+0x4>

080009e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009e6:	b480      	push	{r7}
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ea:	bf00      	nop
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr

080009f4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80009f8:	4802      	ldr	r0, [pc, #8]	; (8000a04 <TIM6_DAC_IRQHandler+0x10>)
 80009fa:	f001 fdf1 	bl	80025e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80009fe:	bf00      	nop
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	200002e8 	.word	0x200002e8

08000a08 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b086      	sub	sp, #24
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	60f8      	str	r0, [r7, #12]
 8000a10:	60b9      	str	r1, [r7, #8]
 8000a12:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a14:	2300      	movs	r3, #0
 8000a16:	617b      	str	r3, [r7, #20]
 8000a18:	e00a      	b.n	8000a30 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a1a:	f3af 8000 	nop.w
 8000a1e:	4601      	mov	r1, r0
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	1c5a      	adds	r2, r3, #1
 8000a24:	60ba      	str	r2, [r7, #8]
 8000a26:	b2ca      	uxtb	r2, r1
 8000a28:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a2a:	697b      	ldr	r3, [r7, #20]
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	617b      	str	r3, [r7, #20]
 8000a30:	697a      	ldr	r2, [r7, #20]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	429a      	cmp	r2, r3
 8000a36:	dbf0      	blt.n	8000a1a <_read+0x12>
  }

  return len;
 8000a38:	687b      	ldr	r3, [r7, #4]
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3718      	adds	r7, #24
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}

08000a42 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a42:	b580      	push	{r7, lr}
 8000a44:	b086      	sub	sp, #24
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	60f8      	str	r0, [r7, #12]
 8000a4a:	60b9      	str	r1, [r7, #8]
 8000a4c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a4e:	2300      	movs	r3, #0
 8000a50:	617b      	str	r3, [r7, #20]
 8000a52:	e009      	b.n	8000a68 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	1c5a      	adds	r2, r3, #1
 8000a58:	60ba      	str	r2, [r7, #8]
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f7ff fdff 	bl	8000660 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	3301      	adds	r3, #1
 8000a66:	617b      	str	r3, [r7, #20]
 8000a68:	697a      	ldr	r2, [r7, #20]
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	429a      	cmp	r2, r3
 8000a6e:	dbf1      	blt.n	8000a54 <_write+0x12>
  }
  return len;
 8000a70:	687b      	ldr	r3, [r7, #4]
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3718      	adds	r7, #24
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}

08000a7a <_close>:

int _close(int file)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	b083      	sub	sp, #12
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	370c      	adds	r7, #12
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr

08000a92 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a92:	b480      	push	{r7}
 8000a94:	b083      	sub	sp, #12
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	6078      	str	r0, [r7, #4]
 8000a9a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000aa2:	605a      	str	r2, [r3, #4]
  return 0;
 8000aa4:	2300      	movs	r3, #0
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	370c      	adds	r7, #12
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr

08000ab2 <_isatty>:

int _isatty(int file)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	b083      	sub	sp, #12
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000aba:	2301      	movs	r3, #1
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	370c      	adds	r7, #12
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr

08000ac8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b085      	sub	sp, #20
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	60f8      	str	r0, [r7, #12]
 8000ad0:	60b9      	str	r1, [r7, #8]
 8000ad2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ad4:	2300      	movs	r3, #0
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	3714      	adds	r7, #20
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
	...

08000ae4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b086      	sub	sp, #24
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000aec:	4a14      	ldr	r2, [pc, #80]	; (8000b40 <_sbrk+0x5c>)
 8000aee:	4b15      	ldr	r3, [pc, #84]	; (8000b44 <_sbrk+0x60>)
 8000af0:	1ad3      	subs	r3, r2, r3
 8000af2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000af8:	4b13      	ldr	r3, [pc, #76]	; (8000b48 <_sbrk+0x64>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d102      	bne.n	8000b06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b00:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <_sbrk+0x64>)
 8000b02:	4a12      	ldr	r2, [pc, #72]	; (8000b4c <_sbrk+0x68>)
 8000b04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b06:	4b10      	ldr	r3, [pc, #64]	; (8000b48 <_sbrk+0x64>)
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	693a      	ldr	r2, [r7, #16]
 8000b10:	429a      	cmp	r2, r3
 8000b12:	d207      	bcs.n	8000b24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b14:	f004 fa92 	bl	800503c <__errno>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	220c      	movs	r2, #12
 8000b1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b22:	e009      	b.n	8000b38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b24:	4b08      	ldr	r3, [pc, #32]	; (8000b48 <_sbrk+0x64>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b2a:	4b07      	ldr	r3, [pc, #28]	; (8000b48 <_sbrk+0x64>)
 8000b2c:	681a      	ldr	r2, [r3, #0]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	4413      	add	r3, r2
 8000b32:	4a05      	ldr	r2, [pc, #20]	; (8000b48 <_sbrk+0x64>)
 8000b34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b36:	68fb      	ldr	r3, [r7, #12]
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3718      	adds	r7, #24
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	20050000 	.word	0x20050000
 8000b44:	00000400 	.word	0x00000400
 8000b48:	20000334 	.word	0x20000334
 8000b4c:	20004260 	.word	0x20004260

08000b50 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b54:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <SystemInit+0x20>)
 8000b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b5a:	4a05      	ldr	r2, [pc, #20]	; (8000b70 <SystemInit+0x20>)
 8000b5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	e000ed00 	.word	0xe000ed00

08000b74 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b78:	4b14      	ldr	r3, [pc, #80]	; (8000bcc <MX_USART1_UART_Init+0x58>)
 8000b7a:	4a15      	ldr	r2, [pc, #84]	; (8000bd0 <MX_USART1_UART_Init+0x5c>)
 8000b7c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b7e:	4b13      	ldr	r3, [pc, #76]	; (8000bcc <MX_USART1_UART_Init+0x58>)
 8000b80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b84:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b86:	4b11      	ldr	r3, [pc, #68]	; (8000bcc <MX_USART1_UART_Init+0x58>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b8c:	4b0f      	ldr	r3, [pc, #60]	; (8000bcc <MX_USART1_UART_Init+0x58>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b92:	4b0e      	ldr	r3, [pc, #56]	; (8000bcc <MX_USART1_UART_Init+0x58>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b98:	4b0c      	ldr	r3, [pc, #48]	; (8000bcc <MX_USART1_UART_Init+0x58>)
 8000b9a:	220c      	movs	r2, #12
 8000b9c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b9e:	4b0b      	ldr	r3, [pc, #44]	; (8000bcc <MX_USART1_UART_Init+0x58>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ba4:	4b09      	ldr	r3, [pc, #36]	; (8000bcc <MX_USART1_UART_Init+0x58>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000baa:	4b08      	ldr	r3, [pc, #32]	; (8000bcc <MX_USART1_UART_Init+0x58>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bb0:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <MX_USART1_UART_Init+0x58>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bb6:	4805      	ldr	r0, [pc, #20]	; (8000bcc <MX_USART1_UART_Init+0x58>)
 8000bb8:	f001 ff18 	bl	80029ec <HAL_UART_Init>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000bc2:	f7ff fe59 	bl	8000878 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	20000338 	.word	0x20000338
 8000bd0:	40011000 	.word	0x40011000

08000bd4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b0ac      	sub	sp, #176	; 0xb0
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bdc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	60da      	str	r2, [r3, #12]
 8000bea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bec:	f107 0318 	add.w	r3, r7, #24
 8000bf0:	2284      	movs	r2, #132	; 0x84
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f004 f9d3 	bl	8004fa0 <memset>
  if(uartHandle->Instance==USART1)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a32      	ldr	r2, [pc, #200]	; (8000cc8 <HAL_UART_MspInit+0xf4>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d15c      	bne.n	8000cbe <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000c04:	2340      	movs	r3, #64	; 0x40
 8000c06:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c0c:	f107 0318 	add.w	r3, r7, #24
 8000c10:	4618      	mov	r0, r3
 8000c12:	f001 f81b 	bl	8001c4c <HAL_RCCEx_PeriphCLKConfig>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c1c:	f7ff fe2c 	bl	8000878 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c20:	4b2a      	ldr	r3, [pc, #168]	; (8000ccc <HAL_UART_MspInit+0xf8>)
 8000c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c24:	4a29      	ldr	r2, [pc, #164]	; (8000ccc <HAL_UART_MspInit+0xf8>)
 8000c26:	f043 0310 	orr.w	r3, r3, #16
 8000c2a:	6453      	str	r3, [r2, #68]	; 0x44
 8000c2c:	4b27      	ldr	r3, [pc, #156]	; (8000ccc <HAL_UART_MspInit+0xf8>)
 8000c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c30:	f003 0310 	and.w	r3, r3, #16
 8000c34:	617b      	str	r3, [r7, #20]
 8000c36:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c38:	4b24      	ldr	r3, [pc, #144]	; (8000ccc <HAL_UART_MspInit+0xf8>)
 8000c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3c:	4a23      	ldr	r2, [pc, #140]	; (8000ccc <HAL_UART_MspInit+0xf8>)
 8000c3e:	f043 0302 	orr.w	r3, r3, #2
 8000c42:	6313      	str	r3, [r2, #48]	; 0x30
 8000c44:	4b21      	ldr	r3, [pc, #132]	; (8000ccc <HAL_UART_MspInit+0xf8>)
 8000c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c48:	f003 0302 	and.w	r3, r3, #2
 8000c4c:	613b      	str	r3, [r7, #16]
 8000c4e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c50:	4b1e      	ldr	r3, [pc, #120]	; (8000ccc <HAL_UART_MspInit+0xf8>)
 8000c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c54:	4a1d      	ldr	r2, [pc, #116]	; (8000ccc <HAL_UART_MspInit+0xf8>)
 8000c56:	f043 0301 	orr.w	r3, r3, #1
 8000c5a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5c:	4b1b      	ldr	r3, [pc, #108]	; (8000ccc <HAL_UART_MspInit+0xf8>)
 8000c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c60:	f003 0301 	and.w	r3, r3, #1
 8000c64:	60fb      	str	r3, [r7, #12]
 8000c66:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000c68:	2380      	movs	r3, #128	; 0x80
 8000c6a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c7a:	2303      	movs	r3, #3
 8000c7c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c80:	2307      	movs	r3, #7
 8000c82:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c86:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4810      	ldr	r0, [pc, #64]	; (8000cd0 <HAL_UART_MspInit+0xfc>)
 8000c8e:	f000 f95b 	bl	8000f48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c96:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca6:	2303      	movs	r3, #3
 8000ca8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000cac:	2307      	movs	r3, #7
 8000cae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4806      	ldr	r0, [pc, #24]	; (8000cd4 <HAL_UART_MspInit+0x100>)
 8000cba:	f000 f945 	bl	8000f48 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000cbe:	bf00      	nop
 8000cc0:	37b0      	adds	r7, #176	; 0xb0
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	40011000 	.word	0x40011000
 8000ccc:	40023800 	.word	0x40023800
 8000cd0:	40020400 	.word	0x40020400
 8000cd4:	40020000 	.word	0x40020000

08000cd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000cd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d10 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cdc:	480d      	ldr	r0, [pc, #52]	; (8000d14 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cde:	490e      	ldr	r1, [pc, #56]	; (8000d18 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ce0:	4a0e      	ldr	r2, [pc, #56]	; (8000d1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ce2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ce4:	e002      	b.n	8000cec <LoopCopyDataInit>

08000ce6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ce6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ce8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cea:	3304      	adds	r3, #4

08000cec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cf0:	d3f9      	bcc.n	8000ce6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cf2:	4a0b      	ldr	r2, [pc, #44]	; (8000d20 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cf4:	4c0b      	ldr	r4, [pc, #44]	; (8000d24 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cf6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cf8:	e001      	b.n	8000cfe <LoopFillZerobss>

08000cfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cfc:	3204      	adds	r2, #4

08000cfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d00:	d3fb      	bcc.n	8000cfa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d02:	f7ff ff25 	bl	8000b50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d06:	f004 f99f 	bl	8005048 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d0a:	f7ff fcfb 	bl	8000704 <main>
  bx  lr    
 8000d0e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d10:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000d14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d18:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000d1c:	08005698 	.word	0x08005698
  ldr r2, =_sbss
 8000d20:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000d24:	2000425c 	.word	0x2000425c

08000d28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d28:	e7fe      	b.n	8000d28 <ADC_IRQHandler>

08000d2a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d2e:	2003      	movs	r0, #3
 8000d30:	f000 f8d5 	bl	8000ede <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d34:	200f      	movs	r0, #15
 8000d36:	f7ff fdcd 	bl	80008d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d3a:	f7ff fda3 	bl	8000884 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d3e:	2300      	movs	r3, #0
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d48:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <HAL_IncTick+0x20>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <HAL_IncTick+0x24>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4413      	add	r3, r2
 8000d54:	4a04      	ldr	r2, [pc, #16]	; (8000d68 <HAL_IncTick+0x24>)
 8000d56:	6013      	str	r3, [r2, #0]
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	20000008 	.word	0x20000008
 8000d68:	200003c0 	.word	0x200003c0

08000d6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d70:	4b03      	ldr	r3, [pc, #12]	; (8000d80 <HAL_GetTick+0x14>)
 8000d72:	681b      	ldr	r3, [r3, #0]
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	200003c0 	.word	0x200003c0

08000d84 <__NVIC_SetPriorityGrouping>:
{
 8000d84:	b480      	push	{r7}
 8000d86:	b085      	sub	sp, #20
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	f003 0307 	and.w	r3, r3, #7
 8000d92:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d94:	4b0b      	ldr	r3, [pc, #44]	; (8000dc4 <__NVIC_SetPriorityGrouping+0x40>)
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d9a:	68ba      	ldr	r2, [r7, #8]
 8000d9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000da0:	4013      	ands	r3, r2
 8000da2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000dac:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000dae:	4313      	orrs	r3, r2
 8000db0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000db2:	4a04      	ldr	r2, [pc, #16]	; (8000dc4 <__NVIC_SetPriorityGrouping+0x40>)
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	60d3      	str	r3, [r2, #12]
}
 8000db8:	bf00      	nop
 8000dba:	3714      	adds	r7, #20
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	e000ed00 	.word	0xe000ed00
 8000dc8:	05fa0000 	.word	0x05fa0000

08000dcc <__NVIC_GetPriorityGrouping>:
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dd0:	4b04      	ldr	r3, [pc, #16]	; (8000de4 <__NVIC_GetPriorityGrouping+0x18>)
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	0a1b      	lsrs	r3, r3, #8
 8000dd6:	f003 0307 	and.w	r3, r3, #7
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <__NVIC_EnableIRQ>:
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	db0b      	blt.n	8000e12 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dfa:	79fb      	ldrb	r3, [r7, #7]
 8000dfc:	f003 021f 	and.w	r2, r3, #31
 8000e00:	4907      	ldr	r1, [pc, #28]	; (8000e20 <__NVIC_EnableIRQ+0x38>)
 8000e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e06:	095b      	lsrs	r3, r3, #5
 8000e08:	2001      	movs	r0, #1
 8000e0a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000e12:	bf00      	nop
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	e000e100 	.word	0xe000e100

08000e24 <__NVIC_SetPriority>:
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	6039      	str	r1, [r7, #0]
 8000e2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	db0a      	blt.n	8000e4e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	b2da      	uxtb	r2, r3
 8000e3c:	490c      	ldr	r1, [pc, #48]	; (8000e70 <__NVIC_SetPriority+0x4c>)
 8000e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e42:	0112      	lsls	r2, r2, #4
 8000e44:	b2d2      	uxtb	r2, r2
 8000e46:	440b      	add	r3, r1
 8000e48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000e4c:	e00a      	b.n	8000e64 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	b2da      	uxtb	r2, r3
 8000e52:	4908      	ldr	r1, [pc, #32]	; (8000e74 <__NVIC_SetPriority+0x50>)
 8000e54:	79fb      	ldrb	r3, [r7, #7]
 8000e56:	f003 030f 	and.w	r3, r3, #15
 8000e5a:	3b04      	subs	r3, #4
 8000e5c:	0112      	lsls	r2, r2, #4
 8000e5e:	b2d2      	uxtb	r2, r2
 8000e60:	440b      	add	r3, r1
 8000e62:	761a      	strb	r2, [r3, #24]
}
 8000e64:	bf00      	nop
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	e000e100 	.word	0xe000e100
 8000e74:	e000ed00 	.word	0xe000ed00

08000e78 <NVIC_EncodePriority>:
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b089      	sub	sp, #36	; 0x24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	60f8      	str	r0, [r7, #12]
 8000e80:	60b9      	str	r1, [r7, #8]
 8000e82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	f003 0307 	and.w	r3, r3, #7
 8000e8a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	f1c3 0307 	rsb	r3, r3, #7
 8000e92:	2b04      	cmp	r3, #4
 8000e94:	bf28      	it	cs
 8000e96:	2304      	movcs	r3, #4
 8000e98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	3304      	adds	r3, #4
 8000e9e:	2b06      	cmp	r3, #6
 8000ea0:	d902      	bls.n	8000ea8 <NVIC_EncodePriority+0x30>
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	3b03      	subs	r3, #3
 8000ea6:	e000      	b.n	8000eaa <NVIC_EncodePriority+0x32>
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eac:	f04f 32ff 	mov.w	r2, #4294967295
 8000eb0:	69bb      	ldr	r3, [r7, #24]
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	43da      	mvns	r2, r3
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	401a      	ands	r2, r3
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ec0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eca:	43d9      	mvns	r1, r3
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed0:	4313      	orrs	r3, r2
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3724      	adds	r7, #36	; 0x24
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr

08000ede <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b082      	sub	sp, #8
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f7ff ff4c 	bl	8000d84 <__NVIC_SetPriorityGrouping>
}
 8000eec:	bf00      	nop
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	60b9      	str	r1, [r7, #8]
 8000efe:	607a      	str	r2, [r7, #4]
 8000f00:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f02:	2300      	movs	r3, #0
 8000f04:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f06:	f7ff ff61 	bl	8000dcc <__NVIC_GetPriorityGrouping>
 8000f0a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f0c:	687a      	ldr	r2, [r7, #4]
 8000f0e:	68b9      	ldr	r1, [r7, #8]
 8000f10:	6978      	ldr	r0, [r7, #20]
 8000f12:	f7ff ffb1 	bl	8000e78 <NVIC_EncodePriority>
 8000f16:	4602      	mov	r2, r0
 8000f18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f1c:	4611      	mov	r1, r2
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f7ff ff80 	bl	8000e24 <__NVIC_SetPriority>
}
 8000f24:	bf00      	nop
 8000f26:	3718      	adds	r7, #24
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff ff54 	bl	8000de8 <__NVIC_EnableIRQ>
}
 8000f40:	bf00      	nop
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b089      	sub	sp, #36	; 0x24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000f52:	2300      	movs	r3, #0
 8000f54:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000f56:	2300      	movs	r3, #0
 8000f58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000f62:	2300      	movs	r3, #0
 8000f64:	61fb      	str	r3, [r7, #28]
 8000f66:	e175      	b.n	8001254 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000f68:	2201      	movs	r2, #1
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	697a      	ldr	r2, [r7, #20]
 8000f78:	4013      	ands	r3, r2
 8000f7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	f040 8164 	bne.w	800124e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f003 0303 	and.w	r3, r3, #3
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d005      	beq.n	8000f9e <HAL_GPIO_Init+0x56>
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	f003 0303 	and.w	r3, r3, #3
 8000f9a:	2b02      	cmp	r3, #2
 8000f9c:	d130      	bne.n	8001000 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	689b      	ldr	r3, [r3, #8]
 8000fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	2203      	movs	r2, #3
 8000faa:	fa02 f303 	lsl.w	r3, r2, r3
 8000fae:	43db      	mvns	r3, r3
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	68da      	ldr	r2, [r3, #12]
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	091b      	lsrs	r3, r3, #4
 8000fea:	f003 0201 	and.w	r2, r3, #1
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f003 0303 	and.w	r3, r3, #3
 8001008:	2b03      	cmp	r3, #3
 800100a:	d017      	beq.n	800103c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	2203      	movs	r2, #3
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	43db      	mvns	r3, r3
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	4013      	ands	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	689a      	ldr	r2, [r3, #8]
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	4313      	orrs	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f003 0303 	and.w	r3, r3, #3
 8001044:	2b02      	cmp	r3, #2
 8001046:	d123      	bne.n	8001090 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	08da      	lsrs	r2, r3, #3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	3208      	adds	r2, #8
 8001050:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001054:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	f003 0307 	and.w	r3, r3, #7
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	220f      	movs	r2, #15
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	43db      	mvns	r3, r3
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	4013      	ands	r3, r2
 800106a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	691a      	ldr	r2, [r3, #16]
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	f003 0307 	and.w	r3, r3, #7
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	4313      	orrs	r3, r2
 8001080:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	08da      	lsrs	r2, r3, #3
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	3208      	adds	r2, #8
 800108a:	69b9      	ldr	r1, [r7, #24]
 800108c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	2203      	movs	r2, #3
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	43db      	mvns	r3, r3
 80010a2:	69ba      	ldr	r2, [r7, #24]
 80010a4:	4013      	ands	r3, r2
 80010a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f003 0203 	and.w	r2, r3, #3
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	f000 80be 	beq.w	800124e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d2:	4b66      	ldr	r3, [pc, #408]	; (800126c <HAL_GPIO_Init+0x324>)
 80010d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d6:	4a65      	ldr	r2, [pc, #404]	; (800126c <HAL_GPIO_Init+0x324>)
 80010d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010dc:	6453      	str	r3, [r2, #68]	; 0x44
 80010de:	4b63      	ldr	r3, [pc, #396]	; (800126c <HAL_GPIO_Init+0x324>)
 80010e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80010ea:	4a61      	ldr	r2, [pc, #388]	; (8001270 <HAL_GPIO_Init+0x328>)
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	089b      	lsrs	r3, r3, #2
 80010f0:	3302      	adds	r3, #2
 80010f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	f003 0303 	and.w	r3, r3, #3
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	220f      	movs	r2, #15
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	43db      	mvns	r3, r3
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	4013      	ands	r3, r2
 800110c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a58      	ldr	r2, [pc, #352]	; (8001274 <HAL_GPIO_Init+0x32c>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d037      	beq.n	8001186 <HAL_GPIO_Init+0x23e>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a57      	ldr	r2, [pc, #348]	; (8001278 <HAL_GPIO_Init+0x330>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d031      	beq.n	8001182 <HAL_GPIO_Init+0x23a>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a56      	ldr	r2, [pc, #344]	; (800127c <HAL_GPIO_Init+0x334>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d02b      	beq.n	800117e <HAL_GPIO_Init+0x236>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a55      	ldr	r2, [pc, #340]	; (8001280 <HAL_GPIO_Init+0x338>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d025      	beq.n	800117a <HAL_GPIO_Init+0x232>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a54      	ldr	r2, [pc, #336]	; (8001284 <HAL_GPIO_Init+0x33c>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d01f      	beq.n	8001176 <HAL_GPIO_Init+0x22e>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a53      	ldr	r2, [pc, #332]	; (8001288 <HAL_GPIO_Init+0x340>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d019      	beq.n	8001172 <HAL_GPIO_Init+0x22a>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a52      	ldr	r2, [pc, #328]	; (800128c <HAL_GPIO_Init+0x344>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d013      	beq.n	800116e <HAL_GPIO_Init+0x226>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a51      	ldr	r2, [pc, #324]	; (8001290 <HAL_GPIO_Init+0x348>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d00d      	beq.n	800116a <HAL_GPIO_Init+0x222>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a50      	ldr	r2, [pc, #320]	; (8001294 <HAL_GPIO_Init+0x34c>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d007      	beq.n	8001166 <HAL_GPIO_Init+0x21e>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a4f      	ldr	r2, [pc, #316]	; (8001298 <HAL_GPIO_Init+0x350>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d101      	bne.n	8001162 <HAL_GPIO_Init+0x21a>
 800115e:	2309      	movs	r3, #9
 8001160:	e012      	b.n	8001188 <HAL_GPIO_Init+0x240>
 8001162:	230a      	movs	r3, #10
 8001164:	e010      	b.n	8001188 <HAL_GPIO_Init+0x240>
 8001166:	2308      	movs	r3, #8
 8001168:	e00e      	b.n	8001188 <HAL_GPIO_Init+0x240>
 800116a:	2307      	movs	r3, #7
 800116c:	e00c      	b.n	8001188 <HAL_GPIO_Init+0x240>
 800116e:	2306      	movs	r3, #6
 8001170:	e00a      	b.n	8001188 <HAL_GPIO_Init+0x240>
 8001172:	2305      	movs	r3, #5
 8001174:	e008      	b.n	8001188 <HAL_GPIO_Init+0x240>
 8001176:	2304      	movs	r3, #4
 8001178:	e006      	b.n	8001188 <HAL_GPIO_Init+0x240>
 800117a:	2303      	movs	r3, #3
 800117c:	e004      	b.n	8001188 <HAL_GPIO_Init+0x240>
 800117e:	2302      	movs	r3, #2
 8001180:	e002      	b.n	8001188 <HAL_GPIO_Init+0x240>
 8001182:	2301      	movs	r3, #1
 8001184:	e000      	b.n	8001188 <HAL_GPIO_Init+0x240>
 8001186:	2300      	movs	r3, #0
 8001188:	69fa      	ldr	r2, [r7, #28]
 800118a:	f002 0203 	and.w	r2, r2, #3
 800118e:	0092      	lsls	r2, r2, #2
 8001190:	4093      	lsls	r3, r2
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	4313      	orrs	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001198:	4935      	ldr	r1, [pc, #212]	; (8001270 <HAL_GPIO_Init+0x328>)
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	089b      	lsrs	r3, r3, #2
 800119e:	3302      	adds	r3, #2
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011a6:	4b3d      	ldr	r3, [pc, #244]	; (800129c <HAL_GPIO_Init+0x354>)
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	43db      	mvns	r3, r3
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	4013      	ands	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d003      	beq.n	80011ca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011ca:	4a34      	ldr	r2, [pc, #208]	; (800129c <HAL_GPIO_Init+0x354>)
 80011cc:	69bb      	ldr	r3, [r7, #24]
 80011ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011d0:	4b32      	ldr	r3, [pc, #200]	; (800129c <HAL_GPIO_Init+0x354>)
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	43db      	mvns	r3, r3
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	4013      	ands	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d003      	beq.n	80011f4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011f4:	4a29      	ldr	r2, [pc, #164]	; (800129c <HAL_GPIO_Init+0x354>)
 80011f6:	69bb      	ldr	r3, [r7, #24]
 80011f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011fa:	4b28      	ldr	r3, [pc, #160]	; (800129c <HAL_GPIO_Init+0x354>)
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	43db      	mvns	r3, r3
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	4013      	ands	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001212:	2b00      	cmp	r3, #0
 8001214:	d003      	beq.n	800121e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	4313      	orrs	r3, r2
 800121c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800121e:	4a1f      	ldr	r2, [pc, #124]	; (800129c <HAL_GPIO_Init+0x354>)
 8001220:	69bb      	ldr	r3, [r7, #24]
 8001222:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001224:	4b1d      	ldr	r3, [pc, #116]	; (800129c <HAL_GPIO_Init+0x354>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	43db      	mvns	r3, r3
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	4013      	ands	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800123c:	2b00      	cmp	r3, #0
 800123e:	d003      	beq.n	8001248 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	4313      	orrs	r3, r2
 8001246:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001248:	4a14      	ldr	r2, [pc, #80]	; (800129c <HAL_GPIO_Init+0x354>)
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	3301      	adds	r3, #1
 8001252:	61fb      	str	r3, [r7, #28]
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	2b0f      	cmp	r3, #15
 8001258:	f67f ae86 	bls.w	8000f68 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800125c:	bf00      	nop
 800125e:	bf00      	nop
 8001260:	3724      	adds	r7, #36	; 0x24
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	40023800 	.word	0x40023800
 8001270:	40013800 	.word	0x40013800
 8001274:	40020000 	.word	0x40020000
 8001278:	40020400 	.word	0x40020400
 800127c:	40020800 	.word	0x40020800
 8001280:	40020c00 	.word	0x40020c00
 8001284:	40021000 	.word	0x40021000
 8001288:	40021400 	.word	0x40021400
 800128c:	40021800 	.word	0x40021800
 8001290:	40021c00 	.word	0x40021c00
 8001294:	40022000 	.word	0x40022000
 8001298:	40022400 	.word	0x40022400
 800129c:	40013c00 	.word	0x40013c00

080012a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	460b      	mov	r3, r1
 80012aa:	807b      	strh	r3, [r7, #2]
 80012ac:	4613      	mov	r3, r2
 80012ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012b0:	787b      	ldrb	r3, [r7, #1]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d003      	beq.n	80012be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012b6:	887a      	ldrh	r2, [r7, #2]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80012bc:	e003      	b.n	80012c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80012be:	887b      	ldrh	r3, [r7, #2]
 80012c0:	041a      	lsls	r2, r3, #16
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	619a      	str	r2, [r3, #24]
}
 80012c6:	bf00      	nop
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
	...

080012d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b086      	sub	sp, #24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80012dc:	2300      	movs	r3, #0
 80012de:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d101      	bne.n	80012ea <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e291      	b.n	800180e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	f000 8087 	beq.w	8001406 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80012f8:	4b96      	ldr	r3, [pc, #600]	; (8001554 <HAL_RCC_OscConfig+0x280>)
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	f003 030c 	and.w	r3, r3, #12
 8001300:	2b04      	cmp	r3, #4
 8001302:	d00c      	beq.n	800131e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001304:	4b93      	ldr	r3, [pc, #588]	; (8001554 <HAL_RCC_OscConfig+0x280>)
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	f003 030c 	and.w	r3, r3, #12
 800130c:	2b08      	cmp	r3, #8
 800130e:	d112      	bne.n	8001336 <HAL_RCC_OscConfig+0x62>
 8001310:	4b90      	ldr	r3, [pc, #576]	; (8001554 <HAL_RCC_OscConfig+0x280>)
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001318:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800131c:	d10b      	bne.n	8001336 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800131e:	4b8d      	ldr	r3, [pc, #564]	; (8001554 <HAL_RCC_OscConfig+0x280>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d06c      	beq.n	8001404 <HAL_RCC_OscConfig+0x130>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d168      	bne.n	8001404 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e26b      	b.n	800180e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800133e:	d106      	bne.n	800134e <HAL_RCC_OscConfig+0x7a>
 8001340:	4b84      	ldr	r3, [pc, #528]	; (8001554 <HAL_RCC_OscConfig+0x280>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a83      	ldr	r2, [pc, #524]	; (8001554 <HAL_RCC_OscConfig+0x280>)
 8001346:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800134a:	6013      	str	r3, [r2, #0]
 800134c:	e02e      	b.n	80013ac <HAL_RCC_OscConfig+0xd8>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d10c      	bne.n	8001370 <HAL_RCC_OscConfig+0x9c>
 8001356:	4b7f      	ldr	r3, [pc, #508]	; (8001554 <HAL_RCC_OscConfig+0x280>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a7e      	ldr	r2, [pc, #504]	; (8001554 <HAL_RCC_OscConfig+0x280>)
 800135c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001360:	6013      	str	r3, [r2, #0]
 8001362:	4b7c      	ldr	r3, [pc, #496]	; (8001554 <HAL_RCC_OscConfig+0x280>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a7b      	ldr	r2, [pc, #492]	; (8001554 <HAL_RCC_OscConfig+0x280>)
 8001368:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800136c:	6013      	str	r3, [r2, #0]
 800136e:	e01d      	b.n	80013ac <HAL_RCC_OscConfig+0xd8>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001378:	d10c      	bne.n	8001394 <HAL_RCC_OscConfig+0xc0>
 800137a:	4b76      	ldr	r3, [pc, #472]	; (8001554 <HAL_RCC_OscConfig+0x280>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a75      	ldr	r2, [pc, #468]	; (8001554 <HAL_RCC_OscConfig+0x280>)
 8001380:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001384:	6013      	str	r3, [r2, #0]
 8001386:	4b73      	ldr	r3, [pc, #460]	; (8001554 <HAL_RCC_OscConfig+0x280>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a72      	ldr	r2, [pc, #456]	; (8001554 <HAL_RCC_OscConfig+0x280>)
 800138c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001390:	6013      	str	r3, [r2, #0]
 8001392:	e00b      	b.n	80013ac <HAL_RCC_OscConfig+0xd8>
 8001394:	4b6f      	ldr	r3, [pc, #444]	; (8001554 <HAL_RCC_OscConfig+0x280>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a6e      	ldr	r2, [pc, #440]	; (8001554 <HAL_RCC_OscConfig+0x280>)
 800139a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800139e:	6013      	str	r3, [r2, #0]
 80013a0:	4b6c      	ldr	r3, [pc, #432]	; (8001554 <HAL_RCC_OscConfig+0x280>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a6b      	ldr	r2, [pc, #428]	; (8001554 <HAL_RCC_OscConfig+0x280>)
 80013a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d013      	beq.n	80013dc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013b4:	f7ff fcda 	bl	8000d6c <HAL_GetTick>
 80013b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ba:	e008      	b.n	80013ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013bc:	f7ff fcd6 	bl	8000d6c <HAL_GetTick>
 80013c0:	4602      	mov	r2, r0
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	2b64      	cmp	r3, #100	; 0x64
 80013c8:	d901      	bls.n	80013ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013ca:	2303      	movs	r3, #3
 80013cc:	e21f      	b.n	800180e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ce:	4b61      	ldr	r3, [pc, #388]	; (8001554 <HAL_RCC_OscConfig+0x280>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d0f0      	beq.n	80013bc <HAL_RCC_OscConfig+0xe8>
 80013da:	e014      	b.n	8001406 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013dc:	f7ff fcc6 	bl	8000d6c <HAL_GetTick>
 80013e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013e2:	e008      	b.n	80013f6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013e4:	f7ff fcc2 	bl	8000d6c <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	2b64      	cmp	r3, #100	; 0x64
 80013f0:	d901      	bls.n	80013f6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80013f2:	2303      	movs	r3, #3
 80013f4:	e20b      	b.n	800180e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013f6:	4b57      	ldr	r3, [pc, #348]	; (8001554 <HAL_RCC_OscConfig+0x280>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d1f0      	bne.n	80013e4 <HAL_RCC_OscConfig+0x110>
 8001402:	e000      	b.n	8001406 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001404:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	2b00      	cmp	r3, #0
 8001410:	d069      	beq.n	80014e6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001412:	4b50      	ldr	r3, [pc, #320]	; (8001554 <HAL_RCC_OscConfig+0x280>)
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	f003 030c 	and.w	r3, r3, #12
 800141a:	2b00      	cmp	r3, #0
 800141c:	d00b      	beq.n	8001436 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800141e:	4b4d      	ldr	r3, [pc, #308]	; (8001554 <HAL_RCC_OscConfig+0x280>)
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	f003 030c 	and.w	r3, r3, #12
 8001426:	2b08      	cmp	r3, #8
 8001428:	d11c      	bne.n	8001464 <HAL_RCC_OscConfig+0x190>
 800142a:	4b4a      	ldr	r3, [pc, #296]	; (8001554 <HAL_RCC_OscConfig+0x280>)
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d116      	bne.n	8001464 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001436:	4b47      	ldr	r3, [pc, #284]	; (8001554 <HAL_RCC_OscConfig+0x280>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	2b00      	cmp	r3, #0
 8001440:	d005      	beq.n	800144e <HAL_RCC_OscConfig+0x17a>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	68db      	ldr	r3, [r3, #12]
 8001446:	2b01      	cmp	r3, #1
 8001448:	d001      	beq.n	800144e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e1df      	b.n	800180e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800144e:	4b41      	ldr	r3, [pc, #260]	; (8001554 <HAL_RCC_OscConfig+0x280>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	691b      	ldr	r3, [r3, #16]
 800145a:	00db      	lsls	r3, r3, #3
 800145c:	493d      	ldr	r1, [pc, #244]	; (8001554 <HAL_RCC_OscConfig+0x280>)
 800145e:	4313      	orrs	r3, r2
 8001460:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001462:	e040      	b.n	80014e6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d023      	beq.n	80014b4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800146c:	4b39      	ldr	r3, [pc, #228]	; (8001554 <HAL_RCC_OscConfig+0x280>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a38      	ldr	r2, [pc, #224]	; (8001554 <HAL_RCC_OscConfig+0x280>)
 8001472:	f043 0301 	orr.w	r3, r3, #1
 8001476:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001478:	f7ff fc78 	bl	8000d6c <HAL_GetTick>
 800147c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800147e:	e008      	b.n	8001492 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001480:	f7ff fc74 	bl	8000d6c <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	2b02      	cmp	r3, #2
 800148c:	d901      	bls.n	8001492 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e1bd      	b.n	800180e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001492:	4b30      	ldr	r3, [pc, #192]	; (8001554 <HAL_RCC_OscConfig+0x280>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	2b00      	cmp	r3, #0
 800149c:	d0f0      	beq.n	8001480 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800149e:	4b2d      	ldr	r3, [pc, #180]	; (8001554 <HAL_RCC_OscConfig+0x280>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	691b      	ldr	r3, [r3, #16]
 80014aa:	00db      	lsls	r3, r3, #3
 80014ac:	4929      	ldr	r1, [pc, #164]	; (8001554 <HAL_RCC_OscConfig+0x280>)
 80014ae:	4313      	orrs	r3, r2
 80014b0:	600b      	str	r3, [r1, #0]
 80014b2:	e018      	b.n	80014e6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014b4:	4b27      	ldr	r3, [pc, #156]	; (8001554 <HAL_RCC_OscConfig+0x280>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a26      	ldr	r2, [pc, #152]	; (8001554 <HAL_RCC_OscConfig+0x280>)
 80014ba:	f023 0301 	bic.w	r3, r3, #1
 80014be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c0:	f7ff fc54 	bl	8000d6c <HAL_GetTick>
 80014c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014c6:	e008      	b.n	80014da <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014c8:	f7ff fc50 	bl	8000d6c <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d901      	bls.n	80014da <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e199      	b.n	800180e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014da:	4b1e      	ldr	r3, [pc, #120]	; (8001554 <HAL_RCC_OscConfig+0x280>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d1f0      	bne.n	80014c8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0308 	and.w	r3, r3, #8
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d038      	beq.n	8001564 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	695b      	ldr	r3, [r3, #20]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d019      	beq.n	800152e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014fa:	4b16      	ldr	r3, [pc, #88]	; (8001554 <HAL_RCC_OscConfig+0x280>)
 80014fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014fe:	4a15      	ldr	r2, [pc, #84]	; (8001554 <HAL_RCC_OscConfig+0x280>)
 8001500:	f043 0301 	orr.w	r3, r3, #1
 8001504:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001506:	f7ff fc31 	bl	8000d6c <HAL_GetTick>
 800150a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800150c:	e008      	b.n	8001520 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800150e:	f7ff fc2d 	bl	8000d6c <HAL_GetTick>
 8001512:	4602      	mov	r2, r0
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	2b02      	cmp	r3, #2
 800151a:	d901      	bls.n	8001520 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800151c:	2303      	movs	r3, #3
 800151e:	e176      	b.n	800180e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001520:	4b0c      	ldr	r3, [pc, #48]	; (8001554 <HAL_RCC_OscConfig+0x280>)
 8001522:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001524:	f003 0302 	and.w	r3, r3, #2
 8001528:	2b00      	cmp	r3, #0
 800152a:	d0f0      	beq.n	800150e <HAL_RCC_OscConfig+0x23a>
 800152c:	e01a      	b.n	8001564 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800152e:	4b09      	ldr	r3, [pc, #36]	; (8001554 <HAL_RCC_OscConfig+0x280>)
 8001530:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001532:	4a08      	ldr	r2, [pc, #32]	; (8001554 <HAL_RCC_OscConfig+0x280>)
 8001534:	f023 0301 	bic.w	r3, r3, #1
 8001538:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800153a:	f7ff fc17 	bl	8000d6c <HAL_GetTick>
 800153e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001540:	e00a      	b.n	8001558 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001542:	f7ff fc13 	bl	8000d6c <HAL_GetTick>
 8001546:	4602      	mov	r2, r0
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	2b02      	cmp	r3, #2
 800154e:	d903      	bls.n	8001558 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001550:	2303      	movs	r3, #3
 8001552:	e15c      	b.n	800180e <HAL_RCC_OscConfig+0x53a>
 8001554:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001558:	4b91      	ldr	r3, [pc, #580]	; (80017a0 <HAL_RCC_OscConfig+0x4cc>)
 800155a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800155c:	f003 0302 	and.w	r3, r3, #2
 8001560:	2b00      	cmp	r3, #0
 8001562:	d1ee      	bne.n	8001542 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 0304 	and.w	r3, r3, #4
 800156c:	2b00      	cmp	r3, #0
 800156e:	f000 80a4 	beq.w	80016ba <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001572:	4b8b      	ldr	r3, [pc, #556]	; (80017a0 <HAL_RCC_OscConfig+0x4cc>)
 8001574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d10d      	bne.n	800159a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800157e:	4b88      	ldr	r3, [pc, #544]	; (80017a0 <HAL_RCC_OscConfig+0x4cc>)
 8001580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001582:	4a87      	ldr	r2, [pc, #540]	; (80017a0 <HAL_RCC_OscConfig+0x4cc>)
 8001584:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001588:	6413      	str	r3, [r2, #64]	; 0x40
 800158a:	4b85      	ldr	r3, [pc, #532]	; (80017a0 <HAL_RCC_OscConfig+0x4cc>)
 800158c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001592:	60bb      	str	r3, [r7, #8]
 8001594:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001596:	2301      	movs	r3, #1
 8001598:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800159a:	4b82      	ldr	r3, [pc, #520]	; (80017a4 <HAL_RCC_OscConfig+0x4d0>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d118      	bne.n	80015d8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80015a6:	4b7f      	ldr	r3, [pc, #508]	; (80017a4 <HAL_RCC_OscConfig+0x4d0>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a7e      	ldr	r2, [pc, #504]	; (80017a4 <HAL_RCC_OscConfig+0x4d0>)
 80015ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015b2:	f7ff fbdb 	bl	8000d6c <HAL_GetTick>
 80015b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015b8:	e008      	b.n	80015cc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015ba:	f7ff fbd7 	bl	8000d6c <HAL_GetTick>
 80015be:	4602      	mov	r2, r0
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	2b64      	cmp	r3, #100	; 0x64
 80015c6:	d901      	bls.n	80015cc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80015c8:	2303      	movs	r3, #3
 80015ca:	e120      	b.n	800180e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015cc:	4b75      	ldr	r3, [pc, #468]	; (80017a4 <HAL_RCC_OscConfig+0x4d0>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d0f0      	beq.n	80015ba <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d106      	bne.n	80015ee <HAL_RCC_OscConfig+0x31a>
 80015e0:	4b6f      	ldr	r3, [pc, #444]	; (80017a0 <HAL_RCC_OscConfig+0x4cc>)
 80015e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015e4:	4a6e      	ldr	r2, [pc, #440]	; (80017a0 <HAL_RCC_OscConfig+0x4cc>)
 80015e6:	f043 0301 	orr.w	r3, r3, #1
 80015ea:	6713      	str	r3, [r2, #112]	; 0x70
 80015ec:	e02d      	b.n	800164a <HAL_RCC_OscConfig+0x376>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d10c      	bne.n	8001610 <HAL_RCC_OscConfig+0x33c>
 80015f6:	4b6a      	ldr	r3, [pc, #424]	; (80017a0 <HAL_RCC_OscConfig+0x4cc>)
 80015f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015fa:	4a69      	ldr	r2, [pc, #420]	; (80017a0 <HAL_RCC_OscConfig+0x4cc>)
 80015fc:	f023 0301 	bic.w	r3, r3, #1
 8001600:	6713      	str	r3, [r2, #112]	; 0x70
 8001602:	4b67      	ldr	r3, [pc, #412]	; (80017a0 <HAL_RCC_OscConfig+0x4cc>)
 8001604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001606:	4a66      	ldr	r2, [pc, #408]	; (80017a0 <HAL_RCC_OscConfig+0x4cc>)
 8001608:	f023 0304 	bic.w	r3, r3, #4
 800160c:	6713      	str	r3, [r2, #112]	; 0x70
 800160e:	e01c      	b.n	800164a <HAL_RCC_OscConfig+0x376>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	2b05      	cmp	r3, #5
 8001616:	d10c      	bne.n	8001632 <HAL_RCC_OscConfig+0x35e>
 8001618:	4b61      	ldr	r3, [pc, #388]	; (80017a0 <HAL_RCC_OscConfig+0x4cc>)
 800161a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800161c:	4a60      	ldr	r2, [pc, #384]	; (80017a0 <HAL_RCC_OscConfig+0x4cc>)
 800161e:	f043 0304 	orr.w	r3, r3, #4
 8001622:	6713      	str	r3, [r2, #112]	; 0x70
 8001624:	4b5e      	ldr	r3, [pc, #376]	; (80017a0 <HAL_RCC_OscConfig+0x4cc>)
 8001626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001628:	4a5d      	ldr	r2, [pc, #372]	; (80017a0 <HAL_RCC_OscConfig+0x4cc>)
 800162a:	f043 0301 	orr.w	r3, r3, #1
 800162e:	6713      	str	r3, [r2, #112]	; 0x70
 8001630:	e00b      	b.n	800164a <HAL_RCC_OscConfig+0x376>
 8001632:	4b5b      	ldr	r3, [pc, #364]	; (80017a0 <HAL_RCC_OscConfig+0x4cc>)
 8001634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001636:	4a5a      	ldr	r2, [pc, #360]	; (80017a0 <HAL_RCC_OscConfig+0x4cc>)
 8001638:	f023 0301 	bic.w	r3, r3, #1
 800163c:	6713      	str	r3, [r2, #112]	; 0x70
 800163e:	4b58      	ldr	r3, [pc, #352]	; (80017a0 <HAL_RCC_OscConfig+0x4cc>)
 8001640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001642:	4a57      	ldr	r2, [pc, #348]	; (80017a0 <HAL_RCC_OscConfig+0x4cc>)
 8001644:	f023 0304 	bic.w	r3, r3, #4
 8001648:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d015      	beq.n	800167e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001652:	f7ff fb8b 	bl	8000d6c <HAL_GetTick>
 8001656:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001658:	e00a      	b.n	8001670 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800165a:	f7ff fb87 	bl	8000d6c <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	f241 3288 	movw	r2, #5000	; 0x1388
 8001668:	4293      	cmp	r3, r2
 800166a:	d901      	bls.n	8001670 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800166c:	2303      	movs	r3, #3
 800166e:	e0ce      	b.n	800180e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001670:	4b4b      	ldr	r3, [pc, #300]	; (80017a0 <HAL_RCC_OscConfig+0x4cc>)
 8001672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001674:	f003 0302 	and.w	r3, r3, #2
 8001678:	2b00      	cmp	r3, #0
 800167a:	d0ee      	beq.n	800165a <HAL_RCC_OscConfig+0x386>
 800167c:	e014      	b.n	80016a8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800167e:	f7ff fb75 	bl	8000d6c <HAL_GetTick>
 8001682:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001684:	e00a      	b.n	800169c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001686:	f7ff fb71 	bl	8000d6c <HAL_GetTick>
 800168a:	4602      	mov	r2, r0
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	f241 3288 	movw	r2, #5000	; 0x1388
 8001694:	4293      	cmp	r3, r2
 8001696:	d901      	bls.n	800169c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001698:	2303      	movs	r3, #3
 800169a:	e0b8      	b.n	800180e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800169c:	4b40      	ldr	r3, [pc, #256]	; (80017a0 <HAL_RCC_OscConfig+0x4cc>)
 800169e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016a0:	f003 0302 	and.w	r3, r3, #2
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d1ee      	bne.n	8001686 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80016a8:	7dfb      	ldrb	r3, [r7, #23]
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d105      	bne.n	80016ba <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016ae:	4b3c      	ldr	r3, [pc, #240]	; (80017a0 <HAL_RCC_OscConfig+0x4cc>)
 80016b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b2:	4a3b      	ldr	r2, [pc, #236]	; (80017a0 <HAL_RCC_OscConfig+0x4cc>)
 80016b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016b8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	699b      	ldr	r3, [r3, #24]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	f000 80a4 	beq.w	800180c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016c4:	4b36      	ldr	r3, [pc, #216]	; (80017a0 <HAL_RCC_OscConfig+0x4cc>)
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	f003 030c 	and.w	r3, r3, #12
 80016cc:	2b08      	cmp	r3, #8
 80016ce:	d06b      	beq.n	80017a8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	699b      	ldr	r3, [r3, #24]
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d149      	bne.n	800176c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016d8:	4b31      	ldr	r3, [pc, #196]	; (80017a0 <HAL_RCC_OscConfig+0x4cc>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a30      	ldr	r2, [pc, #192]	; (80017a0 <HAL_RCC_OscConfig+0x4cc>)
 80016de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e4:	f7ff fb42 	bl	8000d6c <HAL_GetTick>
 80016e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ea:	e008      	b.n	80016fe <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016ec:	f7ff fb3e 	bl	8000d6c <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d901      	bls.n	80016fe <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e087      	b.n	800180e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016fe:	4b28      	ldr	r3, [pc, #160]	; (80017a0 <HAL_RCC_OscConfig+0x4cc>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d1f0      	bne.n	80016ec <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	69da      	ldr	r2, [r3, #28]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a1b      	ldr	r3, [r3, #32]
 8001712:	431a      	orrs	r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001718:	019b      	lsls	r3, r3, #6
 800171a:	431a      	orrs	r2, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001720:	085b      	lsrs	r3, r3, #1
 8001722:	3b01      	subs	r3, #1
 8001724:	041b      	lsls	r3, r3, #16
 8001726:	431a      	orrs	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800172c:	061b      	lsls	r3, r3, #24
 800172e:	4313      	orrs	r3, r2
 8001730:	4a1b      	ldr	r2, [pc, #108]	; (80017a0 <HAL_RCC_OscConfig+0x4cc>)
 8001732:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001736:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001738:	4b19      	ldr	r3, [pc, #100]	; (80017a0 <HAL_RCC_OscConfig+0x4cc>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a18      	ldr	r2, [pc, #96]	; (80017a0 <HAL_RCC_OscConfig+0x4cc>)
 800173e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001742:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001744:	f7ff fb12 	bl	8000d6c <HAL_GetTick>
 8001748:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800174a:	e008      	b.n	800175e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800174c:	f7ff fb0e 	bl	8000d6c <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	2b02      	cmp	r3, #2
 8001758:	d901      	bls.n	800175e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e057      	b.n	800180e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800175e:	4b10      	ldr	r3, [pc, #64]	; (80017a0 <HAL_RCC_OscConfig+0x4cc>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d0f0      	beq.n	800174c <HAL_RCC_OscConfig+0x478>
 800176a:	e04f      	b.n	800180c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800176c:	4b0c      	ldr	r3, [pc, #48]	; (80017a0 <HAL_RCC_OscConfig+0x4cc>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a0b      	ldr	r2, [pc, #44]	; (80017a0 <HAL_RCC_OscConfig+0x4cc>)
 8001772:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001776:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001778:	f7ff faf8 	bl	8000d6c <HAL_GetTick>
 800177c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800177e:	e008      	b.n	8001792 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001780:	f7ff faf4 	bl	8000d6c <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b02      	cmp	r3, #2
 800178c:	d901      	bls.n	8001792 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e03d      	b.n	800180e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001792:	4b03      	ldr	r3, [pc, #12]	; (80017a0 <HAL_RCC_OscConfig+0x4cc>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d1f0      	bne.n	8001780 <HAL_RCC_OscConfig+0x4ac>
 800179e:	e035      	b.n	800180c <HAL_RCC_OscConfig+0x538>
 80017a0:	40023800 	.word	0x40023800
 80017a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80017a8:	4b1b      	ldr	r3, [pc, #108]	; (8001818 <HAL_RCC_OscConfig+0x544>)
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	699b      	ldr	r3, [r3, #24]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d028      	beq.n	8001808 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d121      	bne.n	8001808 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d11a      	bne.n	8001808 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017d2:	68fa      	ldr	r2, [r7, #12]
 80017d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80017d8:	4013      	ands	r3, r2
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80017de:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d111      	bne.n	8001808 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ee:	085b      	lsrs	r3, r3, #1
 80017f0:	3b01      	subs	r3, #1
 80017f2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d107      	bne.n	8001808 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001802:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001804:	429a      	cmp	r2, r3
 8001806:	d001      	beq.n	800180c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e000      	b.n	800180e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	3718      	adds	r7, #24
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	40023800 	.word	0x40023800

0800181c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001826:	2300      	movs	r3, #0
 8001828:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d101      	bne.n	8001834 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e0d0      	b.n	80019d6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001834:	4b6a      	ldr	r3, [pc, #424]	; (80019e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 030f 	and.w	r3, r3, #15
 800183c:	683a      	ldr	r2, [r7, #0]
 800183e:	429a      	cmp	r2, r3
 8001840:	d910      	bls.n	8001864 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001842:	4b67      	ldr	r3, [pc, #412]	; (80019e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f023 020f 	bic.w	r2, r3, #15
 800184a:	4965      	ldr	r1, [pc, #404]	; (80019e0 <HAL_RCC_ClockConfig+0x1c4>)
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	4313      	orrs	r3, r2
 8001850:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001852:	4b63      	ldr	r3, [pc, #396]	; (80019e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 030f 	and.w	r3, r3, #15
 800185a:	683a      	ldr	r2, [r7, #0]
 800185c:	429a      	cmp	r2, r3
 800185e:	d001      	beq.n	8001864 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e0b8      	b.n	80019d6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0302 	and.w	r3, r3, #2
 800186c:	2b00      	cmp	r3, #0
 800186e:	d020      	beq.n	80018b2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0304 	and.w	r3, r3, #4
 8001878:	2b00      	cmp	r3, #0
 800187a:	d005      	beq.n	8001888 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800187c:	4b59      	ldr	r3, [pc, #356]	; (80019e4 <HAL_RCC_ClockConfig+0x1c8>)
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	4a58      	ldr	r2, [pc, #352]	; (80019e4 <HAL_RCC_ClockConfig+0x1c8>)
 8001882:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001886:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 0308 	and.w	r3, r3, #8
 8001890:	2b00      	cmp	r3, #0
 8001892:	d005      	beq.n	80018a0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001894:	4b53      	ldr	r3, [pc, #332]	; (80019e4 <HAL_RCC_ClockConfig+0x1c8>)
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	4a52      	ldr	r2, [pc, #328]	; (80019e4 <HAL_RCC_ClockConfig+0x1c8>)
 800189a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800189e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018a0:	4b50      	ldr	r3, [pc, #320]	; (80019e4 <HAL_RCC_ClockConfig+0x1c8>)
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	494d      	ldr	r1, [pc, #308]	; (80019e4 <HAL_RCC_ClockConfig+0x1c8>)
 80018ae:	4313      	orrs	r3, r2
 80018b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0301 	and.w	r3, r3, #1
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d040      	beq.n	8001940 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d107      	bne.n	80018d6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018c6:	4b47      	ldr	r3, [pc, #284]	; (80019e4 <HAL_RCC_ClockConfig+0x1c8>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d115      	bne.n	80018fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e07f      	b.n	80019d6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d107      	bne.n	80018ee <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018de:	4b41      	ldr	r3, [pc, #260]	; (80019e4 <HAL_RCC_ClockConfig+0x1c8>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d109      	bne.n	80018fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e073      	b.n	80019d6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ee:	4b3d      	ldr	r3, [pc, #244]	; (80019e4 <HAL_RCC_ClockConfig+0x1c8>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0302 	and.w	r3, r3, #2
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d101      	bne.n	80018fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e06b      	b.n	80019d6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018fe:	4b39      	ldr	r3, [pc, #228]	; (80019e4 <HAL_RCC_ClockConfig+0x1c8>)
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	f023 0203 	bic.w	r2, r3, #3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	4936      	ldr	r1, [pc, #216]	; (80019e4 <HAL_RCC_ClockConfig+0x1c8>)
 800190c:	4313      	orrs	r3, r2
 800190e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001910:	f7ff fa2c 	bl	8000d6c <HAL_GetTick>
 8001914:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001916:	e00a      	b.n	800192e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001918:	f7ff fa28 	bl	8000d6c <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	f241 3288 	movw	r2, #5000	; 0x1388
 8001926:	4293      	cmp	r3, r2
 8001928:	d901      	bls.n	800192e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e053      	b.n	80019d6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800192e:	4b2d      	ldr	r3, [pc, #180]	; (80019e4 <HAL_RCC_ClockConfig+0x1c8>)
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	f003 020c 	and.w	r2, r3, #12
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	429a      	cmp	r2, r3
 800193e:	d1eb      	bne.n	8001918 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001940:	4b27      	ldr	r3, [pc, #156]	; (80019e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 030f 	and.w	r3, r3, #15
 8001948:	683a      	ldr	r2, [r7, #0]
 800194a:	429a      	cmp	r2, r3
 800194c:	d210      	bcs.n	8001970 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800194e:	4b24      	ldr	r3, [pc, #144]	; (80019e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f023 020f 	bic.w	r2, r3, #15
 8001956:	4922      	ldr	r1, [pc, #136]	; (80019e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	4313      	orrs	r3, r2
 800195c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800195e:	4b20      	ldr	r3, [pc, #128]	; (80019e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 030f 	and.w	r3, r3, #15
 8001966:	683a      	ldr	r2, [r7, #0]
 8001968:	429a      	cmp	r2, r3
 800196a:	d001      	beq.n	8001970 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e032      	b.n	80019d6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0304 	and.w	r3, r3, #4
 8001978:	2b00      	cmp	r3, #0
 800197a:	d008      	beq.n	800198e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800197c:	4b19      	ldr	r3, [pc, #100]	; (80019e4 <HAL_RCC_ClockConfig+0x1c8>)
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	4916      	ldr	r1, [pc, #88]	; (80019e4 <HAL_RCC_ClockConfig+0x1c8>)
 800198a:	4313      	orrs	r3, r2
 800198c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0308 	and.w	r3, r3, #8
 8001996:	2b00      	cmp	r3, #0
 8001998:	d009      	beq.n	80019ae <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800199a:	4b12      	ldr	r3, [pc, #72]	; (80019e4 <HAL_RCC_ClockConfig+0x1c8>)
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	691b      	ldr	r3, [r3, #16]
 80019a6:	00db      	lsls	r3, r3, #3
 80019a8:	490e      	ldr	r1, [pc, #56]	; (80019e4 <HAL_RCC_ClockConfig+0x1c8>)
 80019aa:	4313      	orrs	r3, r2
 80019ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019ae:	f000 f821 	bl	80019f4 <HAL_RCC_GetSysClockFreq>
 80019b2:	4602      	mov	r2, r0
 80019b4:	4b0b      	ldr	r3, [pc, #44]	; (80019e4 <HAL_RCC_ClockConfig+0x1c8>)
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	091b      	lsrs	r3, r3, #4
 80019ba:	f003 030f 	and.w	r3, r3, #15
 80019be:	490a      	ldr	r1, [pc, #40]	; (80019e8 <HAL_RCC_ClockConfig+0x1cc>)
 80019c0:	5ccb      	ldrb	r3, [r1, r3]
 80019c2:	fa22 f303 	lsr.w	r3, r2, r3
 80019c6:	4a09      	ldr	r2, [pc, #36]	; (80019ec <HAL_RCC_ClockConfig+0x1d0>)
 80019c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80019ca:	4b09      	ldr	r3, [pc, #36]	; (80019f0 <HAL_RCC_ClockConfig+0x1d4>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7fe ff80 	bl	80008d4 <HAL_InitTick>

  return HAL_OK;
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3710      	adds	r7, #16
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	40023c00 	.word	0x40023c00
 80019e4:	40023800 	.word	0x40023800
 80019e8:	08005670 	.word	0x08005670
 80019ec:	20000000 	.word	0x20000000
 80019f0:	20000004 	.word	0x20000004

080019f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019f8:	b090      	sub	sp, #64	; 0x40
 80019fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80019fc:	2300      	movs	r3, #0
 80019fe:	637b      	str	r3, [r7, #52]	; 0x34
 8001a00:	2300      	movs	r3, #0
 8001a02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a04:	2300      	movs	r3, #0
 8001a06:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a0c:	4b59      	ldr	r3, [pc, #356]	; (8001b74 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	f003 030c 	and.w	r3, r3, #12
 8001a14:	2b08      	cmp	r3, #8
 8001a16:	d00d      	beq.n	8001a34 <HAL_RCC_GetSysClockFreq+0x40>
 8001a18:	2b08      	cmp	r3, #8
 8001a1a:	f200 80a1 	bhi.w	8001b60 <HAL_RCC_GetSysClockFreq+0x16c>
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d002      	beq.n	8001a28 <HAL_RCC_GetSysClockFreq+0x34>
 8001a22:	2b04      	cmp	r3, #4
 8001a24:	d003      	beq.n	8001a2e <HAL_RCC_GetSysClockFreq+0x3a>
 8001a26:	e09b      	b.n	8001b60 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a28:	4b53      	ldr	r3, [pc, #332]	; (8001b78 <HAL_RCC_GetSysClockFreq+0x184>)
 8001a2a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a2c:	e09b      	b.n	8001b66 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a2e:	4b53      	ldr	r3, [pc, #332]	; (8001b7c <HAL_RCC_GetSysClockFreq+0x188>)
 8001a30:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a32:	e098      	b.n	8001b66 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a34:	4b4f      	ldr	r3, [pc, #316]	; (8001b74 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a3c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001a3e:	4b4d      	ldr	r3, [pc, #308]	; (8001b74 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d028      	beq.n	8001a9c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a4a:	4b4a      	ldr	r3, [pc, #296]	; (8001b74 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	099b      	lsrs	r3, r3, #6
 8001a50:	2200      	movs	r2, #0
 8001a52:	623b      	str	r3, [r7, #32]
 8001a54:	627a      	str	r2, [r7, #36]	; 0x24
 8001a56:	6a3b      	ldr	r3, [r7, #32]
 8001a58:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	4b47      	ldr	r3, [pc, #284]	; (8001b7c <HAL_RCC_GetSysClockFreq+0x188>)
 8001a60:	fb03 f201 	mul.w	r2, r3, r1
 8001a64:	2300      	movs	r3, #0
 8001a66:	fb00 f303 	mul.w	r3, r0, r3
 8001a6a:	4413      	add	r3, r2
 8001a6c:	4a43      	ldr	r2, [pc, #268]	; (8001b7c <HAL_RCC_GetSysClockFreq+0x188>)
 8001a6e:	fba0 1202 	umull	r1, r2, r0, r2
 8001a72:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a74:	460a      	mov	r2, r1
 8001a76:	62ba      	str	r2, [r7, #40]	; 0x28
 8001a78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a7a:	4413      	add	r3, r2
 8001a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a80:	2200      	movs	r2, #0
 8001a82:	61bb      	str	r3, [r7, #24]
 8001a84:	61fa      	str	r2, [r7, #28]
 8001a86:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a8a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001a8e:	f7fe fbbf 	bl	8000210 <__aeabi_uldivmod>
 8001a92:	4602      	mov	r2, r0
 8001a94:	460b      	mov	r3, r1
 8001a96:	4613      	mov	r3, r2
 8001a98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a9a:	e053      	b.n	8001b44 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a9c:	4b35      	ldr	r3, [pc, #212]	; (8001b74 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	099b      	lsrs	r3, r3, #6
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	613b      	str	r3, [r7, #16]
 8001aa6:	617a      	str	r2, [r7, #20]
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001aae:	f04f 0b00 	mov.w	fp, #0
 8001ab2:	4652      	mov	r2, sl
 8001ab4:	465b      	mov	r3, fp
 8001ab6:	f04f 0000 	mov.w	r0, #0
 8001aba:	f04f 0100 	mov.w	r1, #0
 8001abe:	0159      	lsls	r1, r3, #5
 8001ac0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ac4:	0150      	lsls	r0, r2, #5
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	460b      	mov	r3, r1
 8001aca:	ebb2 080a 	subs.w	r8, r2, sl
 8001ace:	eb63 090b 	sbc.w	r9, r3, fp
 8001ad2:	f04f 0200 	mov.w	r2, #0
 8001ad6:	f04f 0300 	mov.w	r3, #0
 8001ada:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001ade:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001ae2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001ae6:	ebb2 0408 	subs.w	r4, r2, r8
 8001aea:	eb63 0509 	sbc.w	r5, r3, r9
 8001aee:	f04f 0200 	mov.w	r2, #0
 8001af2:	f04f 0300 	mov.w	r3, #0
 8001af6:	00eb      	lsls	r3, r5, #3
 8001af8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001afc:	00e2      	lsls	r2, r4, #3
 8001afe:	4614      	mov	r4, r2
 8001b00:	461d      	mov	r5, r3
 8001b02:	eb14 030a 	adds.w	r3, r4, sl
 8001b06:	603b      	str	r3, [r7, #0]
 8001b08:	eb45 030b 	adc.w	r3, r5, fp
 8001b0c:	607b      	str	r3, [r7, #4]
 8001b0e:	f04f 0200 	mov.w	r2, #0
 8001b12:	f04f 0300 	mov.w	r3, #0
 8001b16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b1a:	4629      	mov	r1, r5
 8001b1c:	028b      	lsls	r3, r1, #10
 8001b1e:	4621      	mov	r1, r4
 8001b20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b24:	4621      	mov	r1, r4
 8001b26:	028a      	lsls	r2, r1, #10
 8001b28:	4610      	mov	r0, r2
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b2e:	2200      	movs	r2, #0
 8001b30:	60bb      	str	r3, [r7, #8]
 8001b32:	60fa      	str	r2, [r7, #12]
 8001b34:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b38:	f7fe fb6a 	bl	8000210 <__aeabi_uldivmod>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	460b      	mov	r3, r1
 8001b40:	4613      	mov	r3, r2
 8001b42:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001b44:	4b0b      	ldr	r3, [pc, #44]	; (8001b74 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	0c1b      	lsrs	r3, r3, #16
 8001b4a:	f003 0303 	and.w	r3, r3, #3
 8001b4e:	3301      	adds	r3, #1
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8001b54:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b5c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001b5e:	e002      	b.n	8001b66 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b60:	4b05      	ldr	r3, [pc, #20]	; (8001b78 <HAL_RCC_GetSysClockFreq+0x184>)
 8001b62:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001b64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3740      	adds	r7, #64	; 0x40
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b72:	bf00      	nop
 8001b74:	40023800 	.word	0x40023800
 8001b78:	00f42400 	.word	0x00f42400
 8001b7c:	017d7840 	.word	0x017d7840

08001b80 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b84:	4b03      	ldr	r3, [pc, #12]	; (8001b94 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b86:	681b      	ldr	r3, [r3, #0]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	20000000 	.word	0x20000000

08001b98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b9c:	f7ff fff0 	bl	8001b80 <HAL_RCC_GetHCLKFreq>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	4b05      	ldr	r3, [pc, #20]	; (8001bb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	0a9b      	lsrs	r3, r3, #10
 8001ba8:	f003 0307 	and.w	r3, r3, #7
 8001bac:	4903      	ldr	r1, [pc, #12]	; (8001bbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bae:	5ccb      	ldrb	r3, [r1, r3]
 8001bb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	40023800 	.word	0x40023800
 8001bbc:	08005680 	.word	0x08005680

08001bc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001bc4:	f7ff ffdc 	bl	8001b80 <HAL_RCC_GetHCLKFreq>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	4b05      	ldr	r3, [pc, #20]	; (8001be0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	0b5b      	lsrs	r3, r3, #13
 8001bd0:	f003 0307 	and.w	r3, r3, #7
 8001bd4:	4903      	ldr	r1, [pc, #12]	; (8001be4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bd6:	5ccb      	ldrb	r3, [r1, r3]
 8001bd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	40023800 	.word	0x40023800
 8001be4:	08005680 	.word	0x08005680

08001be8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	220f      	movs	r2, #15
 8001bf6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001bf8:	4b12      	ldr	r3, [pc, #72]	; (8001c44 <HAL_RCC_GetClockConfig+0x5c>)
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f003 0203 	and.w	r2, r3, #3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c04:	4b0f      	ldr	r3, [pc, #60]	; (8001c44 <HAL_RCC_GetClockConfig+0x5c>)
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c10:	4b0c      	ldr	r3, [pc, #48]	; (8001c44 <HAL_RCC_GetClockConfig+0x5c>)
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001c1c:	4b09      	ldr	r3, [pc, #36]	; (8001c44 <HAL_RCC_GetClockConfig+0x5c>)
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	08db      	lsrs	r3, r3, #3
 8001c22:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c2a:	4b07      	ldr	r3, [pc, #28]	; (8001c48 <HAL_RCC_GetClockConfig+0x60>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 020f 	and.w	r2, r3, #15
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	601a      	str	r2, [r3, #0]
}
 8001c36:	bf00      	nop
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	40023800 	.word	0x40023800
 8001c48:	40023c00 	.word	0x40023c00

08001c4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b088      	sub	sp, #32
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001c54:	2300      	movs	r3, #0
 8001c56:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001c60:	2300      	movs	r3, #0
 8001c62:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001c64:	2300      	movs	r3, #0
 8001c66:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0301 	and.w	r3, r3, #1
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d012      	beq.n	8001c9a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001c74:	4b69      	ldr	r3, [pc, #420]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	4a68      	ldr	r2, [pc, #416]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c7a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001c7e:	6093      	str	r3, [r2, #8]
 8001c80:	4b66      	ldr	r3, [pc, #408]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c82:	689a      	ldr	r2, [r3, #8]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c88:	4964      	ldr	r1, [pc, #400]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d101      	bne.n	8001c9a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001c96:	2301      	movs	r3, #1
 8001c98:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d017      	beq.n	8001cd6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001ca6:	4b5d      	ldr	r3, [pc, #372]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ca8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001cac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cb4:	4959      	ldr	r1, [pc, #356]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cc0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001cc4:	d101      	bne.n	8001cca <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d101      	bne.n	8001cd6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d017      	beq.n	8001d12 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001ce2:	4b4e      	ldr	r3, [pc, #312]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ce4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ce8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf0:	494a      	ldr	r1, [pc, #296]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d00:	d101      	bne.n	8001d06 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001d02:	2301      	movs	r3, #1
 8001d04:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d101      	bne.n	8001d12 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0320 	and.w	r3, r3, #32
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	f000 808b 	beq.w	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d30:	4b3a      	ldr	r3, [pc, #232]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d34:	4a39      	ldr	r2, [pc, #228]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d3a:	6413      	str	r3, [r2, #64]	; 0x40
 8001d3c:	4b37      	ldr	r3, [pc, #220]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d44:	60bb      	str	r3, [r7, #8]
 8001d46:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001d48:	4b35      	ldr	r3, [pc, #212]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a34      	ldr	r2, [pc, #208]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001d4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d54:	f7ff f80a 	bl	8000d6c <HAL_GetTick>
 8001d58:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001d5a:	e008      	b.n	8001d6e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d5c:	f7ff f806 	bl	8000d6c <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b64      	cmp	r3, #100	; 0x64
 8001d68:	d901      	bls.n	8001d6e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e357      	b.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001d6e:	4b2c      	ldr	r3, [pc, #176]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d0f0      	beq.n	8001d5c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001d7a:	4b28      	ldr	r3, [pc, #160]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d82:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d035      	beq.n	8001df6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d02e      	beq.n	8001df6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d98:	4b20      	ldr	r3, [pc, #128]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001da0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001da2:	4b1e      	ldr	r3, [pc, #120]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001da6:	4a1d      	ldr	r2, [pc, #116]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001da8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dac:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001dae:	4b1b      	ldr	r3, [pc, #108]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001db2:	4a1a      	ldr	r2, [pc, #104]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001db4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001db8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001dba:	4a18      	ldr	r2, [pc, #96]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001dc0:	4b16      	ldr	r3, [pc, #88]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dc4:	f003 0301 	and.w	r3, r3, #1
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d114      	bne.n	8001df6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dcc:	f7fe ffce 	bl	8000d6c <HAL_GetTick>
 8001dd0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dd2:	e00a      	b.n	8001dea <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dd4:	f7fe ffca 	bl	8000d6c <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	f241 3288 	movw	r2, #5000	; 0x1388
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d901      	bls.n	8001dea <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e319      	b.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dea:	4b0c      	ldr	r3, [pc, #48]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d0ee      	beq.n	8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dfe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001e02:	d111      	bne.n	8001e28 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001e04:	4b05      	ldr	r3, [pc, #20]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e10:	4b04      	ldr	r3, [pc, #16]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001e12:	400b      	ands	r3, r1
 8001e14:	4901      	ldr	r1, [pc, #4]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e16:	4313      	orrs	r3, r2
 8001e18:	608b      	str	r3, [r1, #8]
 8001e1a:	e00b      	b.n	8001e34 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001e1c:	40023800 	.word	0x40023800
 8001e20:	40007000 	.word	0x40007000
 8001e24:	0ffffcff 	.word	0x0ffffcff
 8001e28:	4baa      	ldr	r3, [pc, #680]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	4aa9      	ldr	r2, [pc, #676]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e2e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001e32:	6093      	str	r3, [r2, #8]
 8001e34:	4ba7      	ldr	r3, [pc, #668]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e36:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e40:	49a4      	ldr	r1, [pc, #656]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e42:	4313      	orrs	r3, r2
 8001e44:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0310 	and.w	r3, r3, #16
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d010      	beq.n	8001e74 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001e52:	4ba0      	ldr	r3, [pc, #640]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e58:	4a9e      	ldr	r2, [pc, #632]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e5e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001e62:	4b9c      	ldr	r3, [pc, #624]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e64:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e6c:	4999      	ldr	r1, [pc, #612]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d00a      	beq.n	8001e96 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e80:	4b94      	ldr	r3, [pc, #592]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e86:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e8e:	4991      	ldr	r1, [pc, #580]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e90:	4313      	orrs	r3, r2
 8001e92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d00a      	beq.n	8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001ea2:	4b8c      	ldr	r3, [pc, #560]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ea8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001eb0:	4988      	ldr	r1, [pc, #544]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d00a      	beq.n	8001eda <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001ec4:	4b83      	ldr	r3, [pc, #524]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ed2:	4980      	ldr	r1, [pc, #512]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d00a      	beq.n	8001efc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001ee6:	4b7b      	ldr	r3, [pc, #492]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eec:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ef4:	4977      	ldr	r1, [pc, #476]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d00a      	beq.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f08:	4b72      	ldr	r3, [pc, #456]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f0e:	f023 0203 	bic.w	r2, r3, #3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f16:	496f      	ldr	r1, [pc, #444]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d00a      	beq.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f2a:	4b6a      	ldr	r3, [pc, #424]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f30:	f023 020c 	bic.w	r2, r3, #12
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f38:	4966      	ldr	r1, [pc, #408]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d00a      	beq.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001f4c:	4b61      	ldr	r3, [pc, #388]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f52:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f5a:	495e      	ldr	r1, [pc, #376]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d00a      	beq.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001f6e:	4b59      	ldr	r3, [pc, #356]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f74:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f7c:	4955      	ldr	r1, [pc, #340]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d00a      	beq.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001f90:	4b50      	ldr	r3, [pc, #320]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f96:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f9e:	494d      	ldr	r1, [pc, #308]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d00a      	beq.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001fb2:	4b48      	ldr	r3, [pc, #288]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fb8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc0:	4944      	ldr	r1, [pc, #272]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d00a      	beq.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001fd4:	4b3f      	ldr	r3, [pc, #252]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fda:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fe2:	493c      	ldr	r1, [pc, #240]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d00a      	beq.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001ff6:	4b37      	ldr	r3, [pc, #220]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ffc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002004:	4933      	ldr	r1, [pc, #204]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002006:	4313      	orrs	r3, r2
 8002008:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d00a      	beq.n	800202e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002018:	4b2e      	ldr	r3, [pc, #184]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800201a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800201e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002026:	492b      	ldr	r1, [pc, #172]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002028:	4313      	orrs	r3, r2
 800202a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d011      	beq.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800203a:	4b26      	ldr	r3, [pc, #152]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800203c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002040:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002048:	4922      	ldr	r1, [pc, #136]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800204a:	4313      	orrs	r3, r2
 800204c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002054:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002058:	d101      	bne.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800205a:	2301      	movs	r3, #1
 800205c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0308 	and.w	r3, r3, #8
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800206a:	2301      	movs	r3, #1
 800206c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d00a      	beq.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800207a:	4b16      	ldr	r3, [pc, #88]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800207c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002080:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002088:	4912      	ldr	r1, [pc, #72]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800208a:	4313      	orrs	r3, r2
 800208c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d00b      	beq.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800209c:	4b0d      	ldr	r3, [pc, #52]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800209e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020a2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80020ac:	4909      	ldr	r1, [pc, #36]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d006      	beq.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	f000 80d9 	beq.w	800227a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80020c8:	4b02      	ldr	r3, [pc, #8]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a01      	ldr	r2, [pc, #4]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020ce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80020d2:	e001      	b.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80020d4:	40023800 	.word	0x40023800
 80020d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020da:	f7fe fe47 	bl	8000d6c <HAL_GetTick>
 80020de:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80020e0:	e008      	b.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80020e2:	f7fe fe43 	bl	8000d6c <HAL_GetTick>
 80020e6:	4602      	mov	r2, r0
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	2b64      	cmp	r3, #100	; 0x64
 80020ee:	d901      	bls.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	e194      	b.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80020f4:	4b6c      	ldr	r3, [pc, #432]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d1f0      	bne.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0301 	and.w	r3, r3, #1
 8002108:	2b00      	cmp	r3, #0
 800210a:	d021      	beq.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002110:	2b00      	cmp	r3, #0
 8002112:	d11d      	bne.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002114:	4b64      	ldr	r3, [pc, #400]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002116:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800211a:	0c1b      	lsrs	r3, r3, #16
 800211c:	f003 0303 	and.w	r3, r3, #3
 8002120:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002122:	4b61      	ldr	r3, [pc, #388]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002124:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002128:	0e1b      	lsrs	r3, r3, #24
 800212a:	f003 030f 	and.w	r3, r3, #15
 800212e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	019a      	lsls	r2, r3, #6
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	041b      	lsls	r3, r3, #16
 800213a:	431a      	orrs	r2, r3
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	061b      	lsls	r3, r3, #24
 8002140:	431a      	orrs	r2, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	071b      	lsls	r3, r3, #28
 8002148:	4957      	ldr	r1, [pc, #348]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800214a:	4313      	orrs	r3, r2
 800214c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d004      	beq.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002160:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002164:	d00a      	beq.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800216e:	2b00      	cmp	r3, #0
 8002170:	d02e      	beq.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002176:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800217a:	d129      	bne.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800217c:	4b4a      	ldr	r3, [pc, #296]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800217e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002182:	0c1b      	lsrs	r3, r3, #16
 8002184:	f003 0303 	and.w	r3, r3, #3
 8002188:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800218a:	4b47      	ldr	r3, [pc, #284]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800218c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002190:	0f1b      	lsrs	r3, r3, #28
 8002192:	f003 0307 	and.w	r3, r3, #7
 8002196:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	019a      	lsls	r2, r3, #6
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	041b      	lsls	r3, r3, #16
 80021a2:	431a      	orrs	r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	061b      	lsls	r3, r3, #24
 80021aa:	431a      	orrs	r2, r3
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	071b      	lsls	r3, r3, #28
 80021b0:	493d      	ldr	r1, [pc, #244]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80021b2:	4313      	orrs	r3, r2
 80021b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80021b8:	4b3b      	ldr	r3, [pc, #236]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80021ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021be:	f023 021f 	bic.w	r2, r3, #31
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c6:	3b01      	subs	r3, #1
 80021c8:	4937      	ldr	r1, [pc, #220]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d01d      	beq.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80021dc:	4b32      	ldr	r3, [pc, #200]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80021de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021e2:	0e1b      	lsrs	r3, r3, #24
 80021e4:	f003 030f 	and.w	r3, r3, #15
 80021e8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80021ea:	4b2f      	ldr	r3, [pc, #188]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80021ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021f0:	0f1b      	lsrs	r3, r3, #28
 80021f2:	f003 0307 	and.w	r3, r3, #7
 80021f6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	019a      	lsls	r2, r3, #6
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	691b      	ldr	r3, [r3, #16]
 8002202:	041b      	lsls	r3, r3, #16
 8002204:	431a      	orrs	r2, r3
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	061b      	lsls	r3, r3, #24
 800220a:	431a      	orrs	r2, r3
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	071b      	lsls	r3, r3, #28
 8002210:	4925      	ldr	r1, [pc, #148]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002212:	4313      	orrs	r3, r2
 8002214:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d011      	beq.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	019a      	lsls	r2, r3, #6
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	691b      	ldr	r3, [r3, #16]
 800222e:	041b      	lsls	r3, r3, #16
 8002230:	431a      	orrs	r2, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	061b      	lsls	r3, r3, #24
 8002238:	431a      	orrs	r2, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	071b      	lsls	r3, r3, #28
 8002240:	4919      	ldr	r1, [pc, #100]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002242:	4313      	orrs	r3, r2
 8002244:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002248:	4b17      	ldr	r3, [pc, #92]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a16      	ldr	r2, [pc, #88]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800224e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002252:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002254:	f7fe fd8a 	bl	8000d6c <HAL_GetTick>
 8002258:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800225a:	e008      	b.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800225c:	f7fe fd86 	bl	8000d6c <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	2b64      	cmp	r3, #100	; 0x64
 8002268:	d901      	bls.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e0d7      	b.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800226e:	4b0e      	ldr	r3, [pc, #56]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d0f0      	beq.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	2b01      	cmp	r3, #1
 800227e:	f040 80cd 	bne.w	800241c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002282:	4b09      	ldr	r3, [pc, #36]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a08      	ldr	r2, [pc, #32]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002288:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800228c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800228e:	f7fe fd6d 	bl	8000d6c <HAL_GetTick>
 8002292:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002294:	e00a      	b.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002296:	f7fe fd69 	bl	8000d6c <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	2b64      	cmp	r3, #100	; 0x64
 80022a2:	d903      	bls.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e0ba      	b.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80022a8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80022ac:	4b5e      	ldr	r3, [pc, #376]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80022b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022b8:	d0ed      	beq.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d003      	beq.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x682>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d009      	beq.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d02e      	beq.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d12a      	bne.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80022e2:	4b51      	ldr	r3, [pc, #324]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80022e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022e8:	0c1b      	lsrs	r3, r3, #16
 80022ea:	f003 0303 	and.w	r3, r3, #3
 80022ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80022f0:	4b4d      	ldr	r3, [pc, #308]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80022f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022f6:	0f1b      	lsrs	r3, r3, #28
 80022f8:	f003 0307 	and.w	r3, r3, #7
 80022fc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	695b      	ldr	r3, [r3, #20]
 8002302:	019a      	lsls	r2, r3, #6
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	041b      	lsls	r3, r3, #16
 8002308:	431a      	orrs	r2, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	699b      	ldr	r3, [r3, #24]
 800230e:	061b      	lsls	r3, r3, #24
 8002310:	431a      	orrs	r2, r3
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	071b      	lsls	r3, r3, #28
 8002316:	4944      	ldr	r1, [pc, #272]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002318:	4313      	orrs	r3, r2
 800231a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800231e:	4b42      	ldr	r3, [pc, #264]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002320:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002324:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800232c:	3b01      	subs	r3, #1
 800232e:	021b      	lsls	r3, r3, #8
 8002330:	493d      	ldr	r1, [pc, #244]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002332:	4313      	orrs	r3, r2
 8002334:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d022      	beq.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002348:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800234c:	d11d      	bne.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800234e:	4b36      	ldr	r3, [pc, #216]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002354:	0e1b      	lsrs	r3, r3, #24
 8002356:	f003 030f 	and.w	r3, r3, #15
 800235a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800235c:	4b32      	ldr	r3, [pc, #200]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800235e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002362:	0f1b      	lsrs	r3, r3, #28
 8002364:	f003 0307 	and.w	r3, r3, #7
 8002368:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	695b      	ldr	r3, [r3, #20]
 800236e:	019a      	lsls	r2, r3, #6
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6a1b      	ldr	r3, [r3, #32]
 8002374:	041b      	lsls	r3, r3, #16
 8002376:	431a      	orrs	r2, r3
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	061b      	lsls	r3, r3, #24
 800237c:	431a      	orrs	r2, r3
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	071b      	lsls	r3, r3, #28
 8002382:	4929      	ldr	r1, [pc, #164]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002384:	4313      	orrs	r3, r2
 8002386:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0308 	and.w	r3, r3, #8
 8002392:	2b00      	cmp	r3, #0
 8002394:	d028      	beq.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002396:	4b24      	ldr	r3, [pc, #144]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002398:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800239c:	0e1b      	lsrs	r3, r3, #24
 800239e:	f003 030f 	and.w	r3, r3, #15
 80023a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80023a4:	4b20      	ldr	r3, [pc, #128]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80023a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023aa:	0c1b      	lsrs	r3, r3, #16
 80023ac:	f003 0303 	and.w	r3, r3, #3
 80023b0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	019a      	lsls	r2, r3, #6
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	041b      	lsls	r3, r3, #16
 80023bc:	431a      	orrs	r2, r3
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	061b      	lsls	r3, r3, #24
 80023c2:	431a      	orrs	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	69db      	ldr	r3, [r3, #28]
 80023c8:	071b      	lsls	r3, r3, #28
 80023ca:	4917      	ldr	r1, [pc, #92]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80023d2:	4b15      	ldr	r3, [pc, #84]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80023d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e0:	4911      	ldr	r1, [pc, #68]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80023e8:	4b0f      	ldr	r3, [pc, #60]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a0e      	ldr	r2, [pc, #56]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80023ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023f4:	f7fe fcba 	bl	8000d6c <HAL_GetTick>
 80023f8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80023fa:	e008      	b.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80023fc:	f7fe fcb6 	bl	8000d6c <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b64      	cmp	r3, #100	; 0x64
 8002408:	d901      	bls.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e007      	b.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800240e:	4b06      	ldr	r3, [pc, #24]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002416:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800241a:	d1ef      	bne.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3720      	adds	r7, #32
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	40023800 	.word	0x40023800

0800242c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d101      	bne.n	800243e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e049      	b.n	80024d2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002444:	b2db      	uxtb	r3, r3
 8002446:	2b00      	cmp	r3, #0
 8002448:	d106      	bne.n	8002458 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f000 f841 	bl	80024da <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2202      	movs	r2, #2
 800245c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	3304      	adds	r3, #4
 8002468:	4619      	mov	r1, r3
 800246a:	4610      	mov	r0, r2
 800246c:	f000 fa00 	bl	8002870 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2201      	movs	r2, #1
 80024bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80024da:	b480      	push	{r7}
 80024dc:	b083      	sub	sp, #12
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80024e2:	bf00      	nop
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
	...

080024f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b085      	sub	sp, #20
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	2b01      	cmp	r3, #1
 8002502:	d001      	beq.n	8002508 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e054      	b.n	80025b2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2202      	movs	r2, #2
 800250c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	68da      	ldr	r2, [r3, #12]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f042 0201 	orr.w	r2, r2, #1
 800251e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a26      	ldr	r2, [pc, #152]	; (80025c0 <HAL_TIM_Base_Start_IT+0xd0>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d022      	beq.n	8002570 <HAL_TIM_Base_Start_IT+0x80>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002532:	d01d      	beq.n	8002570 <HAL_TIM_Base_Start_IT+0x80>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a22      	ldr	r2, [pc, #136]	; (80025c4 <HAL_TIM_Base_Start_IT+0xd4>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d018      	beq.n	8002570 <HAL_TIM_Base_Start_IT+0x80>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a21      	ldr	r2, [pc, #132]	; (80025c8 <HAL_TIM_Base_Start_IT+0xd8>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d013      	beq.n	8002570 <HAL_TIM_Base_Start_IT+0x80>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a1f      	ldr	r2, [pc, #124]	; (80025cc <HAL_TIM_Base_Start_IT+0xdc>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d00e      	beq.n	8002570 <HAL_TIM_Base_Start_IT+0x80>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a1e      	ldr	r2, [pc, #120]	; (80025d0 <HAL_TIM_Base_Start_IT+0xe0>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d009      	beq.n	8002570 <HAL_TIM_Base_Start_IT+0x80>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a1c      	ldr	r2, [pc, #112]	; (80025d4 <HAL_TIM_Base_Start_IT+0xe4>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d004      	beq.n	8002570 <HAL_TIM_Base_Start_IT+0x80>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a1b      	ldr	r2, [pc, #108]	; (80025d8 <HAL_TIM_Base_Start_IT+0xe8>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d115      	bne.n	800259c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	689a      	ldr	r2, [r3, #8]
 8002576:	4b19      	ldr	r3, [pc, #100]	; (80025dc <HAL_TIM_Base_Start_IT+0xec>)
 8002578:	4013      	ands	r3, r2
 800257a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2b06      	cmp	r3, #6
 8002580:	d015      	beq.n	80025ae <HAL_TIM_Base_Start_IT+0xbe>
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002588:	d011      	beq.n	80025ae <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f042 0201 	orr.w	r2, r2, #1
 8002598:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800259a:	e008      	b.n	80025ae <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f042 0201 	orr.w	r2, r2, #1
 80025aa:	601a      	str	r2, [r3, #0]
 80025ac:	e000      	b.n	80025b0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3714      	adds	r7, #20
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	40010000 	.word	0x40010000
 80025c4:	40000400 	.word	0x40000400
 80025c8:	40000800 	.word	0x40000800
 80025cc:	40000c00 	.word	0x40000c00
 80025d0:	40010400 	.word	0x40010400
 80025d4:	40014000 	.word	0x40014000
 80025d8:	40001800 	.word	0x40001800
 80025dc:	00010007 	.word	0x00010007

080025e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d122      	bne.n	800263c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	f003 0302 	and.w	r3, r3, #2
 8002600:	2b02      	cmp	r3, #2
 8002602:	d11b      	bne.n	800263c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f06f 0202 	mvn.w	r2, #2
 800260c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2201      	movs	r2, #1
 8002612:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	f003 0303 	and.w	r3, r3, #3
 800261e:	2b00      	cmp	r3, #0
 8002620:	d003      	beq.n	800262a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f000 f905 	bl	8002832 <HAL_TIM_IC_CaptureCallback>
 8002628:	e005      	b.n	8002636 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f000 f8f7 	bl	800281e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f000 f908 	bl	8002846 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	691b      	ldr	r3, [r3, #16]
 8002642:	f003 0304 	and.w	r3, r3, #4
 8002646:	2b04      	cmp	r3, #4
 8002648:	d122      	bne.n	8002690 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	f003 0304 	and.w	r3, r3, #4
 8002654:	2b04      	cmp	r3, #4
 8002656:	d11b      	bne.n	8002690 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f06f 0204 	mvn.w	r2, #4
 8002660:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2202      	movs	r2, #2
 8002666:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002672:	2b00      	cmp	r3, #0
 8002674:	d003      	beq.n	800267e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f000 f8db 	bl	8002832 <HAL_TIM_IC_CaptureCallback>
 800267c:	e005      	b.n	800268a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f000 f8cd 	bl	800281e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f000 f8de 	bl	8002846 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	f003 0308 	and.w	r3, r3, #8
 800269a:	2b08      	cmp	r3, #8
 800269c:	d122      	bne.n	80026e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	f003 0308 	and.w	r3, r3, #8
 80026a8:	2b08      	cmp	r3, #8
 80026aa:	d11b      	bne.n	80026e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f06f 0208 	mvn.w	r2, #8
 80026b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2204      	movs	r2, #4
 80026ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	69db      	ldr	r3, [r3, #28]
 80026c2:	f003 0303 	and.w	r3, r3, #3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d003      	beq.n	80026d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f000 f8b1 	bl	8002832 <HAL_TIM_IC_CaptureCallback>
 80026d0:	e005      	b.n	80026de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f000 f8a3 	bl	800281e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f000 f8b4 	bl	8002846 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	f003 0310 	and.w	r3, r3, #16
 80026ee:	2b10      	cmp	r3, #16
 80026f0:	d122      	bne.n	8002738 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	f003 0310 	and.w	r3, r3, #16
 80026fc:	2b10      	cmp	r3, #16
 80026fe:	d11b      	bne.n	8002738 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f06f 0210 	mvn.w	r2, #16
 8002708:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2208      	movs	r2, #8
 800270e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	69db      	ldr	r3, [r3, #28]
 8002716:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800271a:	2b00      	cmp	r3, #0
 800271c:	d003      	beq.n	8002726 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f000 f887 	bl	8002832 <HAL_TIM_IC_CaptureCallback>
 8002724:	e005      	b.n	8002732 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f000 f879 	bl	800281e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f000 f88a 	bl	8002846 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	2b01      	cmp	r3, #1
 8002744:	d10e      	bne.n	8002764 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	f003 0301 	and.w	r3, r3, #1
 8002750:	2b01      	cmp	r3, #1
 8002752:	d107      	bne.n	8002764 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f06f 0201 	mvn.w	r2, #1
 800275c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f7fe f878 	bl	8000854 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800276e:	2b80      	cmp	r3, #128	; 0x80
 8002770:	d10e      	bne.n	8002790 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800277c:	2b80      	cmp	r3, #128	; 0x80
 800277e:	d107      	bne.n	8002790 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002788:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f000 f91a 	bl	80029c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	691b      	ldr	r3, [r3, #16]
 8002796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800279a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800279e:	d10e      	bne.n	80027be <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027aa:	2b80      	cmp	r3, #128	; 0x80
 80027ac:	d107      	bne.n	80027be <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80027b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f000 f90d 	bl	80029d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	691b      	ldr	r3, [r3, #16]
 80027c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027c8:	2b40      	cmp	r3, #64	; 0x40
 80027ca:	d10e      	bne.n	80027ea <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027d6:	2b40      	cmp	r3, #64	; 0x40
 80027d8:	d107      	bne.n	80027ea <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80027e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f000 f838 	bl	800285a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	691b      	ldr	r3, [r3, #16]
 80027f0:	f003 0320 	and.w	r3, r3, #32
 80027f4:	2b20      	cmp	r3, #32
 80027f6:	d10e      	bne.n	8002816 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	f003 0320 	and.w	r3, r3, #32
 8002802:	2b20      	cmp	r3, #32
 8002804:	d107      	bne.n	8002816 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f06f 0220 	mvn.w	r2, #32
 800280e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f000 f8cd 	bl	80029b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002816:	bf00      	nop
 8002818:	3708      	adds	r7, #8
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800281e:	b480      	push	{r7}
 8002820:	b083      	sub	sp, #12
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002826:	bf00      	nop
 8002828:	370c      	adds	r7, #12
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr

08002832 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002832:	b480      	push	{r7}
 8002834:	b083      	sub	sp, #12
 8002836:	af00      	add	r7, sp, #0
 8002838:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800283a:	bf00      	nop
 800283c:	370c      	adds	r7, #12
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr

08002846 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002846:	b480      	push	{r7}
 8002848:	b083      	sub	sp, #12
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800284e:	bf00      	nop
 8002850:	370c      	adds	r7, #12
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr

0800285a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800285a:	b480      	push	{r7}
 800285c:	b083      	sub	sp, #12
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002862:	bf00      	nop
 8002864:	370c      	adds	r7, #12
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
	...

08002870 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002870:	b480      	push	{r7}
 8002872:	b085      	sub	sp, #20
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	4a40      	ldr	r2, [pc, #256]	; (8002984 <TIM_Base_SetConfig+0x114>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d013      	beq.n	80028b0 <TIM_Base_SetConfig+0x40>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800288e:	d00f      	beq.n	80028b0 <TIM_Base_SetConfig+0x40>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4a3d      	ldr	r2, [pc, #244]	; (8002988 <TIM_Base_SetConfig+0x118>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d00b      	beq.n	80028b0 <TIM_Base_SetConfig+0x40>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	4a3c      	ldr	r2, [pc, #240]	; (800298c <TIM_Base_SetConfig+0x11c>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d007      	beq.n	80028b0 <TIM_Base_SetConfig+0x40>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	4a3b      	ldr	r2, [pc, #236]	; (8002990 <TIM_Base_SetConfig+0x120>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d003      	beq.n	80028b0 <TIM_Base_SetConfig+0x40>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	4a3a      	ldr	r2, [pc, #232]	; (8002994 <TIM_Base_SetConfig+0x124>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d108      	bne.n	80028c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	68fa      	ldr	r2, [r7, #12]
 80028be:	4313      	orrs	r3, r2
 80028c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a2f      	ldr	r2, [pc, #188]	; (8002984 <TIM_Base_SetConfig+0x114>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d02b      	beq.n	8002922 <TIM_Base_SetConfig+0xb2>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028d0:	d027      	beq.n	8002922 <TIM_Base_SetConfig+0xb2>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a2c      	ldr	r2, [pc, #176]	; (8002988 <TIM_Base_SetConfig+0x118>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d023      	beq.n	8002922 <TIM_Base_SetConfig+0xb2>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a2b      	ldr	r2, [pc, #172]	; (800298c <TIM_Base_SetConfig+0x11c>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d01f      	beq.n	8002922 <TIM_Base_SetConfig+0xb2>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a2a      	ldr	r2, [pc, #168]	; (8002990 <TIM_Base_SetConfig+0x120>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d01b      	beq.n	8002922 <TIM_Base_SetConfig+0xb2>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a29      	ldr	r2, [pc, #164]	; (8002994 <TIM_Base_SetConfig+0x124>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d017      	beq.n	8002922 <TIM_Base_SetConfig+0xb2>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4a28      	ldr	r2, [pc, #160]	; (8002998 <TIM_Base_SetConfig+0x128>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d013      	beq.n	8002922 <TIM_Base_SetConfig+0xb2>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a27      	ldr	r2, [pc, #156]	; (800299c <TIM_Base_SetConfig+0x12c>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d00f      	beq.n	8002922 <TIM_Base_SetConfig+0xb2>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a26      	ldr	r2, [pc, #152]	; (80029a0 <TIM_Base_SetConfig+0x130>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d00b      	beq.n	8002922 <TIM_Base_SetConfig+0xb2>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a25      	ldr	r2, [pc, #148]	; (80029a4 <TIM_Base_SetConfig+0x134>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d007      	beq.n	8002922 <TIM_Base_SetConfig+0xb2>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a24      	ldr	r2, [pc, #144]	; (80029a8 <TIM_Base_SetConfig+0x138>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d003      	beq.n	8002922 <TIM_Base_SetConfig+0xb2>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a23      	ldr	r2, [pc, #140]	; (80029ac <TIM_Base_SetConfig+0x13c>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d108      	bne.n	8002934 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002928:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	4313      	orrs	r3, r2
 8002932:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	695b      	ldr	r3, [r3, #20]
 800293e:	4313      	orrs	r3, r2
 8002940:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	68fa      	ldr	r2, [r7, #12]
 8002946:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	689a      	ldr	r2, [r3, #8]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	4a0a      	ldr	r2, [pc, #40]	; (8002984 <TIM_Base_SetConfig+0x114>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d003      	beq.n	8002968 <TIM_Base_SetConfig+0xf8>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4a0c      	ldr	r2, [pc, #48]	; (8002994 <TIM_Base_SetConfig+0x124>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d103      	bne.n	8002970 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	691a      	ldr	r2, [r3, #16]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	615a      	str	r2, [r3, #20]
}
 8002976:	bf00      	nop
 8002978:	3714      	adds	r7, #20
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	40010000 	.word	0x40010000
 8002988:	40000400 	.word	0x40000400
 800298c:	40000800 	.word	0x40000800
 8002990:	40000c00 	.word	0x40000c00
 8002994:	40010400 	.word	0x40010400
 8002998:	40014000 	.word	0x40014000
 800299c:	40014400 	.word	0x40014400
 80029a0:	40014800 	.word	0x40014800
 80029a4:	40001800 	.word	0x40001800
 80029a8:	40001c00 	.word	0x40001c00
 80029ac:	40002000 	.word	0x40002000

080029b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029b8:	bf00      	nop
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029cc:	bf00      	nop
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80029e0:	bf00      	nop
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d101      	bne.n	80029fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e040      	b.n	8002a80 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d106      	bne.n	8002a14 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f7fe f8e0 	bl	8000bd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2224      	movs	r2, #36	; 0x24
 8002a18:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f022 0201 	bic.w	r2, r2, #1
 8002a28:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 f974 	bl	8002d18 <UART_SetConfig>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d101      	bne.n	8002a3a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e022      	b.n	8002a80 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d002      	beq.n	8002a48 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f000 fbcc 	bl	80031e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	685a      	ldr	r2, [r3, #4]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a56:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	689a      	ldr	r2, [r3, #8]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a66:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f042 0201 	orr.w	r2, r2, #1
 8002a76:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f000 fc53 	bl	8003324 <UART_CheckIdleState>
 8002a7e:	4603      	mov	r3, r0
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3708      	adds	r7, #8
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b08a      	sub	sp, #40	; 0x28
 8002a8c:	af02      	add	r7, sp, #8
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	603b      	str	r3, [r7, #0]
 8002a94:	4613      	mov	r3, r2
 8002a96:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a9c:	2b20      	cmp	r3, #32
 8002a9e:	d171      	bne.n	8002b84 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d002      	beq.n	8002aac <HAL_UART_Transmit+0x24>
 8002aa6:	88fb      	ldrh	r3, [r7, #6]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d101      	bne.n	8002ab0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e06a      	b.n	8002b86 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2221      	movs	r2, #33	; 0x21
 8002abc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002abe:	f7fe f955 	bl	8000d6c <HAL_GetTick>
 8002ac2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	88fa      	ldrh	r2, [r7, #6]
 8002ac8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	88fa      	ldrh	r2, [r7, #6]
 8002ad0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002adc:	d108      	bne.n	8002af0 <HAL_UART_Transmit+0x68>
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d104      	bne.n	8002af0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	61bb      	str	r3, [r7, #24]
 8002aee:	e003      	b.n	8002af8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002af4:	2300      	movs	r3, #0
 8002af6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002af8:	e02c      	b.n	8002b54 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	9300      	str	r3, [sp, #0]
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	2200      	movs	r2, #0
 8002b02:	2180      	movs	r1, #128	; 0x80
 8002b04:	68f8      	ldr	r0, [r7, #12]
 8002b06:	f000 fc44 	bl	8003392 <UART_WaitOnFlagUntilTimeout>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d001      	beq.n	8002b14 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e038      	b.n	8002b86 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d10b      	bne.n	8002b32 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	881b      	ldrh	r3, [r3, #0]
 8002b1e:	461a      	mov	r2, r3
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b28:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	3302      	adds	r3, #2
 8002b2e:	61bb      	str	r3, [r7, #24]
 8002b30:	e007      	b.n	8002b42 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	781a      	ldrb	r2, [r3, #0]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	3301      	adds	r3, #1
 8002b40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	b29a      	uxth	r2, r3
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d1cc      	bne.n	8002afa <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	9300      	str	r3, [sp, #0]
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	2200      	movs	r2, #0
 8002b68:	2140      	movs	r1, #64	; 0x40
 8002b6a:	68f8      	ldr	r0, [r7, #12]
 8002b6c:	f000 fc11 	bl	8003392 <UART_WaitOnFlagUntilTimeout>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e005      	b.n	8002b86 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2220      	movs	r2, #32
 8002b7e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002b80:	2300      	movs	r3, #0
 8002b82:	e000      	b.n	8002b86 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002b84:	2302      	movs	r3, #2
  }
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3720      	adds	r7, #32
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}

08002b8e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	b08a      	sub	sp, #40	; 0x28
 8002b92:	af02      	add	r7, sp, #8
 8002b94:	60f8      	str	r0, [r7, #12]
 8002b96:	60b9      	str	r1, [r7, #8]
 8002b98:	603b      	str	r3, [r7, #0]
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ba4:	2b20      	cmp	r3, #32
 8002ba6:	f040 80b1 	bne.w	8002d0c <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d002      	beq.n	8002bb6 <HAL_UART_Receive+0x28>
 8002bb0:	88fb      	ldrh	r3, [r7, #6]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d101      	bne.n	8002bba <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e0a9      	b.n	8002d0e <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2222      	movs	r2, #34	; 0x22
 8002bc6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002bd0:	f7fe f8cc 	bl	8000d6c <HAL_GetTick>
 8002bd4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	88fa      	ldrh	r2, [r7, #6]
 8002bda:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	88fa      	ldrh	r2, [r7, #6]
 8002be2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bee:	d10e      	bne.n	8002c0e <HAL_UART_Receive+0x80>
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	691b      	ldr	r3, [r3, #16]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d105      	bne.n	8002c04 <HAL_UART_Receive+0x76>
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002bfe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002c02:	e02d      	b.n	8002c60 <HAL_UART_Receive+0xd2>
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	22ff      	movs	r2, #255	; 0xff
 8002c08:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002c0c:	e028      	b.n	8002c60 <HAL_UART_Receive+0xd2>
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d10d      	bne.n	8002c32 <HAL_UART_Receive+0xa4>
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d104      	bne.n	8002c28 <HAL_UART_Receive+0x9a>
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	22ff      	movs	r2, #255	; 0xff
 8002c22:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002c26:	e01b      	b.n	8002c60 <HAL_UART_Receive+0xd2>
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	227f      	movs	r2, #127	; 0x7f
 8002c2c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002c30:	e016      	b.n	8002c60 <HAL_UART_Receive+0xd2>
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c3a:	d10d      	bne.n	8002c58 <HAL_UART_Receive+0xca>
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	691b      	ldr	r3, [r3, #16]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d104      	bne.n	8002c4e <HAL_UART_Receive+0xc0>
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	227f      	movs	r2, #127	; 0x7f
 8002c48:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002c4c:	e008      	b.n	8002c60 <HAL_UART_Receive+0xd2>
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	223f      	movs	r2, #63	; 0x3f
 8002c52:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002c56:	e003      	b.n	8002c60 <HAL_UART_Receive+0xd2>
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002c66:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c70:	d108      	bne.n	8002c84 <HAL_UART_Receive+0xf6>
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d104      	bne.n	8002c84 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	61bb      	str	r3, [r7, #24]
 8002c82:	e003      	b.n	8002c8c <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002c8c:	e032      	b.n	8002cf4 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	9300      	str	r3, [sp, #0]
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	2200      	movs	r2, #0
 8002c96:	2120      	movs	r1, #32
 8002c98:	68f8      	ldr	r0, [r7, #12]
 8002c9a:	f000 fb7a 	bl	8003392 <UART_WaitOnFlagUntilTimeout>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d001      	beq.n	8002ca8 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e032      	b.n	8002d0e <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d10c      	bne.n	8002cc8 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb4:	b29a      	uxth	r2, r3
 8002cb6:	8a7b      	ldrh	r3, [r7, #18]
 8002cb8:	4013      	ands	r3, r2
 8002cba:	b29a      	uxth	r2, r3
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	3302      	adds	r3, #2
 8002cc4:	61bb      	str	r3, [r7, #24]
 8002cc6:	e00c      	b.n	8002ce2 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cce:	b2da      	uxtb	r2, r3
 8002cd0:	8a7b      	ldrh	r3, [r7, #18]
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	b2da      	uxtb	r2, r3
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	3301      	adds	r3, #1
 8002ce0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	3b01      	subs	r3, #1
 8002cec:	b29a      	uxth	r2, r3
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d1c6      	bne.n	8002c8e <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2220      	movs	r2, #32
 8002d04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	e000      	b.n	8002d0e <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8002d0c:	2302      	movs	r3, #2
  }
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3720      	adds	r7, #32
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
	...

08002d18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b088      	sub	sp, #32
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d20:	2300      	movs	r3, #0
 8002d22:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	689a      	ldr	r2, [r3, #8]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	691b      	ldr	r3, [r3, #16]
 8002d2c:	431a      	orrs	r2, r3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	695b      	ldr	r3, [r3, #20]
 8002d32:	431a      	orrs	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	69db      	ldr	r3, [r3, #28]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	4ba6      	ldr	r3, [pc, #664]	; (8002fdc <UART_SetConfig+0x2c4>)
 8002d44:	4013      	ands	r3, r2
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	6812      	ldr	r2, [r2, #0]
 8002d4a:	6979      	ldr	r1, [r7, #20]
 8002d4c:	430b      	orrs	r3, r1
 8002d4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	68da      	ldr	r2, [r3, #12]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	430a      	orrs	r2, r1
 8002d64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	699b      	ldr	r3, [r3, #24]
 8002d6a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6a1b      	ldr	r3, [r3, #32]
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	697a      	ldr	r2, [r7, #20]
 8002d86:	430a      	orrs	r2, r1
 8002d88:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a94      	ldr	r2, [pc, #592]	; (8002fe0 <UART_SetConfig+0x2c8>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d120      	bne.n	8002dd6 <UART_SetConfig+0xbe>
 8002d94:	4b93      	ldr	r3, [pc, #588]	; (8002fe4 <UART_SetConfig+0x2cc>)
 8002d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d9a:	f003 0303 	and.w	r3, r3, #3
 8002d9e:	2b03      	cmp	r3, #3
 8002da0:	d816      	bhi.n	8002dd0 <UART_SetConfig+0xb8>
 8002da2:	a201      	add	r2, pc, #4	; (adr r2, 8002da8 <UART_SetConfig+0x90>)
 8002da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002da8:	08002db9 	.word	0x08002db9
 8002dac:	08002dc5 	.word	0x08002dc5
 8002db0:	08002dbf 	.word	0x08002dbf
 8002db4:	08002dcb 	.word	0x08002dcb
 8002db8:	2301      	movs	r3, #1
 8002dba:	77fb      	strb	r3, [r7, #31]
 8002dbc:	e150      	b.n	8003060 <UART_SetConfig+0x348>
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	77fb      	strb	r3, [r7, #31]
 8002dc2:	e14d      	b.n	8003060 <UART_SetConfig+0x348>
 8002dc4:	2304      	movs	r3, #4
 8002dc6:	77fb      	strb	r3, [r7, #31]
 8002dc8:	e14a      	b.n	8003060 <UART_SetConfig+0x348>
 8002dca:	2308      	movs	r3, #8
 8002dcc:	77fb      	strb	r3, [r7, #31]
 8002dce:	e147      	b.n	8003060 <UART_SetConfig+0x348>
 8002dd0:	2310      	movs	r3, #16
 8002dd2:	77fb      	strb	r3, [r7, #31]
 8002dd4:	e144      	b.n	8003060 <UART_SetConfig+0x348>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a83      	ldr	r2, [pc, #524]	; (8002fe8 <UART_SetConfig+0x2d0>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d132      	bne.n	8002e46 <UART_SetConfig+0x12e>
 8002de0:	4b80      	ldr	r3, [pc, #512]	; (8002fe4 <UART_SetConfig+0x2cc>)
 8002de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002de6:	f003 030c 	and.w	r3, r3, #12
 8002dea:	2b0c      	cmp	r3, #12
 8002dec:	d828      	bhi.n	8002e40 <UART_SetConfig+0x128>
 8002dee:	a201      	add	r2, pc, #4	; (adr r2, 8002df4 <UART_SetConfig+0xdc>)
 8002df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002df4:	08002e29 	.word	0x08002e29
 8002df8:	08002e41 	.word	0x08002e41
 8002dfc:	08002e41 	.word	0x08002e41
 8002e00:	08002e41 	.word	0x08002e41
 8002e04:	08002e35 	.word	0x08002e35
 8002e08:	08002e41 	.word	0x08002e41
 8002e0c:	08002e41 	.word	0x08002e41
 8002e10:	08002e41 	.word	0x08002e41
 8002e14:	08002e2f 	.word	0x08002e2f
 8002e18:	08002e41 	.word	0x08002e41
 8002e1c:	08002e41 	.word	0x08002e41
 8002e20:	08002e41 	.word	0x08002e41
 8002e24:	08002e3b 	.word	0x08002e3b
 8002e28:	2300      	movs	r3, #0
 8002e2a:	77fb      	strb	r3, [r7, #31]
 8002e2c:	e118      	b.n	8003060 <UART_SetConfig+0x348>
 8002e2e:	2302      	movs	r3, #2
 8002e30:	77fb      	strb	r3, [r7, #31]
 8002e32:	e115      	b.n	8003060 <UART_SetConfig+0x348>
 8002e34:	2304      	movs	r3, #4
 8002e36:	77fb      	strb	r3, [r7, #31]
 8002e38:	e112      	b.n	8003060 <UART_SetConfig+0x348>
 8002e3a:	2308      	movs	r3, #8
 8002e3c:	77fb      	strb	r3, [r7, #31]
 8002e3e:	e10f      	b.n	8003060 <UART_SetConfig+0x348>
 8002e40:	2310      	movs	r3, #16
 8002e42:	77fb      	strb	r3, [r7, #31]
 8002e44:	e10c      	b.n	8003060 <UART_SetConfig+0x348>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a68      	ldr	r2, [pc, #416]	; (8002fec <UART_SetConfig+0x2d4>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d120      	bne.n	8002e92 <UART_SetConfig+0x17a>
 8002e50:	4b64      	ldr	r3, [pc, #400]	; (8002fe4 <UART_SetConfig+0x2cc>)
 8002e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e56:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002e5a:	2b30      	cmp	r3, #48	; 0x30
 8002e5c:	d013      	beq.n	8002e86 <UART_SetConfig+0x16e>
 8002e5e:	2b30      	cmp	r3, #48	; 0x30
 8002e60:	d814      	bhi.n	8002e8c <UART_SetConfig+0x174>
 8002e62:	2b20      	cmp	r3, #32
 8002e64:	d009      	beq.n	8002e7a <UART_SetConfig+0x162>
 8002e66:	2b20      	cmp	r3, #32
 8002e68:	d810      	bhi.n	8002e8c <UART_SetConfig+0x174>
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d002      	beq.n	8002e74 <UART_SetConfig+0x15c>
 8002e6e:	2b10      	cmp	r3, #16
 8002e70:	d006      	beq.n	8002e80 <UART_SetConfig+0x168>
 8002e72:	e00b      	b.n	8002e8c <UART_SetConfig+0x174>
 8002e74:	2300      	movs	r3, #0
 8002e76:	77fb      	strb	r3, [r7, #31]
 8002e78:	e0f2      	b.n	8003060 <UART_SetConfig+0x348>
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	77fb      	strb	r3, [r7, #31]
 8002e7e:	e0ef      	b.n	8003060 <UART_SetConfig+0x348>
 8002e80:	2304      	movs	r3, #4
 8002e82:	77fb      	strb	r3, [r7, #31]
 8002e84:	e0ec      	b.n	8003060 <UART_SetConfig+0x348>
 8002e86:	2308      	movs	r3, #8
 8002e88:	77fb      	strb	r3, [r7, #31]
 8002e8a:	e0e9      	b.n	8003060 <UART_SetConfig+0x348>
 8002e8c:	2310      	movs	r3, #16
 8002e8e:	77fb      	strb	r3, [r7, #31]
 8002e90:	e0e6      	b.n	8003060 <UART_SetConfig+0x348>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a56      	ldr	r2, [pc, #344]	; (8002ff0 <UART_SetConfig+0x2d8>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d120      	bne.n	8002ede <UART_SetConfig+0x1c6>
 8002e9c:	4b51      	ldr	r3, [pc, #324]	; (8002fe4 <UART_SetConfig+0x2cc>)
 8002e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002ea6:	2bc0      	cmp	r3, #192	; 0xc0
 8002ea8:	d013      	beq.n	8002ed2 <UART_SetConfig+0x1ba>
 8002eaa:	2bc0      	cmp	r3, #192	; 0xc0
 8002eac:	d814      	bhi.n	8002ed8 <UART_SetConfig+0x1c0>
 8002eae:	2b80      	cmp	r3, #128	; 0x80
 8002eb0:	d009      	beq.n	8002ec6 <UART_SetConfig+0x1ae>
 8002eb2:	2b80      	cmp	r3, #128	; 0x80
 8002eb4:	d810      	bhi.n	8002ed8 <UART_SetConfig+0x1c0>
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d002      	beq.n	8002ec0 <UART_SetConfig+0x1a8>
 8002eba:	2b40      	cmp	r3, #64	; 0x40
 8002ebc:	d006      	beq.n	8002ecc <UART_SetConfig+0x1b4>
 8002ebe:	e00b      	b.n	8002ed8 <UART_SetConfig+0x1c0>
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	77fb      	strb	r3, [r7, #31]
 8002ec4:	e0cc      	b.n	8003060 <UART_SetConfig+0x348>
 8002ec6:	2302      	movs	r3, #2
 8002ec8:	77fb      	strb	r3, [r7, #31]
 8002eca:	e0c9      	b.n	8003060 <UART_SetConfig+0x348>
 8002ecc:	2304      	movs	r3, #4
 8002ece:	77fb      	strb	r3, [r7, #31]
 8002ed0:	e0c6      	b.n	8003060 <UART_SetConfig+0x348>
 8002ed2:	2308      	movs	r3, #8
 8002ed4:	77fb      	strb	r3, [r7, #31]
 8002ed6:	e0c3      	b.n	8003060 <UART_SetConfig+0x348>
 8002ed8:	2310      	movs	r3, #16
 8002eda:	77fb      	strb	r3, [r7, #31]
 8002edc:	e0c0      	b.n	8003060 <UART_SetConfig+0x348>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a44      	ldr	r2, [pc, #272]	; (8002ff4 <UART_SetConfig+0x2dc>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d125      	bne.n	8002f34 <UART_SetConfig+0x21c>
 8002ee8:	4b3e      	ldr	r3, [pc, #248]	; (8002fe4 <UART_SetConfig+0x2cc>)
 8002eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ef2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ef6:	d017      	beq.n	8002f28 <UART_SetConfig+0x210>
 8002ef8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002efc:	d817      	bhi.n	8002f2e <UART_SetConfig+0x216>
 8002efe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f02:	d00b      	beq.n	8002f1c <UART_SetConfig+0x204>
 8002f04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f08:	d811      	bhi.n	8002f2e <UART_SetConfig+0x216>
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d003      	beq.n	8002f16 <UART_SetConfig+0x1fe>
 8002f0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f12:	d006      	beq.n	8002f22 <UART_SetConfig+0x20a>
 8002f14:	e00b      	b.n	8002f2e <UART_SetConfig+0x216>
 8002f16:	2300      	movs	r3, #0
 8002f18:	77fb      	strb	r3, [r7, #31]
 8002f1a:	e0a1      	b.n	8003060 <UART_SetConfig+0x348>
 8002f1c:	2302      	movs	r3, #2
 8002f1e:	77fb      	strb	r3, [r7, #31]
 8002f20:	e09e      	b.n	8003060 <UART_SetConfig+0x348>
 8002f22:	2304      	movs	r3, #4
 8002f24:	77fb      	strb	r3, [r7, #31]
 8002f26:	e09b      	b.n	8003060 <UART_SetConfig+0x348>
 8002f28:	2308      	movs	r3, #8
 8002f2a:	77fb      	strb	r3, [r7, #31]
 8002f2c:	e098      	b.n	8003060 <UART_SetConfig+0x348>
 8002f2e:	2310      	movs	r3, #16
 8002f30:	77fb      	strb	r3, [r7, #31]
 8002f32:	e095      	b.n	8003060 <UART_SetConfig+0x348>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a2f      	ldr	r2, [pc, #188]	; (8002ff8 <UART_SetConfig+0x2e0>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d125      	bne.n	8002f8a <UART_SetConfig+0x272>
 8002f3e:	4b29      	ldr	r3, [pc, #164]	; (8002fe4 <UART_SetConfig+0x2cc>)
 8002f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f44:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002f48:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f4c:	d017      	beq.n	8002f7e <UART_SetConfig+0x266>
 8002f4e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f52:	d817      	bhi.n	8002f84 <UART_SetConfig+0x26c>
 8002f54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f58:	d00b      	beq.n	8002f72 <UART_SetConfig+0x25a>
 8002f5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f5e:	d811      	bhi.n	8002f84 <UART_SetConfig+0x26c>
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d003      	beq.n	8002f6c <UART_SetConfig+0x254>
 8002f64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f68:	d006      	beq.n	8002f78 <UART_SetConfig+0x260>
 8002f6a:	e00b      	b.n	8002f84 <UART_SetConfig+0x26c>
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	77fb      	strb	r3, [r7, #31]
 8002f70:	e076      	b.n	8003060 <UART_SetConfig+0x348>
 8002f72:	2302      	movs	r3, #2
 8002f74:	77fb      	strb	r3, [r7, #31]
 8002f76:	e073      	b.n	8003060 <UART_SetConfig+0x348>
 8002f78:	2304      	movs	r3, #4
 8002f7a:	77fb      	strb	r3, [r7, #31]
 8002f7c:	e070      	b.n	8003060 <UART_SetConfig+0x348>
 8002f7e:	2308      	movs	r3, #8
 8002f80:	77fb      	strb	r3, [r7, #31]
 8002f82:	e06d      	b.n	8003060 <UART_SetConfig+0x348>
 8002f84:	2310      	movs	r3, #16
 8002f86:	77fb      	strb	r3, [r7, #31]
 8002f88:	e06a      	b.n	8003060 <UART_SetConfig+0x348>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a1b      	ldr	r2, [pc, #108]	; (8002ffc <UART_SetConfig+0x2e4>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d138      	bne.n	8003006 <UART_SetConfig+0x2ee>
 8002f94:	4b13      	ldr	r3, [pc, #76]	; (8002fe4 <UART_SetConfig+0x2cc>)
 8002f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f9a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002f9e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002fa2:	d017      	beq.n	8002fd4 <UART_SetConfig+0x2bc>
 8002fa4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002fa8:	d82a      	bhi.n	8003000 <UART_SetConfig+0x2e8>
 8002faa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fae:	d00b      	beq.n	8002fc8 <UART_SetConfig+0x2b0>
 8002fb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fb4:	d824      	bhi.n	8003000 <UART_SetConfig+0x2e8>
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d003      	beq.n	8002fc2 <UART_SetConfig+0x2aa>
 8002fba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fbe:	d006      	beq.n	8002fce <UART_SetConfig+0x2b6>
 8002fc0:	e01e      	b.n	8003000 <UART_SetConfig+0x2e8>
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	77fb      	strb	r3, [r7, #31]
 8002fc6:	e04b      	b.n	8003060 <UART_SetConfig+0x348>
 8002fc8:	2302      	movs	r3, #2
 8002fca:	77fb      	strb	r3, [r7, #31]
 8002fcc:	e048      	b.n	8003060 <UART_SetConfig+0x348>
 8002fce:	2304      	movs	r3, #4
 8002fd0:	77fb      	strb	r3, [r7, #31]
 8002fd2:	e045      	b.n	8003060 <UART_SetConfig+0x348>
 8002fd4:	2308      	movs	r3, #8
 8002fd6:	77fb      	strb	r3, [r7, #31]
 8002fd8:	e042      	b.n	8003060 <UART_SetConfig+0x348>
 8002fda:	bf00      	nop
 8002fdc:	efff69f3 	.word	0xefff69f3
 8002fe0:	40011000 	.word	0x40011000
 8002fe4:	40023800 	.word	0x40023800
 8002fe8:	40004400 	.word	0x40004400
 8002fec:	40004800 	.word	0x40004800
 8002ff0:	40004c00 	.word	0x40004c00
 8002ff4:	40005000 	.word	0x40005000
 8002ff8:	40011400 	.word	0x40011400
 8002ffc:	40007800 	.word	0x40007800
 8003000:	2310      	movs	r3, #16
 8003002:	77fb      	strb	r3, [r7, #31]
 8003004:	e02c      	b.n	8003060 <UART_SetConfig+0x348>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a72      	ldr	r2, [pc, #456]	; (80031d4 <UART_SetConfig+0x4bc>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d125      	bne.n	800305c <UART_SetConfig+0x344>
 8003010:	4b71      	ldr	r3, [pc, #452]	; (80031d8 <UART_SetConfig+0x4c0>)
 8003012:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003016:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800301a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800301e:	d017      	beq.n	8003050 <UART_SetConfig+0x338>
 8003020:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003024:	d817      	bhi.n	8003056 <UART_SetConfig+0x33e>
 8003026:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800302a:	d00b      	beq.n	8003044 <UART_SetConfig+0x32c>
 800302c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003030:	d811      	bhi.n	8003056 <UART_SetConfig+0x33e>
 8003032:	2b00      	cmp	r3, #0
 8003034:	d003      	beq.n	800303e <UART_SetConfig+0x326>
 8003036:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800303a:	d006      	beq.n	800304a <UART_SetConfig+0x332>
 800303c:	e00b      	b.n	8003056 <UART_SetConfig+0x33e>
 800303e:	2300      	movs	r3, #0
 8003040:	77fb      	strb	r3, [r7, #31]
 8003042:	e00d      	b.n	8003060 <UART_SetConfig+0x348>
 8003044:	2302      	movs	r3, #2
 8003046:	77fb      	strb	r3, [r7, #31]
 8003048:	e00a      	b.n	8003060 <UART_SetConfig+0x348>
 800304a:	2304      	movs	r3, #4
 800304c:	77fb      	strb	r3, [r7, #31]
 800304e:	e007      	b.n	8003060 <UART_SetConfig+0x348>
 8003050:	2308      	movs	r3, #8
 8003052:	77fb      	strb	r3, [r7, #31]
 8003054:	e004      	b.n	8003060 <UART_SetConfig+0x348>
 8003056:	2310      	movs	r3, #16
 8003058:	77fb      	strb	r3, [r7, #31]
 800305a:	e001      	b.n	8003060 <UART_SetConfig+0x348>
 800305c:	2310      	movs	r3, #16
 800305e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	69db      	ldr	r3, [r3, #28]
 8003064:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003068:	d15b      	bne.n	8003122 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800306a:	7ffb      	ldrb	r3, [r7, #31]
 800306c:	2b08      	cmp	r3, #8
 800306e:	d828      	bhi.n	80030c2 <UART_SetConfig+0x3aa>
 8003070:	a201      	add	r2, pc, #4	; (adr r2, 8003078 <UART_SetConfig+0x360>)
 8003072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003076:	bf00      	nop
 8003078:	0800309d 	.word	0x0800309d
 800307c:	080030a5 	.word	0x080030a5
 8003080:	080030ad 	.word	0x080030ad
 8003084:	080030c3 	.word	0x080030c3
 8003088:	080030b3 	.word	0x080030b3
 800308c:	080030c3 	.word	0x080030c3
 8003090:	080030c3 	.word	0x080030c3
 8003094:	080030c3 	.word	0x080030c3
 8003098:	080030bb 	.word	0x080030bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800309c:	f7fe fd7c 	bl	8001b98 <HAL_RCC_GetPCLK1Freq>
 80030a0:	61b8      	str	r0, [r7, #24]
        break;
 80030a2:	e013      	b.n	80030cc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80030a4:	f7fe fd8c 	bl	8001bc0 <HAL_RCC_GetPCLK2Freq>
 80030a8:	61b8      	str	r0, [r7, #24]
        break;
 80030aa:	e00f      	b.n	80030cc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030ac:	4b4b      	ldr	r3, [pc, #300]	; (80031dc <UART_SetConfig+0x4c4>)
 80030ae:	61bb      	str	r3, [r7, #24]
        break;
 80030b0:	e00c      	b.n	80030cc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030b2:	f7fe fc9f 	bl	80019f4 <HAL_RCC_GetSysClockFreq>
 80030b6:	61b8      	str	r0, [r7, #24]
        break;
 80030b8:	e008      	b.n	80030cc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030be:	61bb      	str	r3, [r7, #24]
        break;
 80030c0:	e004      	b.n	80030cc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80030c2:	2300      	movs	r3, #0
 80030c4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	77bb      	strb	r3, [r7, #30]
        break;
 80030ca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80030cc:	69bb      	ldr	r3, [r7, #24]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d074      	beq.n	80031bc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	005a      	lsls	r2, r3, #1
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	085b      	lsrs	r3, r3, #1
 80030dc:	441a      	add	r2, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80030e6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	2b0f      	cmp	r3, #15
 80030ec:	d916      	bls.n	800311c <UART_SetConfig+0x404>
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030f4:	d212      	bcs.n	800311c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	f023 030f 	bic.w	r3, r3, #15
 80030fe:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	085b      	lsrs	r3, r3, #1
 8003104:	b29b      	uxth	r3, r3
 8003106:	f003 0307 	and.w	r3, r3, #7
 800310a:	b29a      	uxth	r2, r3
 800310c:	89fb      	ldrh	r3, [r7, #14]
 800310e:	4313      	orrs	r3, r2
 8003110:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	89fa      	ldrh	r2, [r7, #14]
 8003118:	60da      	str	r2, [r3, #12]
 800311a:	e04f      	b.n	80031bc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	77bb      	strb	r3, [r7, #30]
 8003120:	e04c      	b.n	80031bc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003122:	7ffb      	ldrb	r3, [r7, #31]
 8003124:	2b08      	cmp	r3, #8
 8003126:	d828      	bhi.n	800317a <UART_SetConfig+0x462>
 8003128:	a201      	add	r2, pc, #4	; (adr r2, 8003130 <UART_SetConfig+0x418>)
 800312a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800312e:	bf00      	nop
 8003130:	08003155 	.word	0x08003155
 8003134:	0800315d 	.word	0x0800315d
 8003138:	08003165 	.word	0x08003165
 800313c:	0800317b 	.word	0x0800317b
 8003140:	0800316b 	.word	0x0800316b
 8003144:	0800317b 	.word	0x0800317b
 8003148:	0800317b 	.word	0x0800317b
 800314c:	0800317b 	.word	0x0800317b
 8003150:	08003173 	.word	0x08003173
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003154:	f7fe fd20 	bl	8001b98 <HAL_RCC_GetPCLK1Freq>
 8003158:	61b8      	str	r0, [r7, #24]
        break;
 800315a:	e013      	b.n	8003184 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800315c:	f7fe fd30 	bl	8001bc0 <HAL_RCC_GetPCLK2Freq>
 8003160:	61b8      	str	r0, [r7, #24]
        break;
 8003162:	e00f      	b.n	8003184 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003164:	4b1d      	ldr	r3, [pc, #116]	; (80031dc <UART_SetConfig+0x4c4>)
 8003166:	61bb      	str	r3, [r7, #24]
        break;
 8003168:	e00c      	b.n	8003184 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800316a:	f7fe fc43 	bl	80019f4 <HAL_RCC_GetSysClockFreq>
 800316e:	61b8      	str	r0, [r7, #24]
        break;
 8003170:	e008      	b.n	8003184 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003172:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003176:	61bb      	str	r3, [r7, #24]
        break;
 8003178:	e004      	b.n	8003184 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800317a:	2300      	movs	r3, #0
 800317c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	77bb      	strb	r3, [r7, #30]
        break;
 8003182:	bf00      	nop
    }

    if (pclk != 0U)
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d018      	beq.n	80031bc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	085a      	lsrs	r2, r3, #1
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	441a      	add	r2, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	fbb2 f3f3 	udiv	r3, r2, r3
 800319c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	2b0f      	cmp	r3, #15
 80031a2:	d909      	bls.n	80031b8 <UART_SetConfig+0x4a0>
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031aa:	d205      	bcs.n	80031b8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	b29a      	uxth	r2, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	60da      	str	r2, [r3, #12]
 80031b6:	e001      	b.n	80031bc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80031c8:	7fbb      	ldrb	r3, [r7, #30]
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3720      	adds	r7, #32
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	40007c00 	.word	0x40007c00
 80031d8:	40023800 	.word	0x40023800
 80031dc:	00f42400 	.word	0x00f42400

080031e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ec:	f003 0301 	and.w	r3, r3, #1
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d00a      	beq.n	800320a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	430a      	orrs	r2, r1
 8003208:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320e:	f003 0302 	and.w	r3, r3, #2
 8003212:	2b00      	cmp	r3, #0
 8003214:	d00a      	beq.n	800322c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	430a      	orrs	r2, r1
 800322a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003230:	f003 0304 	and.w	r3, r3, #4
 8003234:	2b00      	cmp	r3, #0
 8003236:	d00a      	beq.n	800324e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	430a      	orrs	r2, r1
 800324c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003252:	f003 0308 	and.w	r3, r3, #8
 8003256:	2b00      	cmp	r3, #0
 8003258:	d00a      	beq.n	8003270 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	430a      	orrs	r2, r1
 800326e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003274:	f003 0310 	and.w	r3, r3, #16
 8003278:	2b00      	cmp	r3, #0
 800327a:	d00a      	beq.n	8003292 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	430a      	orrs	r2, r1
 8003290:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003296:	f003 0320 	and.w	r3, r3, #32
 800329a:	2b00      	cmp	r3, #0
 800329c:	d00a      	beq.n	80032b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	430a      	orrs	r2, r1
 80032b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d01a      	beq.n	80032f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	430a      	orrs	r2, r1
 80032d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032de:	d10a      	bne.n	80032f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	430a      	orrs	r2, r1
 80032f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d00a      	beq.n	8003318 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	430a      	orrs	r2, r1
 8003316:	605a      	str	r2, [r3, #4]
  }
}
 8003318:	bf00      	nop
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b086      	sub	sp, #24
 8003328:	af02      	add	r7, sp, #8
 800332a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003334:	f7fd fd1a 	bl	8000d6c <HAL_GetTick>
 8003338:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0308 	and.w	r3, r3, #8
 8003344:	2b08      	cmp	r3, #8
 8003346:	d10e      	bne.n	8003366 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003348:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800334c:	9300      	str	r3, [sp, #0]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2200      	movs	r2, #0
 8003352:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f000 f81b 	bl	8003392 <UART_WaitOnFlagUntilTimeout>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d001      	beq.n	8003366 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e011      	b.n	800338a <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2220      	movs	r2, #32
 800336a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2220      	movs	r2, #32
 8003370:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3710      	adds	r7, #16
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}

08003392 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003392:	b580      	push	{r7, lr}
 8003394:	b09c      	sub	sp, #112	; 0x70
 8003396:	af00      	add	r7, sp, #0
 8003398:	60f8      	str	r0, [r7, #12]
 800339a:	60b9      	str	r1, [r7, #8]
 800339c:	603b      	str	r3, [r7, #0]
 800339e:	4613      	mov	r3, r2
 80033a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033a2:	e0a7      	b.n	80034f4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033aa:	f000 80a3 	beq.w	80034f4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033ae:	f7fd fcdd 	bl	8000d6c <HAL_GetTick>
 80033b2:	4602      	mov	r2, r0
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d302      	bcc.n	80033c4 <UART_WaitOnFlagUntilTimeout+0x32>
 80033be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d13f      	bne.n	8003444 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033cc:	e853 3f00 	ldrex	r3, [r3]
 80033d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80033d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033d4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80033d8:	667b      	str	r3, [r7, #100]	; 0x64
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	461a      	mov	r2, r3
 80033e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80033e4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033e6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80033e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80033ea:	e841 2300 	strex	r3, r2, [r1]
 80033ee:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80033f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d1e6      	bne.n	80033c4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	3308      	adds	r3, #8
 80033fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003400:	e853 3f00 	ldrex	r3, [r3]
 8003404:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003408:	f023 0301 	bic.w	r3, r3, #1
 800340c:	663b      	str	r3, [r7, #96]	; 0x60
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	3308      	adds	r3, #8
 8003414:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003416:	64ba      	str	r2, [r7, #72]	; 0x48
 8003418:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800341a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800341c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800341e:	e841 2300 	strex	r3, r2, [r1]
 8003422:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003424:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003426:	2b00      	cmp	r3, #0
 8003428:	d1e5      	bne.n	80033f6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2220      	movs	r2, #32
 800342e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2220      	movs	r2, #32
 8003434:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e068      	b.n	8003516 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0304 	and.w	r3, r3, #4
 800344e:	2b00      	cmp	r3, #0
 8003450:	d050      	beq.n	80034f4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	69db      	ldr	r3, [r3, #28]
 8003458:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800345c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003460:	d148      	bne.n	80034f4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800346a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003474:	e853 3f00 	ldrex	r3, [r3]
 8003478:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800347a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003480:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	461a      	mov	r2, r3
 8003488:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800348a:	637b      	str	r3, [r7, #52]	; 0x34
 800348c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800348e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003490:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003492:	e841 2300 	strex	r3, r2, [r1]
 8003496:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800349a:	2b00      	cmp	r3, #0
 800349c:	d1e6      	bne.n	800346c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	3308      	adds	r3, #8
 80034a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	e853 3f00 	ldrex	r3, [r3]
 80034ac:	613b      	str	r3, [r7, #16]
   return(result);
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	f023 0301 	bic.w	r3, r3, #1
 80034b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	3308      	adds	r3, #8
 80034bc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80034be:	623a      	str	r2, [r7, #32]
 80034c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c2:	69f9      	ldr	r1, [r7, #28]
 80034c4:	6a3a      	ldr	r2, [r7, #32]
 80034c6:	e841 2300 	strex	r3, r2, [r1]
 80034ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d1e5      	bne.n	800349e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2220      	movs	r2, #32
 80034d6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2220      	movs	r2, #32
 80034dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2220      	movs	r2, #32
 80034e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e010      	b.n	8003516 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	69da      	ldr	r2, [r3, #28]
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	4013      	ands	r3, r2
 80034fe:	68ba      	ldr	r2, [r7, #8]
 8003500:	429a      	cmp	r2, r3
 8003502:	bf0c      	ite	eq
 8003504:	2301      	moveq	r3, #1
 8003506:	2300      	movne	r3, #0
 8003508:	b2db      	uxtb	r3, r3
 800350a:	461a      	mov	r2, r3
 800350c:	79fb      	ldrb	r3, [r7, #7]
 800350e:	429a      	cmp	r2, r3
 8003510:	f43f af48 	beq.w	80033a4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003514:	2300      	movs	r3, #0
}
 8003516:	4618      	mov	r0, r3
 8003518:	3770      	adds	r7, #112	; 0x70
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}

0800351e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800351e:	b480      	push	{r7}
 8003520:	b085      	sub	sp, #20
 8003522:	af00      	add	r7, sp, #0
 8003524:	4603      	mov	r3, r0
 8003526:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003528:	2300      	movs	r3, #0
 800352a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800352c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003530:	2b84      	cmp	r3, #132	; 0x84
 8003532:	d005      	beq.n	8003540 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003534:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	4413      	add	r3, r2
 800353c:	3303      	adds	r3, #3
 800353e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003540:	68fb      	ldr	r3, [r7, #12]
}
 8003542:	4618      	mov	r0, r3
 8003544:	3714      	adds	r7, #20
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr

0800354e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800354e:	b580      	push	{r7, lr}
 8003550:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003552:	f000 fae9 	bl	8003b28 <vTaskStartScheduler>
  
  return osOK;
 8003556:	2300      	movs	r3, #0
}
 8003558:	4618      	mov	r0, r3
 800355a:	bd80      	pop	{r7, pc}

0800355c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800355c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800355e:	b089      	sub	sp, #36	; 0x24
 8003560:	af04      	add	r7, sp, #16
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	695b      	ldr	r3, [r3, #20]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d020      	beq.n	80035b0 <osThreadCreate+0x54>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	699b      	ldr	r3, [r3, #24]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d01c      	beq.n	80035b0 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685c      	ldr	r4, [r3, #4]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	691e      	ldr	r6, [r3, #16]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003588:	4618      	mov	r0, r3
 800358a:	f7ff ffc8 	bl	800351e <makeFreeRtosPriority>
 800358e:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	695b      	ldr	r3, [r3, #20]
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003598:	9202      	str	r2, [sp, #8]
 800359a:	9301      	str	r3, [sp, #4]
 800359c:	9100      	str	r1, [sp, #0]
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	4632      	mov	r2, r6
 80035a2:	4629      	mov	r1, r5
 80035a4:	4620      	mov	r0, r4
 80035a6:	f000 f8ed 	bl	8003784 <xTaskCreateStatic>
 80035aa:	4603      	mov	r3, r0
 80035ac:	60fb      	str	r3, [r7, #12]
 80035ae:	e01c      	b.n	80035ea <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	685c      	ldr	r4, [r3, #4]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80035bc:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80035c4:	4618      	mov	r0, r3
 80035c6:	f7ff ffaa 	bl	800351e <makeFreeRtosPriority>
 80035ca:	4602      	mov	r2, r0
 80035cc:	f107 030c 	add.w	r3, r7, #12
 80035d0:	9301      	str	r3, [sp, #4]
 80035d2:	9200      	str	r2, [sp, #0]
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	4632      	mov	r2, r6
 80035d8:	4629      	mov	r1, r5
 80035da:	4620      	mov	r0, r4
 80035dc:	f000 f935 	bl	800384a <xTaskCreate>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d001      	beq.n	80035ea <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80035e6:	2300      	movs	r3, #0
 80035e8:	e000      	b.n	80035ec <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80035ea:	68fb      	ldr	r3, [r7, #12]
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3714      	adds	r7, #20
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080035f4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d001      	beq.n	800360a <osDelay+0x16>
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	e000      	b.n	800360c <osDelay+0x18>
 800360a:	2301      	movs	r3, #1
 800360c:	4618      	mov	r0, r3
 800360e:	f000 fa55 	bl	8003abc <vTaskDelay>
  
  return osOK;
 8003612:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003614:	4618      	mov	r0, r3
 8003616:	3710      	adds	r7, #16
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f103 0208 	add.w	r2, r3, #8
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f04f 32ff 	mov.w	r2, #4294967295
 8003634:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f103 0208 	add.w	r2, r3, #8
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f103 0208 	add.w	r2, r3, #8
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003650:	bf00      	nop
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800366a:	bf00      	nop
 800366c:	370c      	adds	r7, #12
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr

08003676 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003676:	b480      	push	{r7}
 8003678:	b085      	sub	sp, #20
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
 800367e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	68fa      	ldr	r2, [r7, #12]
 800368a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	689a      	ldr	r2, [r3, #8]
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	683a      	ldr	r2, [r7, #0]
 800369a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	683a      	ldr	r2, [r7, #0]
 80036a0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	1c5a      	adds	r2, r3, #1
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	601a      	str	r2, [r3, #0]
}
 80036b2:	bf00      	nop
 80036b4:	3714      	adds	r7, #20
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr

080036be <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80036be:	b480      	push	{r7}
 80036c0:	b085      	sub	sp, #20
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
 80036c6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d4:	d103      	bne.n	80036de <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	691b      	ldr	r3, [r3, #16]
 80036da:	60fb      	str	r3, [r7, #12]
 80036dc:	e00c      	b.n	80036f8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	3308      	adds	r3, #8
 80036e2:	60fb      	str	r3, [r7, #12]
 80036e4:	e002      	b.n	80036ec <vListInsert+0x2e>
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	60fb      	str	r3, [r7, #12]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	68ba      	ldr	r2, [r7, #8]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d2f6      	bcs.n	80036e6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	685a      	ldr	r2, [r3, #4]
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	683a      	ldr	r2, [r7, #0]
 8003706:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	68fa      	ldr	r2, [r7, #12]
 800370c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	683a      	ldr	r2, [r7, #0]
 8003712:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	1c5a      	adds	r2, r3, #1
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	601a      	str	r2, [r3, #0]
}
 8003724:	bf00      	nop
 8003726:	3714      	adds	r7, #20
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003730:	b480      	push	{r7}
 8003732:	b085      	sub	sp, #20
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	691b      	ldr	r3, [r3, #16]
 800373c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	6892      	ldr	r2, [r2, #8]
 8003746:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	6852      	ldr	r2, [r2, #4]
 8003750:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	429a      	cmp	r2, r3
 800375a:	d103      	bne.n	8003764 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	689a      	ldr	r2, [r3, #8]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	1e5a      	subs	r2, r3, #1
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
}
 8003778:	4618      	mov	r0, r3
 800377a:	3714      	adds	r7, #20
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003784:	b580      	push	{r7, lr}
 8003786:	b08e      	sub	sp, #56	; 0x38
 8003788:	af04      	add	r7, sp, #16
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	607a      	str	r2, [r7, #4]
 8003790:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003794:	2b00      	cmp	r3, #0
 8003796:	d10c      	bne.n	80037b2 <xTaskCreateStatic+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800379c:	b672      	cpsid	i
 800379e:	f383 8811 	msr	BASEPRI, r3
 80037a2:	f3bf 8f6f 	isb	sy
 80037a6:	f3bf 8f4f 	dsb	sy
 80037aa:	b662      	cpsie	i
 80037ac:	623b      	str	r3, [r7, #32]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80037ae:	bf00      	nop
 80037b0:	e7fe      	b.n	80037b0 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80037b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d10c      	bne.n	80037d2 <xTaskCreateStatic+0x4e>
	__asm volatile
 80037b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037bc:	b672      	cpsid	i
 80037be:	f383 8811 	msr	BASEPRI, r3
 80037c2:	f3bf 8f6f 	isb	sy
 80037c6:	f3bf 8f4f 	dsb	sy
 80037ca:	b662      	cpsie	i
 80037cc:	61fb      	str	r3, [r7, #28]
}
 80037ce:	bf00      	nop
 80037d0:	e7fe      	b.n	80037d0 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80037d2:	2354      	movs	r3, #84	; 0x54
 80037d4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	2b54      	cmp	r3, #84	; 0x54
 80037da:	d00c      	beq.n	80037f6 <xTaskCreateStatic+0x72>
	__asm volatile
 80037dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e0:	b672      	cpsid	i
 80037e2:	f383 8811 	msr	BASEPRI, r3
 80037e6:	f3bf 8f6f 	isb	sy
 80037ea:	f3bf 8f4f 	dsb	sy
 80037ee:	b662      	cpsie	i
 80037f0:	61bb      	str	r3, [r7, #24]
}
 80037f2:	bf00      	nop
 80037f4:	e7fe      	b.n	80037f4 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80037f6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80037f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d01e      	beq.n	800383c <xTaskCreateStatic+0xb8>
 80037fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003800:	2b00      	cmp	r3, #0
 8003802:	d01b      	beq.n	800383c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003806:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800380c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800380e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003810:	2202      	movs	r2, #2
 8003812:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003816:	2300      	movs	r3, #0
 8003818:	9303      	str	r3, [sp, #12]
 800381a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381c:	9302      	str	r3, [sp, #8]
 800381e:	f107 0314 	add.w	r3, r7, #20
 8003822:	9301      	str	r3, [sp, #4]
 8003824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003826:	9300      	str	r3, [sp, #0]
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	68b9      	ldr	r1, [r7, #8]
 800382e:	68f8      	ldr	r0, [r7, #12]
 8003830:	f000 f850 	bl	80038d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003834:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003836:	f000 f8d7 	bl	80039e8 <prvAddNewTaskToReadyList>
 800383a:	e001      	b.n	8003840 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800383c:	2300      	movs	r3, #0
 800383e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003840:	697b      	ldr	r3, [r7, #20]
	}
 8003842:	4618      	mov	r0, r3
 8003844:	3728      	adds	r7, #40	; 0x28
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}

0800384a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800384a:	b580      	push	{r7, lr}
 800384c:	b08c      	sub	sp, #48	; 0x30
 800384e:	af04      	add	r7, sp, #16
 8003850:	60f8      	str	r0, [r7, #12]
 8003852:	60b9      	str	r1, [r7, #8]
 8003854:	603b      	str	r3, [r7, #0]
 8003856:	4613      	mov	r3, r2
 8003858:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800385a:	88fb      	ldrh	r3, [r7, #6]
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	4618      	mov	r0, r3
 8003860:	f000 ffc4 	bl	80047ec <pvPortMalloc>
 8003864:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d00e      	beq.n	800388a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800386c:	2054      	movs	r0, #84	; 0x54
 800386e:	f000 ffbd 	bl	80047ec <pvPortMalloc>
 8003872:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d003      	beq.n	8003882 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	697a      	ldr	r2, [r7, #20]
 800387e:	631a      	str	r2, [r3, #48]	; 0x30
 8003880:	e005      	b.n	800388e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003882:	6978      	ldr	r0, [r7, #20]
 8003884:	f001 f87c 	bl	8004980 <vPortFree>
 8003888:	e001      	b.n	800388e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800388a:	2300      	movs	r3, #0
 800388c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d017      	beq.n	80038c4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	2200      	movs	r2, #0
 8003898:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800389c:	88fa      	ldrh	r2, [r7, #6]
 800389e:	2300      	movs	r3, #0
 80038a0:	9303      	str	r3, [sp, #12]
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	9302      	str	r3, [sp, #8]
 80038a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038a8:	9301      	str	r3, [sp, #4]
 80038aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ac:	9300      	str	r3, [sp, #0]
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	68b9      	ldr	r1, [r7, #8]
 80038b2:	68f8      	ldr	r0, [r7, #12]
 80038b4:	f000 f80e 	bl	80038d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80038b8:	69f8      	ldr	r0, [r7, #28]
 80038ba:	f000 f895 	bl	80039e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80038be:	2301      	movs	r3, #1
 80038c0:	61bb      	str	r3, [r7, #24]
 80038c2:	e002      	b.n	80038ca <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80038c4:	f04f 33ff 	mov.w	r3, #4294967295
 80038c8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80038ca:	69bb      	ldr	r3, [r7, #24]
	}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3720      	adds	r7, #32
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b088      	sub	sp, #32
 80038d8:	af00      	add	r7, sp, #0
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	607a      	str	r2, [r7, #4]
 80038e0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80038e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038e6:	6879      	ldr	r1, [r7, #4]
 80038e8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80038ec:	440b      	add	r3, r1
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	4413      	add	r3, r2
 80038f2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80038f4:	69bb      	ldr	r3, [r7, #24]
 80038f6:	f023 0307 	bic.w	r3, r3, #7
 80038fa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80038fc:	69bb      	ldr	r3, [r7, #24]
 80038fe:	f003 0307 	and.w	r3, r3, #7
 8003902:	2b00      	cmp	r3, #0
 8003904:	d00c      	beq.n	8003920 <prvInitialiseNewTask+0x4c>
	__asm volatile
 8003906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800390a:	b672      	cpsid	i
 800390c:	f383 8811 	msr	BASEPRI, r3
 8003910:	f3bf 8f6f 	isb	sy
 8003914:	f3bf 8f4f 	dsb	sy
 8003918:	b662      	cpsie	i
 800391a:	617b      	str	r3, [r7, #20]
}
 800391c:	bf00      	nop
 800391e:	e7fe      	b.n	800391e <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d01f      	beq.n	8003966 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003926:	2300      	movs	r3, #0
 8003928:	61fb      	str	r3, [r7, #28]
 800392a:	e012      	b.n	8003952 <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800392c:	68ba      	ldr	r2, [r7, #8]
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	4413      	add	r3, r2
 8003932:	7819      	ldrb	r1, [r3, #0]
 8003934:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	4413      	add	r3, r2
 800393a:	3334      	adds	r3, #52	; 0x34
 800393c:	460a      	mov	r2, r1
 800393e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003940:	68ba      	ldr	r2, [r7, #8]
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	4413      	add	r3, r2
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d006      	beq.n	800395a <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	3301      	adds	r3, #1
 8003950:	61fb      	str	r3, [r7, #28]
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	2b0f      	cmp	r3, #15
 8003956:	d9e9      	bls.n	800392c <prvInitialiseNewTask+0x58>
 8003958:	e000      	b.n	800395c <prvInitialiseNewTask+0x88>
			{
				break;
 800395a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800395c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800395e:	2200      	movs	r2, #0
 8003960:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003964:	e003      	b.n	800396e <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003968:	2200      	movs	r2, #0
 800396a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800396e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003970:	2b06      	cmp	r3, #6
 8003972:	d901      	bls.n	8003978 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003974:	2306      	movs	r3, #6
 8003976:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800397a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800397c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800397e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003980:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003982:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003986:	2200      	movs	r2, #0
 8003988:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800398a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800398c:	3304      	adds	r3, #4
 800398e:	4618      	mov	r0, r3
 8003990:	f7ff fe64 	bl	800365c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003996:	3318      	adds	r3, #24
 8003998:	4618      	mov	r0, r3
 800399a:	f7ff fe5f 	bl	800365c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800399e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039a2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039a6:	f1c3 0207 	rsb	r2, r3, #7
 80039aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80039ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039b2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80039b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b6:	2200      	movs	r2, #0
 80039b8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80039ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039bc:	2200      	movs	r2, #0
 80039be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80039c2:	683a      	ldr	r2, [r7, #0]
 80039c4:	68f9      	ldr	r1, [r7, #12]
 80039c6:	69b8      	ldr	r0, [r7, #24]
 80039c8:	f000 fd18 	bl	80043fc <pxPortInitialiseStack>
 80039cc:	4602      	mov	r2, r0
 80039ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80039d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d002      	beq.n	80039de <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80039d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80039de:	bf00      	nop
 80039e0:	3720      	adds	r7, #32
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
	...

080039e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80039f0:	f000 fe14 	bl	800461c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80039f4:	4b2a      	ldr	r3, [pc, #168]	; (8003aa0 <prvAddNewTaskToReadyList+0xb8>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	3301      	adds	r3, #1
 80039fa:	4a29      	ldr	r2, [pc, #164]	; (8003aa0 <prvAddNewTaskToReadyList+0xb8>)
 80039fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80039fe:	4b29      	ldr	r3, [pc, #164]	; (8003aa4 <prvAddNewTaskToReadyList+0xbc>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d109      	bne.n	8003a1a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003a06:	4a27      	ldr	r2, [pc, #156]	; (8003aa4 <prvAddNewTaskToReadyList+0xbc>)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003a0c:	4b24      	ldr	r3, [pc, #144]	; (8003aa0 <prvAddNewTaskToReadyList+0xb8>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d110      	bne.n	8003a36 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003a14:	f000 fac8 	bl	8003fa8 <prvInitialiseTaskLists>
 8003a18:	e00d      	b.n	8003a36 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003a1a:	4b23      	ldr	r3, [pc, #140]	; (8003aa8 <prvAddNewTaskToReadyList+0xc0>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d109      	bne.n	8003a36 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003a22:	4b20      	ldr	r3, [pc, #128]	; (8003aa4 <prvAddNewTaskToReadyList+0xbc>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d802      	bhi.n	8003a36 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003a30:	4a1c      	ldr	r2, [pc, #112]	; (8003aa4 <prvAddNewTaskToReadyList+0xbc>)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003a36:	4b1d      	ldr	r3, [pc, #116]	; (8003aac <prvAddNewTaskToReadyList+0xc4>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	3301      	adds	r3, #1
 8003a3c:	4a1b      	ldr	r2, [pc, #108]	; (8003aac <prvAddNewTaskToReadyList+0xc4>)
 8003a3e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a44:	2201      	movs	r2, #1
 8003a46:	409a      	lsls	r2, r3
 8003a48:	4b19      	ldr	r3, [pc, #100]	; (8003ab0 <prvAddNewTaskToReadyList+0xc8>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	4a18      	ldr	r2, [pc, #96]	; (8003ab0 <prvAddNewTaskToReadyList+0xc8>)
 8003a50:	6013      	str	r3, [r2, #0]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a56:	4613      	mov	r3, r2
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	4413      	add	r3, r2
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	4a15      	ldr	r2, [pc, #84]	; (8003ab4 <prvAddNewTaskToReadyList+0xcc>)
 8003a60:	441a      	add	r2, r3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	3304      	adds	r3, #4
 8003a66:	4619      	mov	r1, r3
 8003a68:	4610      	mov	r0, r2
 8003a6a:	f7ff fe04 	bl	8003676 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003a6e:	f000 fe09 	bl	8004684 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003a72:	4b0d      	ldr	r3, [pc, #52]	; (8003aa8 <prvAddNewTaskToReadyList+0xc0>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d00e      	beq.n	8003a98 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003a7a:	4b0a      	ldr	r3, [pc, #40]	; (8003aa4 <prvAddNewTaskToReadyList+0xbc>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d207      	bcs.n	8003a98 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003a88:	4b0b      	ldr	r3, [pc, #44]	; (8003ab8 <prvAddNewTaskToReadyList+0xd0>)
 8003a8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a8e:	601a      	str	r2, [r3, #0]
 8003a90:	f3bf 8f4f 	dsb	sy
 8003a94:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003a98:	bf00      	nop
 8003a9a:	3708      	adds	r7, #8
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	200004c4 	.word	0x200004c4
 8003aa4:	200003c4 	.word	0x200003c4
 8003aa8:	200004d0 	.word	0x200004d0
 8003aac:	200004e0 	.word	0x200004e0
 8003ab0:	200004cc 	.word	0x200004cc
 8003ab4:	200003c8 	.word	0x200003c8
 8003ab8:	e000ed04 	.word	0xe000ed04

08003abc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d019      	beq.n	8003b02 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003ace:	4b14      	ldr	r3, [pc, #80]	; (8003b20 <vTaskDelay+0x64>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d00c      	beq.n	8003af0 <vTaskDelay+0x34>
	__asm volatile
 8003ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ada:	b672      	cpsid	i
 8003adc:	f383 8811 	msr	BASEPRI, r3
 8003ae0:	f3bf 8f6f 	isb	sy
 8003ae4:	f3bf 8f4f 	dsb	sy
 8003ae8:	b662      	cpsie	i
 8003aea:	60bb      	str	r3, [r7, #8]
}
 8003aec:	bf00      	nop
 8003aee:	e7fe      	b.n	8003aee <vTaskDelay+0x32>
			vTaskSuspendAll();
 8003af0:	f000 f87e 	bl	8003bf0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003af4:	2100      	movs	r1, #0
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 fc1a 	bl	8004330 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003afc:	f000 f886 	bl	8003c0c <xTaskResumeAll>
 8003b00:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d107      	bne.n	8003b18 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8003b08:	4b06      	ldr	r3, [pc, #24]	; (8003b24 <vTaskDelay+0x68>)
 8003b0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b0e:	601a      	str	r2, [r3, #0]
 8003b10:	f3bf 8f4f 	dsb	sy
 8003b14:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003b18:	bf00      	nop
 8003b1a:	3710      	adds	r7, #16
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	200004ec 	.word	0x200004ec
 8003b24:	e000ed04 	.word	0xe000ed04

08003b28 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b08a      	sub	sp, #40	; 0x28
 8003b2c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003b32:	2300      	movs	r3, #0
 8003b34:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003b36:	463a      	mov	r2, r7
 8003b38:	1d39      	adds	r1, r7, #4
 8003b3a:	f107 0308 	add.w	r3, r7, #8
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f7fc fce4 	bl	800050c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003b44:	6839      	ldr	r1, [r7, #0]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	68ba      	ldr	r2, [r7, #8]
 8003b4a:	9202      	str	r2, [sp, #8]
 8003b4c:	9301      	str	r3, [sp, #4]
 8003b4e:	2300      	movs	r3, #0
 8003b50:	9300      	str	r3, [sp, #0]
 8003b52:	2300      	movs	r3, #0
 8003b54:	460a      	mov	r2, r1
 8003b56:	4920      	ldr	r1, [pc, #128]	; (8003bd8 <vTaskStartScheduler+0xb0>)
 8003b58:	4820      	ldr	r0, [pc, #128]	; (8003bdc <vTaskStartScheduler+0xb4>)
 8003b5a:	f7ff fe13 	bl	8003784 <xTaskCreateStatic>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	4a1f      	ldr	r2, [pc, #124]	; (8003be0 <vTaskStartScheduler+0xb8>)
 8003b62:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003b64:	4b1e      	ldr	r3, [pc, #120]	; (8003be0 <vTaskStartScheduler+0xb8>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d002      	beq.n	8003b72 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	617b      	str	r3, [r7, #20]
 8003b70:	e001      	b.n	8003b76 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003b72:	2300      	movs	r3, #0
 8003b74:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d118      	bne.n	8003bae <vTaskStartScheduler+0x86>
	__asm volatile
 8003b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b80:	b672      	cpsid	i
 8003b82:	f383 8811 	msr	BASEPRI, r3
 8003b86:	f3bf 8f6f 	isb	sy
 8003b8a:	f3bf 8f4f 	dsb	sy
 8003b8e:	b662      	cpsie	i
 8003b90:	613b      	str	r3, [r7, #16]
}
 8003b92:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003b94:	4b13      	ldr	r3, [pc, #76]	; (8003be4 <vTaskStartScheduler+0xbc>)
 8003b96:	f04f 32ff 	mov.w	r2, #4294967295
 8003b9a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003b9c:	4b12      	ldr	r3, [pc, #72]	; (8003be8 <vTaskStartScheduler+0xc0>)
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003ba2:	4b12      	ldr	r3, [pc, #72]	; (8003bec <vTaskStartScheduler+0xc4>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003ba8:	f000 fcba 	bl	8004520 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003bac:	e010      	b.n	8003bd0 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bb4:	d10c      	bne.n	8003bd0 <vTaskStartScheduler+0xa8>
	__asm volatile
 8003bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bba:	b672      	cpsid	i
 8003bbc:	f383 8811 	msr	BASEPRI, r3
 8003bc0:	f3bf 8f6f 	isb	sy
 8003bc4:	f3bf 8f4f 	dsb	sy
 8003bc8:	b662      	cpsie	i
 8003bca:	60fb      	str	r3, [r7, #12]
}
 8003bcc:	bf00      	nop
 8003bce:	e7fe      	b.n	8003bce <vTaskStartScheduler+0xa6>
}
 8003bd0:	bf00      	nop
 8003bd2:	3718      	adds	r7, #24
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	08005668 	.word	0x08005668
 8003bdc:	08003f79 	.word	0x08003f79
 8003be0:	200004e8 	.word	0x200004e8
 8003be4:	200004e4 	.word	0x200004e4
 8003be8:	200004d0 	.word	0x200004d0
 8003bec:	200004c8 	.word	0x200004c8

08003bf0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003bf4:	4b04      	ldr	r3, [pc, #16]	; (8003c08 <vTaskSuspendAll+0x18>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	4a03      	ldr	r2, [pc, #12]	; (8003c08 <vTaskSuspendAll+0x18>)
 8003bfc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8003bfe:	bf00      	nop
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr
 8003c08:	200004ec 	.word	0x200004ec

08003c0c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b084      	sub	sp, #16
 8003c10:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003c12:	2300      	movs	r3, #0
 8003c14:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003c16:	2300      	movs	r3, #0
 8003c18:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003c1a:	4b42      	ldr	r3, [pc, #264]	; (8003d24 <xTaskResumeAll+0x118>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d10c      	bne.n	8003c3c <xTaskResumeAll+0x30>
	__asm volatile
 8003c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c26:	b672      	cpsid	i
 8003c28:	f383 8811 	msr	BASEPRI, r3
 8003c2c:	f3bf 8f6f 	isb	sy
 8003c30:	f3bf 8f4f 	dsb	sy
 8003c34:	b662      	cpsie	i
 8003c36:	603b      	str	r3, [r7, #0]
}
 8003c38:	bf00      	nop
 8003c3a:	e7fe      	b.n	8003c3a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003c3c:	f000 fcee 	bl	800461c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003c40:	4b38      	ldr	r3, [pc, #224]	; (8003d24 <xTaskResumeAll+0x118>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	3b01      	subs	r3, #1
 8003c46:	4a37      	ldr	r2, [pc, #220]	; (8003d24 <xTaskResumeAll+0x118>)
 8003c48:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c4a:	4b36      	ldr	r3, [pc, #216]	; (8003d24 <xTaskResumeAll+0x118>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d161      	bne.n	8003d16 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003c52:	4b35      	ldr	r3, [pc, #212]	; (8003d28 <xTaskResumeAll+0x11c>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d05d      	beq.n	8003d16 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c5a:	e02e      	b.n	8003cba <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c5c:	4b33      	ldr	r3, [pc, #204]	; (8003d2c <xTaskResumeAll+0x120>)
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	3318      	adds	r3, #24
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f7ff fd61 	bl	8003730 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	3304      	adds	r3, #4
 8003c72:	4618      	mov	r0, r3
 8003c74:	f7ff fd5c 	bl	8003730 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	409a      	lsls	r2, r3
 8003c80:	4b2b      	ldr	r3, [pc, #172]	; (8003d30 <xTaskResumeAll+0x124>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	4a2a      	ldr	r2, [pc, #168]	; (8003d30 <xTaskResumeAll+0x124>)
 8003c88:	6013      	str	r3, [r2, #0]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c8e:	4613      	mov	r3, r2
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	4413      	add	r3, r2
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	4a27      	ldr	r2, [pc, #156]	; (8003d34 <xTaskResumeAll+0x128>)
 8003c98:	441a      	add	r2, r3
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	3304      	adds	r3, #4
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	4610      	mov	r0, r2
 8003ca2:	f7ff fce8 	bl	8003676 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003caa:	4b23      	ldr	r3, [pc, #140]	; (8003d38 <xTaskResumeAll+0x12c>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d302      	bcc.n	8003cba <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003cb4:	4b21      	ldr	r3, [pc, #132]	; (8003d3c <xTaskResumeAll+0x130>)
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003cba:	4b1c      	ldr	r3, [pc, #112]	; (8003d2c <xTaskResumeAll+0x120>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d1cc      	bne.n	8003c5c <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d001      	beq.n	8003ccc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003cc8:	f000 fa0e 	bl	80040e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003ccc:	4b1c      	ldr	r3, [pc, #112]	; (8003d40 <xTaskResumeAll+0x134>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d010      	beq.n	8003cfa <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003cd8:	f000 f836 	bl	8003d48 <xTaskIncrementTick>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d002      	beq.n	8003ce8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003ce2:	4b16      	ldr	r3, [pc, #88]	; (8003d3c <xTaskResumeAll+0x130>)
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	3b01      	subs	r3, #1
 8003cec:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d1f1      	bne.n	8003cd8 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8003cf4:	4b12      	ldr	r3, [pc, #72]	; (8003d40 <xTaskResumeAll+0x134>)
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003cfa:	4b10      	ldr	r3, [pc, #64]	; (8003d3c <xTaskResumeAll+0x130>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d009      	beq.n	8003d16 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003d02:	2301      	movs	r3, #1
 8003d04:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003d06:	4b0f      	ldr	r3, [pc, #60]	; (8003d44 <xTaskResumeAll+0x138>)
 8003d08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d0c:	601a      	str	r2, [r3, #0]
 8003d0e:	f3bf 8f4f 	dsb	sy
 8003d12:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003d16:	f000 fcb5 	bl	8004684 <vPortExitCritical>

	return xAlreadyYielded;
 8003d1a:	68bb      	ldr	r3, [r7, #8]
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3710      	adds	r7, #16
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	200004ec 	.word	0x200004ec
 8003d28:	200004c4 	.word	0x200004c4
 8003d2c:	20000484 	.word	0x20000484
 8003d30:	200004cc 	.word	0x200004cc
 8003d34:	200003c8 	.word	0x200003c8
 8003d38:	200003c4 	.word	0x200003c4
 8003d3c:	200004d8 	.word	0x200004d8
 8003d40:	200004d4 	.word	0x200004d4
 8003d44:	e000ed04 	.word	0xe000ed04

08003d48 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b086      	sub	sp, #24
 8003d4c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d52:	4b4f      	ldr	r3, [pc, #316]	; (8003e90 <xTaskIncrementTick+0x148>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	f040 808a 	bne.w	8003e70 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003d5c:	4b4d      	ldr	r3, [pc, #308]	; (8003e94 <xTaskIncrementTick+0x14c>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	3301      	adds	r3, #1
 8003d62:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003d64:	4a4b      	ldr	r2, [pc, #300]	; (8003e94 <xTaskIncrementTick+0x14c>)
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d122      	bne.n	8003db6 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8003d70:	4b49      	ldr	r3, [pc, #292]	; (8003e98 <xTaskIncrementTick+0x150>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d00c      	beq.n	8003d94 <xTaskIncrementTick+0x4c>
	__asm volatile
 8003d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d7e:	b672      	cpsid	i
 8003d80:	f383 8811 	msr	BASEPRI, r3
 8003d84:	f3bf 8f6f 	isb	sy
 8003d88:	f3bf 8f4f 	dsb	sy
 8003d8c:	b662      	cpsie	i
 8003d8e:	603b      	str	r3, [r7, #0]
}
 8003d90:	bf00      	nop
 8003d92:	e7fe      	b.n	8003d92 <xTaskIncrementTick+0x4a>
 8003d94:	4b40      	ldr	r3, [pc, #256]	; (8003e98 <xTaskIncrementTick+0x150>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	60fb      	str	r3, [r7, #12]
 8003d9a:	4b40      	ldr	r3, [pc, #256]	; (8003e9c <xTaskIncrementTick+0x154>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a3e      	ldr	r2, [pc, #248]	; (8003e98 <xTaskIncrementTick+0x150>)
 8003da0:	6013      	str	r3, [r2, #0]
 8003da2:	4a3e      	ldr	r2, [pc, #248]	; (8003e9c <xTaskIncrementTick+0x154>)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6013      	str	r3, [r2, #0]
 8003da8:	4b3d      	ldr	r3, [pc, #244]	; (8003ea0 <xTaskIncrementTick+0x158>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	3301      	adds	r3, #1
 8003dae:	4a3c      	ldr	r2, [pc, #240]	; (8003ea0 <xTaskIncrementTick+0x158>)
 8003db0:	6013      	str	r3, [r2, #0]
 8003db2:	f000 f999 	bl	80040e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003db6:	4b3b      	ldr	r3, [pc, #236]	; (8003ea4 <xTaskIncrementTick+0x15c>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	693a      	ldr	r2, [r7, #16]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d348      	bcc.n	8003e52 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003dc0:	4b35      	ldr	r3, [pc, #212]	; (8003e98 <xTaskIncrementTick+0x150>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d104      	bne.n	8003dd4 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003dca:	4b36      	ldr	r3, [pc, #216]	; (8003ea4 <xTaskIncrementTick+0x15c>)
 8003dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8003dd0:	601a      	str	r2, [r3, #0]
					break;
 8003dd2:	e03e      	b.n	8003e52 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003dd4:	4b30      	ldr	r3, [pc, #192]	; (8003e98 <xTaskIncrementTick+0x150>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003de4:	693a      	ldr	r2, [r7, #16]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d203      	bcs.n	8003df4 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003dec:	4a2d      	ldr	r2, [pc, #180]	; (8003ea4 <xTaskIncrementTick+0x15c>)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003df2:	e02e      	b.n	8003e52 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	3304      	adds	r3, #4
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f7ff fc99 	bl	8003730 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d004      	beq.n	8003e10 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	3318      	adds	r3, #24
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f7ff fc90 	bl	8003730 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e14:	2201      	movs	r2, #1
 8003e16:	409a      	lsls	r2, r3
 8003e18:	4b23      	ldr	r3, [pc, #140]	; (8003ea8 <xTaskIncrementTick+0x160>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	4a22      	ldr	r2, [pc, #136]	; (8003ea8 <xTaskIncrementTick+0x160>)
 8003e20:	6013      	str	r3, [r2, #0]
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e26:	4613      	mov	r3, r2
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	4413      	add	r3, r2
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	4a1f      	ldr	r2, [pc, #124]	; (8003eac <xTaskIncrementTick+0x164>)
 8003e30:	441a      	add	r2, r3
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	3304      	adds	r3, #4
 8003e36:	4619      	mov	r1, r3
 8003e38:	4610      	mov	r0, r2
 8003e3a:	f7ff fc1c 	bl	8003676 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e42:	4b1b      	ldr	r3, [pc, #108]	; (8003eb0 <xTaskIncrementTick+0x168>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d3b9      	bcc.n	8003dc0 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e50:	e7b6      	b.n	8003dc0 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003e52:	4b17      	ldr	r3, [pc, #92]	; (8003eb0 <xTaskIncrementTick+0x168>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e58:	4914      	ldr	r1, [pc, #80]	; (8003eac <xTaskIncrementTick+0x164>)
 8003e5a:	4613      	mov	r3, r2
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	4413      	add	r3, r2
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	440b      	add	r3, r1
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d907      	bls.n	8003e7a <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	617b      	str	r3, [r7, #20]
 8003e6e:	e004      	b.n	8003e7a <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003e70:	4b10      	ldr	r3, [pc, #64]	; (8003eb4 <xTaskIncrementTick+0x16c>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	3301      	adds	r3, #1
 8003e76:	4a0f      	ldr	r2, [pc, #60]	; (8003eb4 <xTaskIncrementTick+0x16c>)
 8003e78:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003e7a:	4b0f      	ldr	r3, [pc, #60]	; (8003eb8 <xTaskIncrementTick+0x170>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d001      	beq.n	8003e86 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8003e82:	2301      	movs	r3, #1
 8003e84:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003e86:	697b      	ldr	r3, [r7, #20]
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3718      	adds	r7, #24
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	200004ec 	.word	0x200004ec
 8003e94:	200004c8 	.word	0x200004c8
 8003e98:	2000047c 	.word	0x2000047c
 8003e9c:	20000480 	.word	0x20000480
 8003ea0:	200004dc 	.word	0x200004dc
 8003ea4:	200004e4 	.word	0x200004e4
 8003ea8:	200004cc 	.word	0x200004cc
 8003eac:	200003c8 	.word	0x200003c8
 8003eb0:	200003c4 	.word	0x200003c4
 8003eb4:	200004d4 	.word	0x200004d4
 8003eb8:	200004d8 	.word	0x200004d8

08003ebc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b087      	sub	sp, #28
 8003ec0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003ec2:	4b28      	ldr	r3, [pc, #160]	; (8003f64 <vTaskSwitchContext+0xa8>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d003      	beq.n	8003ed2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003eca:	4b27      	ldr	r3, [pc, #156]	; (8003f68 <vTaskSwitchContext+0xac>)
 8003ecc:	2201      	movs	r2, #1
 8003ece:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003ed0:	e041      	b.n	8003f56 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003ed2:	4b25      	ldr	r3, [pc, #148]	; (8003f68 <vTaskSwitchContext+0xac>)
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ed8:	4b24      	ldr	r3, [pc, #144]	; (8003f6c <vTaskSwitchContext+0xb0>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	fab3 f383 	clz	r3, r3
 8003ee4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003ee6:	7afb      	ldrb	r3, [r7, #11]
 8003ee8:	f1c3 031f 	rsb	r3, r3, #31
 8003eec:	617b      	str	r3, [r7, #20]
 8003eee:	4920      	ldr	r1, [pc, #128]	; (8003f70 <vTaskSwitchContext+0xb4>)
 8003ef0:	697a      	ldr	r2, [r7, #20]
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	4413      	add	r3, r2
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	440b      	add	r3, r1
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d10c      	bne.n	8003f1c <vTaskSwitchContext+0x60>
	__asm volatile
 8003f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f06:	b672      	cpsid	i
 8003f08:	f383 8811 	msr	BASEPRI, r3
 8003f0c:	f3bf 8f6f 	isb	sy
 8003f10:	f3bf 8f4f 	dsb	sy
 8003f14:	b662      	cpsie	i
 8003f16:	607b      	str	r3, [r7, #4]
}
 8003f18:	bf00      	nop
 8003f1a:	e7fe      	b.n	8003f1a <vTaskSwitchContext+0x5e>
 8003f1c:	697a      	ldr	r2, [r7, #20]
 8003f1e:	4613      	mov	r3, r2
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	4413      	add	r3, r2
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	4a12      	ldr	r2, [pc, #72]	; (8003f70 <vTaskSwitchContext+0xb4>)
 8003f28:	4413      	add	r3, r2
 8003f2a:	613b      	str	r3, [r7, #16]
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	685a      	ldr	r2, [r3, #4]
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	605a      	str	r2, [r3, #4]
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	685a      	ldr	r2, [r3, #4]
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	3308      	adds	r3, #8
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d104      	bne.n	8003f4c <vTaskSwitchContext+0x90>
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	685a      	ldr	r2, [r3, #4]
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	605a      	str	r2, [r3, #4]
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	4a08      	ldr	r2, [pc, #32]	; (8003f74 <vTaskSwitchContext+0xb8>)
 8003f54:	6013      	str	r3, [r2, #0]
}
 8003f56:	bf00      	nop
 8003f58:	371c      	adds	r7, #28
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	200004ec 	.word	0x200004ec
 8003f68:	200004d8 	.word	0x200004d8
 8003f6c:	200004cc 	.word	0x200004cc
 8003f70:	200003c8 	.word	0x200003c8
 8003f74:	200003c4 	.word	0x200003c4

08003f78 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b082      	sub	sp, #8
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003f80:	f000 f852 	bl	8004028 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003f84:	4b06      	ldr	r3, [pc, #24]	; (8003fa0 <prvIdleTask+0x28>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d9f9      	bls.n	8003f80 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003f8c:	4b05      	ldr	r3, [pc, #20]	; (8003fa4 <prvIdleTask+0x2c>)
 8003f8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f92:	601a      	str	r2, [r3, #0]
 8003f94:	f3bf 8f4f 	dsb	sy
 8003f98:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003f9c:	e7f0      	b.n	8003f80 <prvIdleTask+0x8>
 8003f9e:	bf00      	nop
 8003fa0:	200003c8 	.word	0x200003c8
 8003fa4:	e000ed04 	.word	0xe000ed04

08003fa8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b082      	sub	sp, #8
 8003fac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003fae:	2300      	movs	r3, #0
 8003fb0:	607b      	str	r3, [r7, #4]
 8003fb2:	e00c      	b.n	8003fce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	4413      	add	r3, r2
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	4a12      	ldr	r2, [pc, #72]	; (8004008 <prvInitialiseTaskLists+0x60>)
 8003fc0:	4413      	add	r3, r2
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f7ff fb2a 	bl	800361c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	3301      	adds	r3, #1
 8003fcc:	607b      	str	r3, [r7, #4]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2b06      	cmp	r3, #6
 8003fd2:	d9ef      	bls.n	8003fb4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003fd4:	480d      	ldr	r0, [pc, #52]	; (800400c <prvInitialiseTaskLists+0x64>)
 8003fd6:	f7ff fb21 	bl	800361c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003fda:	480d      	ldr	r0, [pc, #52]	; (8004010 <prvInitialiseTaskLists+0x68>)
 8003fdc:	f7ff fb1e 	bl	800361c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003fe0:	480c      	ldr	r0, [pc, #48]	; (8004014 <prvInitialiseTaskLists+0x6c>)
 8003fe2:	f7ff fb1b 	bl	800361c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003fe6:	480c      	ldr	r0, [pc, #48]	; (8004018 <prvInitialiseTaskLists+0x70>)
 8003fe8:	f7ff fb18 	bl	800361c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003fec:	480b      	ldr	r0, [pc, #44]	; (800401c <prvInitialiseTaskLists+0x74>)
 8003fee:	f7ff fb15 	bl	800361c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003ff2:	4b0b      	ldr	r3, [pc, #44]	; (8004020 <prvInitialiseTaskLists+0x78>)
 8003ff4:	4a05      	ldr	r2, [pc, #20]	; (800400c <prvInitialiseTaskLists+0x64>)
 8003ff6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003ff8:	4b0a      	ldr	r3, [pc, #40]	; (8004024 <prvInitialiseTaskLists+0x7c>)
 8003ffa:	4a05      	ldr	r2, [pc, #20]	; (8004010 <prvInitialiseTaskLists+0x68>)
 8003ffc:	601a      	str	r2, [r3, #0]
}
 8003ffe:	bf00      	nop
 8004000:	3708      	adds	r7, #8
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	200003c8 	.word	0x200003c8
 800400c:	20000454 	.word	0x20000454
 8004010:	20000468 	.word	0x20000468
 8004014:	20000484 	.word	0x20000484
 8004018:	20000498 	.word	0x20000498
 800401c:	200004b0 	.word	0x200004b0
 8004020:	2000047c 	.word	0x2000047c
 8004024:	20000480 	.word	0x20000480

08004028 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b082      	sub	sp, #8
 800402c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800402e:	e019      	b.n	8004064 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004030:	f000 faf4 	bl	800461c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004034:	4b10      	ldr	r3, [pc, #64]	; (8004078 <prvCheckTasksWaitingTermination+0x50>)
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	3304      	adds	r3, #4
 8004040:	4618      	mov	r0, r3
 8004042:	f7ff fb75 	bl	8003730 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004046:	4b0d      	ldr	r3, [pc, #52]	; (800407c <prvCheckTasksWaitingTermination+0x54>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	3b01      	subs	r3, #1
 800404c:	4a0b      	ldr	r2, [pc, #44]	; (800407c <prvCheckTasksWaitingTermination+0x54>)
 800404e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004050:	4b0b      	ldr	r3, [pc, #44]	; (8004080 <prvCheckTasksWaitingTermination+0x58>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	3b01      	subs	r3, #1
 8004056:	4a0a      	ldr	r2, [pc, #40]	; (8004080 <prvCheckTasksWaitingTermination+0x58>)
 8004058:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800405a:	f000 fb13 	bl	8004684 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 f810 	bl	8004084 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004064:	4b06      	ldr	r3, [pc, #24]	; (8004080 <prvCheckTasksWaitingTermination+0x58>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d1e1      	bne.n	8004030 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800406c:	bf00      	nop
 800406e:	bf00      	nop
 8004070:	3708      	adds	r7, #8
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	20000498 	.word	0x20000498
 800407c:	200004c4 	.word	0x200004c4
 8004080:	200004ac 	.word	0x200004ac

08004084 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004092:	2b00      	cmp	r3, #0
 8004094:	d108      	bne.n	80040a8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800409a:	4618      	mov	r0, r3
 800409c:	f000 fc70 	bl	8004980 <vPortFree>
				vPortFree( pxTCB );
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f000 fc6d 	bl	8004980 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80040a6:	e01a      	b.n	80040de <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d103      	bne.n	80040ba <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f000 fc64 	bl	8004980 <vPortFree>
	}
 80040b8:	e011      	b.n	80040de <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d00c      	beq.n	80040de <prvDeleteTCB+0x5a>
	__asm volatile
 80040c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c8:	b672      	cpsid	i
 80040ca:	f383 8811 	msr	BASEPRI, r3
 80040ce:	f3bf 8f6f 	isb	sy
 80040d2:	f3bf 8f4f 	dsb	sy
 80040d6:	b662      	cpsie	i
 80040d8:	60fb      	str	r3, [r7, #12]
}
 80040da:	bf00      	nop
 80040dc:	e7fe      	b.n	80040dc <prvDeleteTCB+0x58>
	}
 80040de:	bf00      	nop
 80040e0:	3710      	adds	r7, #16
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
	...

080040e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80040ee:	4b0c      	ldr	r3, [pc, #48]	; (8004120 <prvResetNextTaskUnblockTime+0x38>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d104      	bne.n	8004102 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80040f8:	4b0a      	ldr	r3, [pc, #40]	; (8004124 <prvResetNextTaskUnblockTime+0x3c>)
 80040fa:	f04f 32ff 	mov.w	r2, #4294967295
 80040fe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004100:	e008      	b.n	8004114 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004102:	4b07      	ldr	r3, [pc, #28]	; (8004120 <prvResetNextTaskUnblockTime+0x38>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	4a04      	ldr	r2, [pc, #16]	; (8004124 <prvResetNextTaskUnblockTime+0x3c>)
 8004112:	6013      	str	r3, [r2, #0]
}
 8004114:	bf00      	nop
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr
 8004120:	2000047c 	.word	0x2000047c
 8004124:	200004e4 	.word	0x200004e4

08004128 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8004132:	f000 fa73 	bl	800461c <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8004136:	4b1e      	ldr	r3, [pc, #120]	; (80041b0 <ulTaskNotifyTake+0x88>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800413c:	2b00      	cmp	r3, #0
 800413e:	d113      	bne.n	8004168 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8004140:	4b1b      	ldr	r3, [pc, #108]	; (80041b0 <ulTaskNotifyTake+0x88>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2201      	movs	r2, #1
 8004146:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d00b      	beq.n	8004168 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004150:	2101      	movs	r1, #1
 8004152:	6838      	ldr	r0, [r7, #0]
 8004154:	f000 f8ec 	bl	8004330 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8004158:	4b16      	ldr	r3, [pc, #88]	; (80041b4 <ulTaskNotifyTake+0x8c>)
 800415a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800415e:	601a      	str	r2, [r3, #0]
 8004160:	f3bf 8f4f 	dsb	sy
 8004164:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8004168:	f000 fa8c 	bl	8004684 <vPortExitCritical>

		taskENTER_CRITICAL();
 800416c:	f000 fa56 	bl	800461c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8004170:	4b0f      	ldr	r3, [pc, #60]	; (80041b0 <ulTaskNotifyTake+0x88>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004176:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d00c      	beq.n	8004198 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d004      	beq.n	800418e <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8004184:	4b0a      	ldr	r3, [pc, #40]	; (80041b0 <ulTaskNotifyTake+0x88>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	2200      	movs	r2, #0
 800418a:	64da      	str	r2, [r3, #76]	; 0x4c
 800418c:	e004      	b.n	8004198 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800418e:	4b08      	ldr	r3, [pc, #32]	; (80041b0 <ulTaskNotifyTake+0x88>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	68fa      	ldr	r2, [r7, #12]
 8004194:	3a01      	subs	r2, #1
 8004196:	64da      	str	r2, [r3, #76]	; 0x4c
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004198:	4b05      	ldr	r3, [pc, #20]	; (80041b0 <ulTaskNotifyTake+0x88>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	2200      	movs	r2, #0
 800419e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 80041a2:	f000 fa6f 	bl	8004684 <vPortExitCritical>

		return ulReturn;
 80041a6:	68fb      	ldr	r3, [r7, #12]
	}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3710      	adds	r7, #16
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	200003c4 	.word	0x200003c4
 80041b4:	e000ed04 	.word	0xe000ed04

080041b8 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b08a      	sub	sp, #40	; 0x28
 80041bc:	af00      	add	r7, sp, #0
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	603b      	str	r3, [r7, #0]
 80041c4:	4613      	mov	r3, r2
 80041c6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80041c8:	2301      	movs	r3, #1
 80041ca:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d10c      	bne.n	80041ec <xTaskGenericNotify+0x34>
	__asm volatile
 80041d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d6:	b672      	cpsid	i
 80041d8:	f383 8811 	msr	BASEPRI, r3
 80041dc:	f3bf 8f6f 	isb	sy
 80041e0:	f3bf 8f4f 	dsb	sy
 80041e4:	b662      	cpsie	i
 80041e6:	61bb      	str	r3, [r7, #24]
}
 80041e8:	bf00      	nop
 80041ea:	e7fe      	b.n	80041ea <xTaskGenericNotify+0x32>
		pxTCB = xTaskToNotify;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80041f0:	f000 fa14 	bl	800461c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d003      	beq.n	8004202 <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80041fa:	6a3b      	ldr	r3, [r7, #32]
 80041fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8004202:	6a3b      	ldr	r3, [r7, #32]
 8004204:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004208:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800420a:	6a3b      	ldr	r3, [r7, #32]
 800420c:	2202      	movs	r2, #2
 800420e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 8004212:	79fb      	ldrb	r3, [r7, #7]
 8004214:	2b04      	cmp	r3, #4
 8004216:	d828      	bhi.n	800426a <xTaskGenericNotify+0xb2>
 8004218:	a201      	add	r2, pc, #4	; (adr r2, 8004220 <xTaskGenericNotify+0x68>)
 800421a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800421e:	bf00      	nop
 8004220:	0800428f 	.word	0x0800428f
 8004224:	08004235 	.word	0x08004235
 8004228:	08004243 	.word	0x08004243
 800422c:	0800424f 	.word	0x0800424f
 8004230:	08004257 	.word	0x08004257
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8004234:	6a3b      	ldr	r3, [r7, #32]
 8004236:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	431a      	orrs	r2, r3
 800423c:	6a3b      	ldr	r3, [r7, #32]
 800423e:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8004240:	e028      	b.n	8004294 <xTaskGenericNotify+0xdc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8004242:	6a3b      	ldr	r3, [r7, #32]
 8004244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004246:	1c5a      	adds	r2, r3, #1
 8004248:	6a3b      	ldr	r3, [r7, #32]
 800424a:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 800424c:	e022      	b.n	8004294 <xTaskGenericNotify+0xdc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800424e:	6a3b      	ldr	r3, [r7, #32]
 8004250:	68ba      	ldr	r2, [r7, #8]
 8004252:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8004254:	e01e      	b.n	8004294 <xTaskGenericNotify+0xdc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8004256:	7ffb      	ldrb	r3, [r7, #31]
 8004258:	2b02      	cmp	r3, #2
 800425a:	d003      	beq.n	8004264 <xTaskGenericNotify+0xac>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800425c:	6a3b      	ldr	r3, [r7, #32]
 800425e:	68ba      	ldr	r2, [r7, #8]
 8004260:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8004262:	e017      	b.n	8004294 <xTaskGenericNotify+0xdc>
						xReturn = pdFAIL;
 8004264:	2300      	movs	r3, #0
 8004266:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8004268:	e014      	b.n	8004294 <xTaskGenericNotify+0xdc>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800426a:	6a3b      	ldr	r3, [r7, #32]
 800426c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800426e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004272:	d00e      	beq.n	8004292 <xTaskGenericNotify+0xda>
	__asm volatile
 8004274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004278:	b672      	cpsid	i
 800427a:	f383 8811 	msr	BASEPRI, r3
 800427e:	f3bf 8f6f 	isb	sy
 8004282:	f3bf 8f4f 	dsb	sy
 8004286:	b662      	cpsie	i
 8004288:	617b      	str	r3, [r7, #20]
}
 800428a:	bf00      	nop
 800428c:	e7fe      	b.n	800428c <xTaskGenericNotify+0xd4>
					break;
 800428e:	bf00      	nop
 8004290:	e000      	b.n	8004294 <xTaskGenericNotify+0xdc>

					break;
 8004292:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004294:	7ffb      	ldrb	r3, [r7, #31]
 8004296:	2b01      	cmp	r3, #1
 8004298:	d13b      	bne.n	8004312 <xTaskGenericNotify+0x15a>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800429a:	6a3b      	ldr	r3, [r7, #32]
 800429c:	3304      	adds	r3, #4
 800429e:	4618      	mov	r0, r3
 80042a0:	f7ff fa46 	bl	8003730 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80042a4:	6a3b      	ldr	r3, [r7, #32]
 80042a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a8:	2201      	movs	r2, #1
 80042aa:	409a      	lsls	r2, r3
 80042ac:	4b1c      	ldr	r3, [pc, #112]	; (8004320 <xTaskGenericNotify+0x168>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	4a1b      	ldr	r2, [pc, #108]	; (8004320 <xTaskGenericNotify+0x168>)
 80042b4:	6013      	str	r3, [r2, #0]
 80042b6:	6a3b      	ldr	r3, [r7, #32]
 80042b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042ba:	4613      	mov	r3, r2
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	4413      	add	r3, r2
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	4a18      	ldr	r2, [pc, #96]	; (8004324 <xTaskGenericNotify+0x16c>)
 80042c4:	441a      	add	r2, r3
 80042c6:	6a3b      	ldr	r3, [r7, #32]
 80042c8:	3304      	adds	r3, #4
 80042ca:	4619      	mov	r1, r3
 80042cc:	4610      	mov	r0, r2
 80042ce:	f7ff f9d2 	bl	8003676 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80042d2:	6a3b      	ldr	r3, [r7, #32]
 80042d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d00c      	beq.n	80042f4 <xTaskGenericNotify+0x13c>
	__asm volatile
 80042da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042de:	b672      	cpsid	i
 80042e0:	f383 8811 	msr	BASEPRI, r3
 80042e4:	f3bf 8f6f 	isb	sy
 80042e8:	f3bf 8f4f 	dsb	sy
 80042ec:	b662      	cpsie	i
 80042ee:	613b      	str	r3, [r7, #16]
}
 80042f0:	bf00      	nop
 80042f2:	e7fe      	b.n	80042f2 <xTaskGenericNotify+0x13a>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80042f4:	6a3b      	ldr	r3, [r7, #32]
 80042f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042f8:	4b0b      	ldr	r3, [pc, #44]	; (8004328 <xTaskGenericNotify+0x170>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042fe:	429a      	cmp	r2, r3
 8004300:	d907      	bls.n	8004312 <xTaskGenericNotify+0x15a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8004302:	4b0a      	ldr	r3, [pc, #40]	; (800432c <xTaskGenericNotify+0x174>)
 8004304:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004308:	601a      	str	r2, [r3, #0]
 800430a:	f3bf 8f4f 	dsb	sy
 800430e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8004312:	f000 f9b7 	bl	8004684 <vPortExitCritical>

		return xReturn;
 8004316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8004318:	4618      	mov	r0, r3
 800431a:	3728      	adds	r7, #40	; 0x28
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}
 8004320:	200004cc 	.word	0x200004cc
 8004324:	200003c8 	.word	0x200003c8
 8004328:	200003c4 	.word	0x200003c4
 800432c:	e000ed04 	.word	0xe000ed04

08004330 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800433a:	4b29      	ldr	r3, [pc, #164]	; (80043e0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004340:	4b28      	ldr	r3, [pc, #160]	; (80043e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	3304      	adds	r3, #4
 8004346:	4618      	mov	r0, r3
 8004348:	f7ff f9f2 	bl	8003730 <uxListRemove>
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d10b      	bne.n	800436a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004352:	4b24      	ldr	r3, [pc, #144]	; (80043e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004358:	2201      	movs	r2, #1
 800435a:	fa02 f303 	lsl.w	r3, r2, r3
 800435e:	43da      	mvns	r2, r3
 8004360:	4b21      	ldr	r3, [pc, #132]	; (80043e8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4013      	ands	r3, r2
 8004366:	4a20      	ldr	r2, [pc, #128]	; (80043e8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004368:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004370:	d10a      	bne.n	8004388 <prvAddCurrentTaskToDelayedList+0x58>
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d007      	beq.n	8004388 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004378:	4b1a      	ldr	r3, [pc, #104]	; (80043e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	3304      	adds	r3, #4
 800437e:	4619      	mov	r1, r3
 8004380:	481a      	ldr	r0, [pc, #104]	; (80043ec <prvAddCurrentTaskToDelayedList+0xbc>)
 8004382:	f7ff f978 	bl	8003676 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004386:	e026      	b.n	80043d6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004388:	68fa      	ldr	r2, [r7, #12]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4413      	add	r3, r2
 800438e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004390:	4b14      	ldr	r3, [pc, #80]	; (80043e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	68ba      	ldr	r2, [r7, #8]
 8004396:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004398:	68ba      	ldr	r2, [r7, #8]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	429a      	cmp	r2, r3
 800439e:	d209      	bcs.n	80043b4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043a0:	4b13      	ldr	r3, [pc, #76]	; (80043f0 <prvAddCurrentTaskToDelayedList+0xc0>)
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	4b0f      	ldr	r3, [pc, #60]	; (80043e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	3304      	adds	r3, #4
 80043aa:	4619      	mov	r1, r3
 80043ac:	4610      	mov	r0, r2
 80043ae:	f7ff f986 	bl	80036be <vListInsert>
}
 80043b2:	e010      	b.n	80043d6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043b4:	4b0f      	ldr	r3, [pc, #60]	; (80043f4 <prvAddCurrentTaskToDelayedList+0xc4>)
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	4b0a      	ldr	r3, [pc, #40]	; (80043e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	3304      	adds	r3, #4
 80043be:	4619      	mov	r1, r3
 80043c0:	4610      	mov	r0, r2
 80043c2:	f7ff f97c 	bl	80036be <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80043c6:	4b0c      	ldr	r3, [pc, #48]	; (80043f8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	68ba      	ldr	r2, [r7, #8]
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d202      	bcs.n	80043d6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80043d0:	4a09      	ldr	r2, [pc, #36]	; (80043f8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	6013      	str	r3, [r2, #0]
}
 80043d6:	bf00      	nop
 80043d8:	3710      	adds	r7, #16
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	200004c8 	.word	0x200004c8
 80043e4:	200003c4 	.word	0x200003c4
 80043e8:	200004cc 	.word	0x200004cc
 80043ec:	200004b0 	.word	0x200004b0
 80043f0:	20000480 	.word	0x20000480
 80043f4:	2000047c 	.word	0x2000047c
 80043f8:	200004e4 	.word	0x200004e4

080043fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80043fc:	b480      	push	{r7}
 80043fe:	b085      	sub	sp, #20
 8004400:	af00      	add	r7, sp, #0
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	3b04      	subs	r3, #4
 800440c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004414:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	3b04      	subs	r3, #4
 800441a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	f023 0201 	bic.w	r2, r3, #1
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	3b04      	subs	r3, #4
 800442a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800442c:	4a0c      	ldr	r2, [pc, #48]	; (8004460 <pxPortInitialiseStack+0x64>)
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	3b14      	subs	r3, #20
 8004436:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	3b04      	subs	r3, #4
 8004442:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f06f 0202 	mvn.w	r2, #2
 800444a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	3b20      	subs	r3, #32
 8004450:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004452:	68fb      	ldr	r3, [r7, #12]
}
 8004454:	4618      	mov	r0, r3
 8004456:	3714      	adds	r7, #20
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr
 8004460:	08004465 	.word	0x08004465

08004464 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004464:	b480      	push	{r7}
 8004466:	b085      	sub	sp, #20
 8004468:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800446a:	2300      	movs	r3, #0
 800446c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800446e:	4b14      	ldr	r3, [pc, #80]	; (80044c0 <prvTaskExitError+0x5c>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004476:	d00c      	beq.n	8004492 <prvTaskExitError+0x2e>
	__asm volatile
 8004478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800447c:	b672      	cpsid	i
 800447e:	f383 8811 	msr	BASEPRI, r3
 8004482:	f3bf 8f6f 	isb	sy
 8004486:	f3bf 8f4f 	dsb	sy
 800448a:	b662      	cpsie	i
 800448c:	60fb      	str	r3, [r7, #12]
}
 800448e:	bf00      	nop
 8004490:	e7fe      	b.n	8004490 <prvTaskExitError+0x2c>
	__asm volatile
 8004492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004496:	b672      	cpsid	i
 8004498:	f383 8811 	msr	BASEPRI, r3
 800449c:	f3bf 8f6f 	isb	sy
 80044a0:	f3bf 8f4f 	dsb	sy
 80044a4:	b662      	cpsie	i
 80044a6:	60bb      	str	r3, [r7, #8]
}
 80044a8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80044aa:	bf00      	nop
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d0fc      	beq.n	80044ac <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80044b2:	bf00      	nop
 80044b4:	bf00      	nop
 80044b6:	3714      	adds	r7, #20
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr
 80044c0:	2000000c 	.word	0x2000000c
	...

080044d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80044d0:	4b07      	ldr	r3, [pc, #28]	; (80044f0 <pxCurrentTCBConst2>)
 80044d2:	6819      	ldr	r1, [r3, #0]
 80044d4:	6808      	ldr	r0, [r1, #0]
 80044d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044da:	f380 8809 	msr	PSP, r0
 80044de:	f3bf 8f6f 	isb	sy
 80044e2:	f04f 0000 	mov.w	r0, #0
 80044e6:	f380 8811 	msr	BASEPRI, r0
 80044ea:	4770      	bx	lr
 80044ec:	f3af 8000 	nop.w

080044f0 <pxCurrentTCBConst2>:
 80044f0:	200003c4 	.word	0x200003c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80044f4:	bf00      	nop
 80044f6:	bf00      	nop

080044f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80044f8:	4808      	ldr	r0, [pc, #32]	; (800451c <prvPortStartFirstTask+0x24>)
 80044fa:	6800      	ldr	r0, [r0, #0]
 80044fc:	6800      	ldr	r0, [r0, #0]
 80044fe:	f380 8808 	msr	MSP, r0
 8004502:	f04f 0000 	mov.w	r0, #0
 8004506:	f380 8814 	msr	CONTROL, r0
 800450a:	b662      	cpsie	i
 800450c:	b661      	cpsie	f
 800450e:	f3bf 8f4f 	dsb	sy
 8004512:	f3bf 8f6f 	isb	sy
 8004516:	df00      	svc	0
 8004518:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800451a:	bf00      	nop
 800451c:	e000ed08 	.word	0xe000ed08

08004520 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004526:	4b37      	ldr	r3, [pc, #220]	; (8004604 <xPortStartScheduler+0xe4>)
 8004528:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	b2db      	uxtb	r3, r3
 8004530:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	22ff      	movs	r2, #255	; 0xff
 8004536:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	b2db      	uxtb	r3, r3
 800453e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004540:	78fb      	ldrb	r3, [r7, #3]
 8004542:	b2db      	uxtb	r3, r3
 8004544:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004548:	b2da      	uxtb	r2, r3
 800454a:	4b2f      	ldr	r3, [pc, #188]	; (8004608 <xPortStartScheduler+0xe8>)
 800454c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800454e:	4b2f      	ldr	r3, [pc, #188]	; (800460c <xPortStartScheduler+0xec>)
 8004550:	2207      	movs	r2, #7
 8004552:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004554:	e009      	b.n	800456a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004556:	4b2d      	ldr	r3, [pc, #180]	; (800460c <xPortStartScheduler+0xec>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	3b01      	subs	r3, #1
 800455c:	4a2b      	ldr	r2, [pc, #172]	; (800460c <xPortStartScheduler+0xec>)
 800455e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004560:	78fb      	ldrb	r3, [r7, #3]
 8004562:	b2db      	uxtb	r3, r3
 8004564:	005b      	lsls	r3, r3, #1
 8004566:	b2db      	uxtb	r3, r3
 8004568:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800456a:	78fb      	ldrb	r3, [r7, #3]
 800456c:	b2db      	uxtb	r3, r3
 800456e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004572:	2b80      	cmp	r3, #128	; 0x80
 8004574:	d0ef      	beq.n	8004556 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004576:	4b25      	ldr	r3, [pc, #148]	; (800460c <xPortStartScheduler+0xec>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f1c3 0307 	rsb	r3, r3, #7
 800457e:	2b04      	cmp	r3, #4
 8004580:	d00c      	beq.n	800459c <xPortStartScheduler+0x7c>
	__asm volatile
 8004582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004586:	b672      	cpsid	i
 8004588:	f383 8811 	msr	BASEPRI, r3
 800458c:	f3bf 8f6f 	isb	sy
 8004590:	f3bf 8f4f 	dsb	sy
 8004594:	b662      	cpsie	i
 8004596:	60bb      	str	r3, [r7, #8]
}
 8004598:	bf00      	nop
 800459a:	e7fe      	b.n	800459a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800459c:	4b1b      	ldr	r3, [pc, #108]	; (800460c <xPortStartScheduler+0xec>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	021b      	lsls	r3, r3, #8
 80045a2:	4a1a      	ldr	r2, [pc, #104]	; (800460c <xPortStartScheduler+0xec>)
 80045a4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80045a6:	4b19      	ldr	r3, [pc, #100]	; (800460c <xPortStartScheduler+0xec>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80045ae:	4a17      	ldr	r2, [pc, #92]	; (800460c <xPortStartScheduler+0xec>)
 80045b0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	b2da      	uxtb	r2, r3
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80045ba:	4b15      	ldr	r3, [pc, #84]	; (8004610 <xPortStartScheduler+0xf0>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a14      	ldr	r2, [pc, #80]	; (8004610 <xPortStartScheduler+0xf0>)
 80045c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80045c4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80045c6:	4b12      	ldr	r3, [pc, #72]	; (8004610 <xPortStartScheduler+0xf0>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a11      	ldr	r2, [pc, #68]	; (8004610 <xPortStartScheduler+0xf0>)
 80045cc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80045d0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80045d2:	f000 f8dd 	bl	8004790 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80045d6:	4b0f      	ldr	r3, [pc, #60]	; (8004614 <xPortStartScheduler+0xf4>)
 80045d8:	2200      	movs	r2, #0
 80045da:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80045dc:	f000 f8fc 	bl	80047d8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80045e0:	4b0d      	ldr	r3, [pc, #52]	; (8004618 <xPortStartScheduler+0xf8>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a0c      	ldr	r2, [pc, #48]	; (8004618 <xPortStartScheduler+0xf8>)
 80045e6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80045ea:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80045ec:	f7ff ff84 	bl	80044f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80045f0:	f7ff fc64 	bl	8003ebc <vTaskSwitchContext>
	prvTaskExitError();
 80045f4:	f7ff ff36 	bl	8004464 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3710      	adds	r7, #16
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	e000e400 	.word	0xe000e400
 8004608:	200004f0 	.word	0x200004f0
 800460c:	200004f4 	.word	0x200004f4
 8004610:	e000ed20 	.word	0xe000ed20
 8004614:	2000000c 	.word	0x2000000c
 8004618:	e000ef34 	.word	0xe000ef34

0800461c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
	__asm volatile
 8004622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004626:	b672      	cpsid	i
 8004628:	f383 8811 	msr	BASEPRI, r3
 800462c:	f3bf 8f6f 	isb	sy
 8004630:	f3bf 8f4f 	dsb	sy
 8004634:	b662      	cpsie	i
 8004636:	607b      	str	r3, [r7, #4]
}
 8004638:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800463a:	4b10      	ldr	r3, [pc, #64]	; (800467c <vPortEnterCritical+0x60>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	3301      	adds	r3, #1
 8004640:	4a0e      	ldr	r2, [pc, #56]	; (800467c <vPortEnterCritical+0x60>)
 8004642:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004644:	4b0d      	ldr	r3, [pc, #52]	; (800467c <vPortEnterCritical+0x60>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	2b01      	cmp	r3, #1
 800464a:	d111      	bne.n	8004670 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800464c:	4b0c      	ldr	r3, [pc, #48]	; (8004680 <vPortEnterCritical+0x64>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	b2db      	uxtb	r3, r3
 8004652:	2b00      	cmp	r3, #0
 8004654:	d00c      	beq.n	8004670 <vPortEnterCritical+0x54>
	__asm volatile
 8004656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800465a:	b672      	cpsid	i
 800465c:	f383 8811 	msr	BASEPRI, r3
 8004660:	f3bf 8f6f 	isb	sy
 8004664:	f3bf 8f4f 	dsb	sy
 8004668:	b662      	cpsie	i
 800466a:	603b      	str	r3, [r7, #0]
}
 800466c:	bf00      	nop
 800466e:	e7fe      	b.n	800466e <vPortEnterCritical+0x52>
	}
}
 8004670:	bf00      	nop
 8004672:	370c      	adds	r7, #12
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr
 800467c:	2000000c 	.word	0x2000000c
 8004680:	e000ed04 	.word	0xe000ed04

08004684 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800468a:	4b13      	ldr	r3, [pc, #76]	; (80046d8 <vPortExitCritical+0x54>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d10c      	bne.n	80046ac <vPortExitCritical+0x28>
	__asm volatile
 8004692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004696:	b672      	cpsid	i
 8004698:	f383 8811 	msr	BASEPRI, r3
 800469c:	f3bf 8f6f 	isb	sy
 80046a0:	f3bf 8f4f 	dsb	sy
 80046a4:	b662      	cpsie	i
 80046a6:	607b      	str	r3, [r7, #4]
}
 80046a8:	bf00      	nop
 80046aa:	e7fe      	b.n	80046aa <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80046ac:	4b0a      	ldr	r3, [pc, #40]	; (80046d8 <vPortExitCritical+0x54>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	3b01      	subs	r3, #1
 80046b2:	4a09      	ldr	r2, [pc, #36]	; (80046d8 <vPortExitCritical+0x54>)
 80046b4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80046b6:	4b08      	ldr	r3, [pc, #32]	; (80046d8 <vPortExitCritical+0x54>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d105      	bne.n	80046ca <vPortExitCritical+0x46>
 80046be:	2300      	movs	r3, #0
 80046c0:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80046c8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80046ca:	bf00      	nop
 80046cc:	370c      	adds	r7, #12
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr
 80046d6:	bf00      	nop
 80046d8:	2000000c 	.word	0x2000000c
 80046dc:	00000000 	.word	0x00000000

080046e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80046e0:	f3ef 8009 	mrs	r0, PSP
 80046e4:	f3bf 8f6f 	isb	sy
 80046e8:	4b15      	ldr	r3, [pc, #84]	; (8004740 <pxCurrentTCBConst>)
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	f01e 0f10 	tst.w	lr, #16
 80046f0:	bf08      	it	eq
 80046f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80046f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046fa:	6010      	str	r0, [r2, #0]
 80046fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004700:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004704:	b672      	cpsid	i
 8004706:	f380 8811 	msr	BASEPRI, r0
 800470a:	f3bf 8f4f 	dsb	sy
 800470e:	f3bf 8f6f 	isb	sy
 8004712:	b662      	cpsie	i
 8004714:	f7ff fbd2 	bl	8003ebc <vTaskSwitchContext>
 8004718:	f04f 0000 	mov.w	r0, #0
 800471c:	f380 8811 	msr	BASEPRI, r0
 8004720:	bc09      	pop	{r0, r3}
 8004722:	6819      	ldr	r1, [r3, #0]
 8004724:	6808      	ldr	r0, [r1, #0]
 8004726:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800472a:	f01e 0f10 	tst.w	lr, #16
 800472e:	bf08      	it	eq
 8004730:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004734:	f380 8809 	msr	PSP, r0
 8004738:	f3bf 8f6f 	isb	sy
 800473c:	4770      	bx	lr
 800473e:	bf00      	nop

08004740 <pxCurrentTCBConst>:
 8004740:	200003c4 	.word	0x200003c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004744:	bf00      	nop
 8004746:	bf00      	nop

08004748 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b082      	sub	sp, #8
 800474c:	af00      	add	r7, sp, #0
	__asm volatile
 800474e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004752:	b672      	cpsid	i
 8004754:	f383 8811 	msr	BASEPRI, r3
 8004758:	f3bf 8f6f 	isb	sy
 800475c:	f3bf 8f4f 	dsb	sy
 8004760:	b662      	cpsie	i
 8004762:	607b      	str	r3, [r7, #4]
}
 8004764:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004766:	f7ff faef 	bl	8003d48 <xTaskIncrementTick>
 800476a:	4603      	mov	r3, r0
 800476c:	2b00      	cmp	r3, #0
 800476e:	d003      	beq.n	8004778 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004770:	4b06      	ldr	r3, [pc, #24]	; (800478c <SysTick_Handler+0x44>)
 8004772:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004776:	601a      	str	r2, [r3, #0]
 8004778:	2300      	movs	r3, #0
 800477a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	f383 8811 	msr	BASEPRI, r3
}
 8004782:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004784:	bf00      	nop
 8004786:	3708      	adds	r7, #8
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}
 800478c:	e000ed04 	.word	0xe000ed04

08004790 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004790:	b480      	push	{r7}
 8004792:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004794:	4b0b      	ldr	r3, [pc, #44]	; (80047c4 <vPortSetupTimerInterrupt+0x34>)
 8004796:	2200      	movs	r2, #0
 8004798:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800479a:	4b0b      	ldr	r3, [pc, #44]	; (80047c8 <vPortSetupTimerInterrupt+0x38>)
 800479c:	2200      	movs	r2, #0
 800479e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80047a0:	4b0a      	ldr	r3, [pc, #40]	; (80047cc <vPortSetupTimerInterrupt+0x3c>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a0a      	ldr	r2, [pc, #40]	; (80047d0 <vPortSetupTimerInterrupt+0x40>)
 80047a6:	fba2 2303 	umull	r2, r3, r2, r3
 80047aa:	099b      	lsrs	r3, r3, #6
 80047ac:	4a09      	ldr	r2, [pc, #36]	; (80047d4 <vPortSetupTimerInterrupt+0x44>)
 80047ae:	3b01      	subs	r3, #1
 80047b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80047b2:	4b04      	ldr	r3, [pc, #16]	; (80047c4 <vPortSetupTimerInterrupt+0x34>)
 80047b4:	2207      	movs	r2, #7
 80047b6:	601a      	str	r2, [r3, #0]
}
 80047b8:	bf00      	nop
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr
 80047c2:	bf00      	nop
 80047c4:	e000e010 	.word	0xe000e010
 80047c8:	e000e018 	.word	0xe000e018
 80047cc:	20000000 	.word	0x20000000
 80047d0:	10624dd3 	.word	0x10624dd3
 80047d4:	e000e014 	.word	0xe000e014

080047d8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80047d8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80047e8 <vPortEnableVFP+0x10>
 80047dc:	6801      	ldr	r1, [r0, #0]
 80047de:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80047e2:	6001      	str	r1, [r0, #0]
 80047e4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80047e6:	bf00      	nop
 80047e8:	e000ed88 	.word	0xe000ed88

080047ec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b08a      	sub	sp, #40	; 0x28
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80047f4:	2300      	movs	r3, #0
 80047f6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80047f8:	f7ff f9fa 	bl	8003bf0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80047fc:	4b5b      	ldr	r3, [pc, #364]	; (800496c <pvPortMalloc+0x180>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d101      	bne.n	8004808 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004804:	f000 f91a 	bl	8004a3c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004808:	4b59      	ldr	r3, [pc, #356]	; (8004970 <pvPortMalloc+0x184>)
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	4013      	ands	r3, r2
 8004810:	2b00      	cmp	r3, #0
 8004812:	f040 8092 	bne.w	800493a <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d01f      	beq.n	800485c <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800481c:	2208      	movs	r2, #8
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4413      	add	r3, r2
 8004822:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f003 0307 	and.w	r3, r3, #7
 800482a:	2b00      	cmp	r3, #0
 800482c:	d016      	beq.n	800485c <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f023 0307 	bic.w	r3, r3, #7
 8004834:	3308      	adds	r3, #8
 8004836:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f003 0307 	and.w	r3, r3, #7
 800483e:	2b00      	cmp	r3, #0
 8004840:	d00c      	beq.n	800485c <pvPortMalloc+0x70>
	__asm volatile
 8004842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004846:	b672      	cpsid	i
 8004848:	f383 8811 	msr	BASEPRI, r3
 800484c:	f3bf 8f6f 	isb	sy
 8004850:	f3bf 8f4f 	dsb	sy
 8004854:	b662      	cpsie	i
 8004856:	617b      	str	r3, [r7, #20]
}
 8004858:	bf00      	nop
 800485a:	e7fe      	b.n	800485a <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d06b      	beq.n	800493a <pvPortMalloc+0x14e>
 8004862:	4b44      	ldr	r3, [pc, #272]	; (8004974 <pvPortMalloc+0x188>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	429a      	cmp	r2, r3
 800486a:	d866      	bhi.n	800493a <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800486c:	4b42      	ldr	r3, [pc, #264]	; (8004978 <pvPortMalloc+0x18c>)
 800486e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004870:	4b41      	ldr	r3, [pc, #260]	; (8004978 <pvPortMalloc+0x18c>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004876:	e004      	b.n	8004882 <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8004878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800487c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	429a      	cmp	r2, r3
 800488a:	d903      	bls.n	8004894 <pvPortMalloc+0xa8>
 800488c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d1f1      	bne.n	8004878 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004894:	4b35      	ldr	r3, [pc, #212]	; (800496c <pvPortMalloc+0x180>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800489a:	429a      	cmp	r2, r3
 800489c:	d04d      	beq.n	800493a <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800489e:	6a3b      	ldr	r3, [r7, #32]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2208      	movs	r2, #8
 80048a4:	4413      	add	r3, r2
 80048a6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80048a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	6a3b      	ldr	r3, [r7, #32]
 80048ae:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80048b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b2:	685a      	ldr	r2, [r3, #4]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	1ad2      	subs	r2, r2, r3
 80048b8:	2308      	movs	r3, #8
 80048ba:	005b      	lsls	r3, r3, #1
 80048bc:	429a      	cmp	r2, r3
 80048be:	d921      	bls.n	8004904 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80048c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4413      	add	r3, r2
 80048c6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80048c8:	69bb      	ldr	r3, [r7, #24]
 80048ca:	f003 0307 	and.w	r3, r3, #7
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d00c      	beq.n	80048ec <pvPortMalloc+0x100>
	__asm volatile
 80048d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d6:	b672      	cpsid	i
 80048d8:	f383 8811 	msr	BASEPRI, r3
 80048dc:	f3bf 8f6f 	isb	sy
 80048e0:	f3bf 8f4f 	dsb	sy
 80048e4:	b662      	cpsie	i
 80048e6:	613b      	str	r3, [r7, #16]
}
 80048e8:	bf00      	nop
 80048ea:	e7fe      	b.n	80048ea <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80048ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ee:	685a      	ldr	r2, [r3, #4]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	1ad2      	subs	r2, r2, r3
 80048f4:	69bb      	ldr	r3, [r7, #24]
 80048f6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80048f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80048fe:	69b8      	ldr	r0, [r7, #24]
 8004900:	f000 f8fe 	bl	8004b00 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004904:	4b1b      	ldr	r3, [pc, #108]	; (8004974 <pvPortMalloc+0x188>)
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	4a19      	ldr	r2, [pc, #100]	; (8004974 <pvPortMalloc+0x188>)
 8004910:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004912:	4b18      	ldr	r3, [pc, #96]	; (8004974 <pvPortMalloc+0x188>)
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	4b19      	ldr	r3, [pc, #100]	; (800497c <pvPortMalloc+0x190>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	429a      	cmp	r2, r3
 800491c:	d203      	bcs.n	8004926 <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800491e:	4b15      	ldr	r3, [pc, #84]	; (8004974 <pvPortMalloc+0x188>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a16      	ldr	r2, [pc, #88]	; (800497c <pvPortMalloc+0x190>)
 8004924:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004928:	685a      	ldr	r2, [r3, #4]
 800492a:	4b11      	ldr	r3, [pc, #68]	; (8004970 <pvPortMalloc+0x184>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	431a      	orrs	r2, r3
 8004930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004932:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004936:	2200      	movs	r2, #0
 8004938:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800493a:	f7ff f967 	bl	8003c0c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	f003 0307 	and.w	r3, r3, #7
 8004944:	2b00      	cmp	r3, #0
 8004946:	d00c      	beq.n	8004962 <pvPortMalloc+0x176>
	__asm volatile
 8004948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800494c:	b672      	cpsid	i
 800494e:	f383 8811 	msr	BASEPRI, r3
 8004952:	f3bf 8f6f 	isb	sy
 8004956:	f3bf 8f4f 	dsb	sy
 800495a:	b662      	cpsie	i
 800495c:	60fb      	str	r3, [r7, #12]
}
 800495e:	bf00      	nop
 8004960:	e7fe      	b.n	8004960 <pvPortMalloc+0x174>
	return pvReturn;
 8004962:	69fb      	ldr	r3, [r7, #28]
}
 8004964:	4618      	mov	r0, r3
 8004966:	3728      	adds	r7, #40	; 0x28
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}
 800496c:	20004100 	.word	0x20004100
 8004970:	2000410c 	.word	0x2000410c
 8004974:	20004104 	.word	0x20004104
 8004978:	200040f8 	.word	0x200040f8
 800497c:	20004108 	.word	0x20004108

08004980 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b086      	sub	sp, #24
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d04c      	beq.n	8004a2c <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004992:	2308      	movs	r3, #8
 8004994:	425b      	negs	r3, r3
 8004996:	697a      	ldr	r2, [r7, #20]
 8004998:	4413      	add	r3, r2
 800499a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	685a      	ldr	r2, [r3, #4]
 80049a4:	4b23      	ldr	r3, [pc, #140]	; (8004a34 <vPortFree+0xb4>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4013      	ands	r3, r2
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d10c      	bne.n	80049c8 <vPortFree+0x48>
	__asm volatile
 80049ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b2:	b672      	cpsid	i
 80049b4:	f383 8811 	msr	BASEPRI, r3
 80049b8:	f3bf 8f6f 	isb	sy
 80049bc:	f3bf 8f4f 	dsb	sy
 80049c0:	b662      	cpsie	i
 80049c2:	60fb      	str	r3, [r7, #12]
}
 80049c4:	bf00      	nop
 80049c6:	e7fe      	b.n	80049c6 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d00c      	beq.n	80049ea <vPortFree+0x6a>
	__asm volatile
 80049d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d4:	b672      	cpsid	i
 80049d6:	f383 8811 	msr	BASEPRI, r3
 80049da:	f3bf 8f6f 	isb	sy
 80049de:	f3bf 8f4f 	dsb	sy
 80049e2:	b662      	cpsie	i
 80049e4:	60bb      	str	r3, [r7, #8]
}
 80049e6:	bf00      	nop
 80049e8:	e7fe      	b.n	80049e8 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	685a      	ldr	r2, [r3, #4]
 80049ee:	4b11      	ldr	r3, [pc, #68]	; (8004a34 <vPortFree+0xb4>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4013      	ands	r3, r2
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d019      	beq.n	8004a2c <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d115      	bne.n	8004a2c <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	685a      	ldr	r2, [r3, #4]
 8004a04:	4b0b      	ldr	r3, [pc, #44]	; (8004a34 <vPortFree+0xb4>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	43db      	mvns	r3, r3
 8004a0a:	401a      	ands	r2, r3
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004a10:	f7ff f8ee 	bl	8003bf0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	685a      	ldr	r2, [r3, #4]
 8004a18:	4b07      	ldr	r3, [pc, #28]	; (8004a38 <vPortFree+0xb8>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4413      	add	r3, r2
 8004a1e:	4a06      	ldr	r2, [pc, #24]	; (8004a38 <vPortFree+0xb8>)
 8004a20:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004a22:	6938      	ldr	r0, [r7, #16]
 8004a24:	f000 f86c 	bl	8004b00 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004a28:	f7ff f8f0 	bl	8003c0c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004a2c:	bf00      	nop
 8004a2e:	3718      	adds	r7, #24
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	2000410c 	.word	0x2000410c
 8004a38:	20004104 	.word	0x20004104

08004a3c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b085      	sub	sp, #20
 8004a40:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004a42:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004a46:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004a48:	4b27      	ldr	r3, [pc, #156]	; (8004ae8 <prvHeapInit+0xac>)
 8004a4a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f003 0307 	and.w	r3, r3, #7
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d00c      	beq.n	8004a70 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	3307      	adds	r3, #7
 8004a5a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f023 0307 	bic.w	r3, r3, #7
 8004a62:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004a64:	68ba      	ldr	r2, [r7, #8]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	4a1f      	ldr	r2, [pc, #124]	; (8004ae8 <prvHeapInit+0xac>)
 8004a6c:	4413      	add	r3, r2
 8004a6e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004a74:	4a1d      	ldr	r2, [pc, #116]	; (8004aec <prvHeapInit+0xb0>)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004a7a:	4b1c      	ldr	r3, [pc, #112]	; (8004aec <prvHeapInit+0xb0>)
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	68ba      	ldr	r2, [r7, #8]
 8004a84:	4413      	add	r3, r2
 8004a86:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004a88:	2208      	movs	r2, #8
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	1a9b      	subs	r3, r3, r2
 8004a8e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f023 0307 	bic.w	r3, r3, #7
 8004a96:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	4a15      	ldr	r2, [pc, #84]	; (8004af0 <prvHeapInit+0xb4>)
 8004a9c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004a9e:	4b14      	ldr	r3, [pc, #80]	; (8004af0 <prvHeapInit+0xb4>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004aa6:	4b12      	ldr	r3, [pc, #72]	; (8004af0 <prvHeapInit+0xb4>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	68fa      	ldr	r2, [r7, #12]
 8004ab6:	1ad2      	subs	r2, r2, r3
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004abc:	4b0c      	ldr	r3, [pc, #48]	; (8004af0 <prvHeapInit+0xb4>)
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	4a0a      	ldr	r2, [pc, #40]	; (8004af4 <prvHeapInit+0xb8>)
 8004aca:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	4a09      	ldr	r2, [pc, #36]	; (8004af8 <prvHeapInit+0xbc>)
 8004ad2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004ad4:	4b09      	ldr	r3, [pc, #36]	; (8004afc <prvHeapInit+0xc0>)
 8004ad6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004ada:	601a      	str	r2, [r3, #0]
}
 8004adc:	bf00      	nop
 8004ade:	3714      	adds	r7, #20
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr
 8004ae8:	200004f8 	.word	0x200004f8
 8004aec:	200040f8 	.word	0x200040f8
 8004af0:	20004100 	.word	0x20004100
 8004af4:	20004108 	.word	0x20004108
 8004af8:	20004104 	.word	0x20004104
 8004afc:	2000410c 	.word	0x2000410c

08004b00 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004b00:	b480      	push	{r7}
 8004b02:	b085      	sub	sp, #20
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004b08:	4b28      	ldr	r3, [pc, #160]	; (8004bac <prvInsertBlockIntoFreeList+0xac>)
 8004b0a:	60fb      	str	r3, [r7, #12]
 8004b0c:	e002      	b.n	8004b14 <prvInsertBlockIntoFreeList+0x14>
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	60fb      	str	r3, [r7, #12]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d8f7      	bhi.n	8004b0e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	68ba      	ldr	r2, [r7, #8]
 8004b28:	4413      	add	r3, r2
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d108      	bne.n	8004b42 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	685a      	ldr	r2, [r3, #4]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	441a      	add	r2, r3
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	68ba      	ldr	r2, [r7, #8]
 8004b4c:	441a      	add	r2, r3
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d118      	bne.n	8004b88 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	4b15      	ldr	r3, [pc, #84]	; (8004bb0 <prvInsertBlockIntoFreeList+0xb0>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d00d      	beq.n	8004b7e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	685a      	ldr	r2, [r3, #4]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	441a      	add	r2, r3
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	601a      	str	r2, [r3, #0]
 8004b7c:	e008      	b.n	8004b90 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004b7e:	4b0c      	ldr	r3, [pc, #48]	; (8004bb0 <prvInsertBlockIntoFreeList+0xb0>)
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	601a      	str	r2, [r3, #0]
 8004b86:	e003      	b.n	8004b90 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004b90:	68fa      	ldr	r2, [r7, #12]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d002      	beq.n	8004b9e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b9e:	bf00      	nop
 8004ba0:	3714      	adds	r7, #20
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop
 8004bac:	200040f8 	.word	0x200040f8
 8004bb0:	20004100 	.word	0x20004100

08004bb4 <std>:
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	b510      	push	{r4, lr}
 8004bb8:	4604      	mov	r4, r0
 8004bba:	e9c0 3300 	strd	r3, r3, [r0]
 8004bbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004bc2:	6083      	str	r3, [r0, #8]
 8004bc4:	8181      	strh	r1, [r0, #12]
 8004bc6:	6643      	str	r3, [r0, #100]	; 0x64
 8004bc8:	81c2      	strh	r2, [r0, #14]
 8004bca:	6183      	str	r3, [r0, #24]
 8004bcc:	4619      	mov	r1, r3
 8004bce:	2208      	movs	r2, #8
 8004bd0:	305c      	adds	r0, #92	; 0x5c
 8004bd2:	f000 f9e5 	bl	8004fa0 <memset>
 8004bd6:	4b0d      	ldr	r3, [pc, #52]	; (8004c0c <std+0x58>)
 8004bd8:	6263      	str	r3, [r4, #36]	; 0x24
 8004bda:	4b0d      	ldr	r3, [pc, #52]	; (8004c10 <std+0x5c>)
 8004bdc:	62a3      	str	r3, [r4, #40]	; 0x28
 8004bde:	4b0d      	ldr	r3, [pc, #52]	; (8004c14 <std+0x60>)
 8004be0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004be2:	4b0d      	ldr	r3, [pc, #52]	; (8004c18 <std+0x64>)
 8004be4:	6323      	str	r3, [r4, #48]	; 0x30
 8004be6:	4b0d      	ldr	r3, [pc, #52]	; (8004c1c <std+0x68>)
 8004be8:	6224      	str	r4, [r4, #32]
 8004bea:	429c      	cmp	r4, r3
 8004bec:	d006      	beq.n	8004bfc <std+0x48>
 8004bee:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004bf2:	4294      	cmp	r4, r2
 8004bf4:	d002      	beq.n	8004bfc <std+0x48>
 8004bf6:	33d0      	adds	r3, #208	; 0xd0
 8004bf8:	429c      	cmp	r4, r3
 8004bfa:	d105      	bne.n	8004c08 <std+0x54>
 8004bfc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004c00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c04:	f000 ba44 	b.w	8005090 <__retarget_lock_init_recursive>
 8004c08:	bd10      	pop	{r4, pc}
 8004c0a:	bf00      	nop
 8004c0c:	08004df1 	.word	0x08004df1
 8004c10:	08004e13 	.word	0x08004e13
 8004c14:	08004e4b 	.word	0x08004e4b
 8004c18:	08004e6f 	.word	0x08004e6f
 8004c1c:	20004110 	.word	0x20004110

08004c20 <stdio_exit_handler>:
 8004c20:	4a02      	ldr	r2, [pc, #8]	; (8004c2c <stdio_exit_handler+0xc>)
 8004c22:	4903      	ldr	r1, [pc, #12]	; (8004c30 <stdio_exit_handler+0x10>)
 8004c24:	4803      	ldr	r0, [pc, #12]	; (8004c34 <stdio_exit_handler+0x14>)
 8004c26:	f000 b869 	b.w	8004cfc <_fwalk_sglue>
 8004c2a:	bf00      	nop
 8004c2c:	20000010 	.word	0x20000010
 8004c30:	08005395 	.word	0x08005395
 8004c34:	2000001c 	.word	0x2000001c

08004c38 <cleanup_stdio>:
 8004c38:	6841      	ldr	r1, [r0, #4]
 8004c3a:	4b0c      	ldr	r3, [pc, #48]	; (8004c6c <cleanup_stdio+0x34>)
 8004c3c:	4299      	cmp	r1, r3
 8004c3e:	b510      	push	{r4, lr}
 8004c40:	4604      	mov	r4, r0
 8004c42:	d001      	beq.n	8004c48 <cleanup_stdio+0x10>
 8004c44:	f000 fba6 	bl	8005394 <_fflush_r>
 8004c48:	68a1      	ldr	r1, [r4, #8]
 8004c4a:	4b09      	ldr	r3, [pc, #36]	; (8004c70 <cleanup_stdio+0x38>)
 8004c4c:	4299      	cmp	r1, r3
 8004c4e:	d002      	beq.n	8004c56 <cleanup_stdio+0x1e>
 8004c50:	4620      	mov	r0, r4
 8004c52:	f000 fb9f 	bl	8005394 <_fflush_r>
 8004c56:	68e1      	ldr	r1, [r4, #12]
 8004c58:	4b06      	ldr	r3, [pc, #24]	; (8004c74 <cleanup_stdio+0x3c>)
 8004c5a:	4299      	cmp	r1, r3
 8004c5c:	d004      	beq.n	8004c68 <cleanup_stdio+0x30>
 8004c5e:	4620      	mov	r0, r4
 8004c60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c64:	f000 bb96 	b.w	8005394 <_fflush_r>
 8004c68:	bd10      	pop	{r4, pc}
 8004c6a:	bf00      	nop
 8004c6c:	20004110 	.word	0x20004110
 8004c70:	20004178 	.word	0x20004178
 8004c74:	200041e0 	.word	0x200041e0

08004c78 <global_stdio_init.part.0>:
 8004c78:	b510      	push	{r4, lr}
 8004c7a:	4b0b      	ldr	r3, [pc, #44]	; (8004ca8 <global_stdio_init.part.0+0x30>)
 8004c7c:	4c0b      	ldr	r4, [pc, #44]	; (8004cac <global_stdio_init.part.0+0x34>)
 8004c7e:	4a0c      	ldr	r2, [pc, #48]	; (8004cb0 <global_stdio_init.part.0+0x38>)
 8004c80:	601a      	str	r2, [r3, #0]
 8004c82:	4620      	mov	r0, r4
 8004c84:	2200      	movs	r2, #0
 8004c86:	2104      	movs	r1, #4
 8004c88:	f7ff ff94 	bl	8004bb4 <std>
 8004c8c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004c90:	2201      	movs	r2, #1
 8004c92:	2109      	movs	r1, #9
 8004c94:	f7ff ff8e 	bl	8004bb4 <std>
 8004c98:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004c9c:	2202      	movs	r2, #2
 8004c9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ca2:	2112      	movs	r1, #18
 8004ca4:	f7ff bf86 	b.w	8004bb4 <std>
 8004ca8:	20004248 	.word	0x20004248
 8004cac:	20004110 	.word	0x20004110
 8004cb0:	08004c21 	.word	0x08004c21

08004cb4 <__sfp_lock_acquire>:
 8004cb4:	4801      	ldr	r0, [pc, #4]	; (8004cbc <__sfp_lock_acquire+0x8>)
 8004cb6:	f000 b9ec 	b.w	8005092 <__retarget_lock_acquire_recursive>
 8004cba:	bf00      	nop
 8004cbc:	20004251 	.word	0x20004251

08004cc0 <__sfp_lock_release>:
 8004cc0:	4801      	ldr	r0, [pc, #4]	; (8004cc8 <__sfp_lock_release+0x8>)
 8004cc2:	f000 b9e7 	b.w	8005094 <__retarget_lock_release_recursive>
 8004cc6:	bf00      	nop
 8004cc8:	20004251 	.word	0x20004251

08004ccc <__sinit>:
 8004ccc:	b510      	push	{r4, lr}
 8004cce:	4604      	mov	r4, r0
 8004cd0:	f7ff fff0 	bl	8004cb4 <__sfp_lock_acquire>
 8004cd4:	6a23      	ldr	r3, [r4, #32]
 8004cd6:	b11b      	cbz	r3, 8004ce0 <__sinit+0x14>
 8004cd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cdc:	f7ff bff0 	b.w	8004cc0 <__sfp_lock_release>
 8004ce0:	4b04      	ldr	r3, [pc, #16]	; (8004cf4 <__sinit+0x28>)
 8004ce2:	6223      	str	r3, [r4, #32]
 8004ce4:	4b04      	ldr	r3, [pc, #16]	; (8004cf8 <__sinit+0x2c>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d1f5      	bne.n	8004cd8 <__sinit+0xc>
 8004cec:	f7ff ffc4 	bl	8004c78 <global_stdio_init.part.0>
 8004cf0:	e7f2      	b.n	8004cd8 <__sinit+0xc>
 8004cf2:	bf00      	nop
 8004cf4:	08004c39 	.word	0x08004c39
 8004cf8:	20004248 	.word	0x20004248

08004cfc <_fwalk_sglue>:
 8004cfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d00:	4607      	mov	r7, r0
 8004d02:	4688      	mov	r8, r1
 8004d04:	4614      	mov	r4, r2
 8004d06:	2600      	movs	r6, #0
 8004d08:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004d0c:	f1b9 0901 	subs.w	r9, r9, #1
 8004d10:	d505      	bpl.n	8004d1e <_fwalk_sglue+0x22>
 8004d12:	6824      	ldr	r4, [r4, #0]
 8004d14:	2c00      	cmp	r4, #0
 8004d16:	d1f7      	bne.n	8004d08 <_fwalk_sglue+0xc>
 8004d18:	4630      	mov	r0, r6
 8004d1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d1e:	89ab      	ldrh	r3, [r5, #12]
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d907      	bls.n	8004d34 <_fwalk_sglue+0x38>
 8004d24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004d28:	3301      	adds	r3, #1
 8004d2a:	d003      	beq.n	8004d34 <_fwalk_sglue+0x38>
 8004d2c:	4629      	mov	r1, r5
 8004d2e:	4638      	mov	r0, r7
 8004d30:	47c0      	blx	r8
 8004d32:	4306      	orrs	r6, r0
 8004d34:	3568      	adds	r5, #104	; 0x68
 8004d36:	e7e9      	b.n	8004d0c <_fwalk_sglue+0x10>

08004d38 <_puts_r>:
 8004d38:	6a03      	ldr	r3, [r0, #32]
 8004d3a:	b570      	push	{r4, r5, r6, lr}
 8004d3c:	6884      	ldr	r4, [r0, #8]
 8004d3e:	4605      	mov	r5, r0
 8004d40:	460e      	mov	r6, r1
 8004d42:	b90b      	cbnz	r3, 8004d48 <_puts_r+0x10>
 8004d44:	f7ff ffc2 	bl	8004ccc <__sinit>
 8004d48:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d4a:	07db      	lsls	r3, r3, #31
 8004d4c:	d405      	bmi.n	8004d5a <_puts_r+0x22>
 8004d4e:	89a3      	ldrh	r3, [r4, #12]
 8004d50:	0598      	lsls	r0, r3, #22
 8004d52:	d402      	bmi.n	8004d5a <_puts_r+0x22>
 8004d54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d56:	f000 f99c 	bl	8005092 <__retarget_lock_acquire_recursive>
 8004d5a:	89a3      	ldrh	r3, [r4, #12]
 8004d5c:	0719      	lsls	r1, r3, #28
 8004d5e:	d513      	bpl.n	8004d88 <_puts_r+0x50>
 8004d60:	6923      	ldr	r3, [r4, #16]
 8004d62:	b18b      	cbz	r3, 8004d88 <_puts_r+0x50>
 8004d64:	3e01      	subs	r6, #1
 8004d66:	68a3      	ldr	r3, [r4, #8]
 8004d68:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004d6c:	3b01      	subs	r3, #1
 8004d6e:	60a3      	str	r3, [r4, #8]
 8004d70:	b9e9      	cbnz	r1, 8004dae <_puts_r+0x76>
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	da2e      	bge.n	8004dd4 <_puts_r+0x9c>
 8004d76:	4622      	mov	r2, r4
 8004d78:	210a      	movs	r1, #10
 8004d7a:	4628      	mov	r0, r5
 8004d7c:	f000 f87b 	bl	8004e76 <__swbuf_r>
 8004d80:	3001      	adds	r0, #1
 8004d82:	d007      	beq.n	8004d94 <_puts_r+0x5c>
 8004d84:	250a      	movs	r5, #10
 8004d86:	e007      	b.n	8004d98 <_puts_r+0x60>
 8004d88:	4621      	mov	r1, r4
 8004d8a:	4628      	mov	r0, r5
 8004d8c:	f000 f8b0 	bl	8004ef0 <__swsetup_r>
 8004d90:	2800      	cmp	r0, #0
 8004d92:	d0e7      	beq.n	8004d64 <_puts_r+0x2c>
 8004d94:	f04f 35ff 	mov.w	r5, #4294967295
 8004d98:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d9a:	07da      	lsls	r2, r3, #31
 8004d9c:	d405      	bmi.n	8004daa <_puts_r+0x72>
 8004d9e:	89a3      	ldrh	r3, [r4, #12]
 8004da0:	059b      	lsls	r3, r3, #22
 8004da2:	d402      	bmi.n	8004daa <_puts_r+0x72>
 8004da4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004da6:	f000 f975 	bl	8005094 <__retarget_lock_release_recursive>
 8004daa:	4628      	mov	r0, r5
 8004dac:	bd70      	pop	{r4, r5, r6, pc}
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	da04      	bge.n	8004dbc <_puts_r+0x84>
 8004db2:	69a2      	ldr	r2, [r4, #24]
 8004db4:	429a      	cmp	r2, r3
 8004db6:	dc06      	bgt.n	8004dc6 <_puts_r+0x8e>
 8004db8:	290a      	cmp	r1, #10
 8004dba:	d004      	beq.n	8004dc6 <_puts_r+0x8e>
 8004dbc:	6823      	ldr	r3, [r4, #0]
 8004dbe:	1c5a      	adds	r2, r3, #1
 8004dc0:	6022      	str	r2, [r4, #0]
 8004dc2:	7019      	strb	r1, [r3, #0]
 8004dc4:	e7cf      	b.n	8004d66 <_puts_r+0x2e>
 8004dc6:	4622      	mov	r2, r4
 8004dc8:	4628      	mov	r0, r5
 8004dca:	f000 f854 	bl	8004e76 <__swbuf_r>
 8004dce:	3001      	adds	r0, #1
 8004dd0:	d1c9      	bne.n	8004d66 <_puts_r+0x2e>
 8004dd2:	e7df      	b.n	8004d94 <_puts_r+0x5c>
 8004dd4:	6823      	ldr	r3, [r4, #0]
 8004dd6:	250a      	movs	r5, #10
 8004dd8:	1c5a      	adds	r2, r3, #1
 8004dda:	6022      	str	r2, [r4, #0]
 8004ddc:	701d      	strb	r5, [r3, #0]
 8004dde:	e7db      	b.n	8004d98 <_puts_r+0x60>

08004de0 <puts>:
 8004de0:	4b02      	ldr	r3, [pc, #8]	; (8004dec <puts+0xc>)
 8004de2:	4601      	mov	r1, r0
 8004de4:	6818      	ldr	r0, [r3, #0]
 8004de6:	f7ff bfa7 	b.w	8004d38 <_puts_r>
 8004dea:	bf00      	nop
 8004dec:	20000068 	.word	0x20000068

08004df0 <__sread>:
 8004df0:	b510      	push	{r4, lr}
 8004df2:	460c      	mov	r4, r1
 8004df4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004df8:	f000 f8fc 	bl	8004ff4 <_read_r>
 8004dfc:	2800      	cmp	r0, #0
 8004dfe:	bfab      	itete	ge
 8004e00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004e02:	89a3      	ldrhlt	r3, [r4, #12]
 8004e04:	181b      	addge	r3, r3, r0
 8004e06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004e0a:	bfac      	ite	ge
 8004e0c:	6563      	strge	r3, [r4, #84]	; 0x54
 8004e0e:	81a3      	strhlt	r3, [r4, #12]
 8004e10:	bd10      	pop	{r4, pc}

08004e12 <__swrite>:
 8004e12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e16:	461f      	mov	r7, r3
 8004e18:	898b      	ldrh	r3, [r1, #12]
 8004e1a:	05db      	lsls	r3, r3, #23
 8004e1c:	4605      	mov	r5, r0
 8004e1e:	460c      	mov	r4, r1
 8004e20:	4616      	mov	r6, r2
 8004e22:	d505      	bpl.n	8004e30 <__swrite+0x1e>
 8004e24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e28:	2302      	movs	r3, #2
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f000 f8d0 	bl	8004fd0 <_lseek_r>
 8004e30:	89a3      	ldrh	r3, [r4, #12]
 8004e32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e3a:	81a3      	strh	r3, [r4, #12]
 8004e3c:	4632      	mov	r2, r6
 8004e3e:	463b      	mov	r3, r7
 8004e40:	4628      	mov	r0, r5
 8004e42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e46:	f000 b8e7 	b.w	8005018 <_write_r>

08004e4a <__sseek>:
 8004e4a:	b510      	push	{r4, lr}
 8004e4c:	460c      	mov	r4, r1
 8004e4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e52:	f000 f8bd 	bl	8004fd0 <_lseek_r>
 8004e56:	1c43      	adds	r3, r0, #1
 8004e58:	89a3      	ldrh	r3, [r4, #12]
 8004e5a:	bf15      	itete	ne
 8004e5c:	6560      	strne	r0, [r4, #84]	; 0x54
 8004e5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004e62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004e66:	81a3      	strheq	r3, [r4, #12]
 8004e68:	bf18      	it	ne
 8004e6a:	81a3      	strhne	r3, [r4, #12]
 8004e6c:	bd10      	pop	{r4, pc}

08004e6e <__sclose>:
 8004e6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e72:	f000 b89d 	b.w	8004fb0 <_close_r>

08004e76 <__swbuf_r>:
 8004e76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e78:	460e      	mov	r6, r1
 8004e7a:	4614      	mov	r4, r2
 8004e7c:	4605      	mov	r5, r0
 8004e7e:	b118      	cbz	r0, 8004e88 <__swbuf_r+0x12>
 8004e80:	6a03      	ldr	r3, [r0, #32]
 8004e82:	b90b      	cbnz	r3, 8004e88 <__swbuf_r+0x12>
 8004e84:	f7ff ff22 	bl	8004ccc <__sinit>
 8004e88:	69a3      	ldr	r3, [r4, #24]
 8004e8a:	60a3      	str	r3, [r4, #8]
 8004e8c:	89a3      	ldrh	r3, [r4, #12]
 8004e8e:	071a      	lsls	r2, r3, #28
 8004e90:	d525      	bpl.n	8004ede <__swbuf_r+0x68>
 8004e92:	6923      	ldr	r3, [r4, #16]
 8004e94:	b31b      	cbz	r3, 8004ede <__swbuf_r+0x68>
 8004e96:	6823      	ldr	r3, [r4, #0]
 8004e98:	6922      	ldr	r2, [r4, #16]
 8004e9a:	1a98      	subs	r0, r3, r2
 8004e9c:	6963      	ldr	r3, [r4, #20]
 8004e9e:	b2f6      	uxtb	r6, r6
 8004ea0:	4283      	cmp	r3, r0
 8004ea2:	4637      	mov	r7, r6
 8004ea4:	dc04      	bgt.n	8004eb0 <__swbuf_r+0x3a>
 8004ea6:	4621      	mov	r1, r4
 8004ea8:	4628      	mov	r0, r5
 8004eaa:	f000 fa73 	bl	8005394 <_fflush_r>
 8004eae:	b9e0      	cbnz	r0, 8004eea <__swbuf_r+0x74>
 8004eb0:	68a3      	ldr	r3, [r4, #8]
 8004eb2:	3b01      	subs	r3, #1
 8004eb4:	60a3      	str	r3, [r4, #8]
 8004eb6:	6823      	ldr	r3, [r4, #0]
 8004eb8:	1c5a      	adds	r2, r3, #1
 8004eba:	6022      	str	r2, [r4, #0]
 8004ebc:	701e      	strb	r6, [r3, #0]
 8004ebe:	6962      	ldr	r2, [r4, #20]
 8004ec0:	1c43      	adds	r3, r0, #1
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d004      	beq.n	8004ed0 <__swbuf_r+0x5a>
 8004ec6:	89a3      	ldrh	r3, [r4, #12]
 8004ec8:	07db      	lsls	r3, r3, #31
 8004eca:	d506      	bpl.n	8004eda <__swbuf_r+0x64>
 8004ecc:	2e0a      	cmp	r6, #10
 8004ece:	d104      	bne.n	8004eda <__swbuf_r+0x64>
 8004ed0:	4621      	mov	r1, r4
 8004ed2:	4628      	mov	r0, r5
 8004ed4:	f000 fa5e 	bl	8005394 <_fflush_r>
 8004ed8:	b938      	cbnz	r0, 8004eea <__swbuf_r+0x74>
 8004eda:	4638      	mov	r0, r7
 8004edc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ede:	4621      	mov	r1, r4
 8004ee0:	4628      	mov	r0, r5
 8004ee2:	f000 f805 	bl	8004ef0 <__swsetup_r>
 8004ee6:	2800      	cmp	r0, #0
 8004ee8:	d0d5      	beq.n	8004e96 <__swbuf_r+0x20>
 8004eea:	f04f 37ff 	mov.w	r7, #4294967295
 8004eee:	e7f4      	b.n	8004eda <__swbuf_r+0x64>

08004ef0 <__swsetup_r>:
 8004ef0:	b538      	push	{r3, r4, r5, lr}
 8004ef2:	4b2a      	ldr	r3, [pc, #168]	; (8004f9c <__swsetup_r+0xac>)
 8004ef4:	4605      	mov	r5, r0
 8004ef6:	6818      	ldr	r0, [r3, #0]
 8004ef8:	460c      	mov	r4, r1
 8004efa:	b118      	cbz	r0, 8004f04 <__swsetup_r+0x14>
 8004efc:	6a03      	ldr	r3, [r0, #32]
 8004efe:	b90b      	cbnz	r3, 8004f04 <__swsetup_r+0x14>
 8004f00:	f7ff fee4 	bl	8004ccc <__sinit>
 8004f04:	89a3      	ldrh	r3, [r4, #12]
 8004f06:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004f0a:	0718      	lsls	r0, r3, #28
 8004f0c:	d422      	bmi.n	8004f54 <__swsetup_r+0x64>
 8004f0e:	06d9      	lsls	r1, r3, #27
 8004f10:	d407      	bmi.n	8004f22 <__swsetup_r+0x32>
 8004f12:	2309      	movs	r3, #9
 8004f14:	602b      	str	r3, [r5, #0]
 8004f16:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004f1a:	81a3      	strh	r3, [r4, #12]
 8004f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f20:	e034      	b.n	8004f8c <__swsetup_r+0x9c>
 8004f22:	0758      	lsls	r0, r3, #29
 8004f24:	d512      	bpl.n	8004f4c <__swsetup_r+0x5c>
 8004f26:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f28:	b141      	cbz	r1, 8004f3c <__swsetup_r+0x4c>
 8004f2a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004f2e:	4299      	cmp	r1, r3
 8004f30:	d002      	beq.n	8004f38 <__swsetup_r+0x48>
 8004f32:	4628      	mov	r0, r5
 8004f34:	f000 f8b0 	bl	8005098 <_free_r>
 8004f38:	2300      	movs	r3, #0
 8004f3a:	6363      	str	r3, [r4, #52]	; 0x34
 8004f3c:	89a3      	ldrh	r3, [r4, #12]
 8004f3e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004f42:	81a3      	strh	r3, [r4, #12]
 8004f44:	2300      	movs	r3, #0
 8004f46:	6063      	str	r3, [r4, #4]
 8004f48:	6923      	ldr	r3, [r4, #16]
 8004f4a:	6023      	str	r3, [r4, #0]
 8004f4c:	89a3      	ldrh	r3, [r4, #12]
 8004f4e:	f043 0308 	orr.w	r3, r3, #8
 8004f52:	81a3      	strh	r3, [r4, #12]
 8004f54:	6923      	ldr	r3, [r4, #16]
 8004f56:	b94b      	cbnz	r3, 8004f6c <__swsetup_r+0x7c>
 8004f58:	89a3      	ldrh	r3, [r4, #12]
 8004f5a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004f5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f62:	d003      	beq.n	8004f6c <__swsetup_r+0x7c>
 8004f64:	4621      	mov	r1, r4
 8004f66:	4628      	mov	r0, r5
 8004f68:	f000 fa62 	bl	8005430 <__smakebuf_r>
 8004f6c:	89a0      	ldrh	r0, [r4, #12]
 8004f6e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004f72:	f010 0301 	ands.w	r3, r0, #1
 8004f76:	d00a      	beq.n	8004f8e <__swsetup_r+0x9e>
 8004f78:	2300      	movs	r3, #0
 8004f7a:	60a3      	str	r3, [r4, #8]
 8004f7c:	6963      	ldr	r3, [r4, #20]
 8004f7e:	425b      	negs	r3, r3
 8004f80:	61a3      	str	r3, [r4, #24]
 8004f82:	6923      	ldr	r3, [r4, #16]
 8004f84:	b943      	cbnz	r3, 8004f98 <__swsetup_r+0xa8>
 8004f86:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004f8a:	d1c4      	bne.n	8004f16 <__swsetup_r+0x26>
 8004f8c:	bd38      	pop	{r3, r4, r5, pc}
 8004f8e:	0781      	lsls	r1, r0, #30
 8004f90:	bf58      	it	pl
 8004f92:	6963      	ldrpl	r3, [r4, #20]
 8004f94:	60a3      	str	r3, [r4, #8]
 8004f96:	e7f4      	b.n	8004f82 <__swsetup_r+0x92>
 8004f98:	2000      	movs	r0, #0
 8004f9a:	e7f7      	b.n	8004f8c <__swsetup_r+0x9c>
 8004f9c:	20000068 	.word	0x20000068

08004fa0 <memset>:
 8004fa0:	4402      	add	r2, r0
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d100      	bne.n	8004faa <memset+0xa>
 8004fa8:	4770      	bx	lr
 8004faa:	f803 1b01 	strb.w	r1, [r3], #1
 8004fae:	e7f9      	b.n	8004fa4 <memset+0x4>

08004fb0 <_close_r>:
 8004fb0:	b538      	push	{r3, r4, r5, lr}
 8004fb2:	4d06      	ldr	r5, [pc, #24]	; (8004fcc <_close_r+0x1c>)
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	4604      	mov	r4, r0
 8004fb8:	4608      	mov	r0, r1
 8004fba:	602b      	str	r3, [r5, #0]
 8004fbc:	f7fb fd5d 	bl	8000a7a <_close>
 8004fc0:	1c43      	adds	r3, r0, #1
 8004fc2:	d102      	bne.n	8004fca <_close_r+0x1a>
 8004fc4:	682b      	ldr	r3, [r5, #0]
 8004fc6:	b103      	cbz	r3, 8004fca <_close_r+0x1a>
 8004fc8:	6023      	str	r3, [r4, #0]
 8004fca:	bd38      	pop	{r3, r4, r5, pc}
 8004fcc:	2000424c 	.word	0x2000424c

08004fd0 <_lseek_r>:
 8004fd0:	b538      	push	{r3, r4, r5, lr}
 8004fd2:	4d07      	ldr	r5, [pc, #28]	; (8004ff0 <_lseek_r+0x20>)
 8004fd4:	4604      	mov	r4, r0
 8004fd6:	4608      	mov	r0, r1
 8004fd8:	4611      	mov	r1, r2
 8004fda:	2200      	movs	r2, #0
 8004fdc:	602a      	str	r2, [r5, #0]
 8004fde:	461a      	mov	r2, r3
 8004fe0:	f7fb fd72 	bl	8000ac8 <_lseek>
 8004fe4:	1c43      	adds	r3, r0, #1
 8004fe6:	d102      	bne.n	8004fee <_lseek_r+0x1e>
 8004fe8:	682b      	ldr	r3, [r5, #0]
 8004fea:	b103      	cbz	r3, 8004fee <_lseek_r+0x1e>
 8004fec:	6023      	str	r3, [r4, #0]
 8004fee:	bd38      	pop	{r3, r4, r5, pc}
 8004ff0:	2000424c 	.word	0x2000424c

08004ff4 <_read_r>:
 8004ff4:	b538      	push	{r3, r4, r5, lr}
 8004ff6:	4d07      	ldr	r5, [pc, #28]	; (8005014 <_read_r+0x20>)
 8004ff8:	4604      	mov	r4, r0
 8004ffa:	4608      	mov	r0, r1
 8004ffc:	4611      	mov	r1, r2
 8004ffe:	2200      	movs	r2, #0
 8005000:	602a      	str	r2, [r5, #0]
 8005002:	461a      	mov	r2, r3
 8005004:	f7fb fd00 	bl	8000a08 <_read>
 8005008:	1c43      	adds	r3, r0, #1
 800500a:	d102      	bne.n	8005012 <_read_r+0x1e>
 800500c:	682b      	ldr	r3, [r5, #0]
 800500e:	b103      	cbz	r3, 8005012 <_read_r+0x1e>
 8005010:	6023      	str	r3, [r4, #0]
 8005012:	bd38      	pop	{r3, r4, r5, pc}
 8005014:	2000424c 	.word	0x2000424c

08005018 <_write_r>:
 8005018:	b538      	push	{r3, r4, r5, lr}
 800501a:	4d07      	ldr	r5, [pc, #28]	; (8005038 <_write_r+0x20>)
 800501c:	4604      	mov	r4, r0
 800501e:	4608      	mov	r0, r1
 8005020:	4611      	mov	r1, r2
 8005022:	2200      	movs	r2, #0
 8005024:	602a      	str	r2, [r5, #0]
 8005026:	461a      	mov	r2, r3
 8005028:	f7fb fd0b 	bl	8000a42 <_write>
 800502c:	1c43      	adds	r3, r0, #1
 800502e:	d102      	bne.n	8005036 <_write_r+0x1e>
 8005030:	682b      	ldr	r3, [r5, #0]
 8005032:	b103      	cbz	r3, 8005036 <_write_r+0x1e>
 8005034:	6023      	str	r3, [r4, #0]
 8005036:	bd38      	pop	{r3, r4, r5, pc}
 8005038:	2000424c 	.word	0x2000424c

0800503c <__errno>:
 800503c:	4b01      	ldr	r3, [pc, #4]	; (8005044 <__errno+0x8>)
 800503e:	6818      	ldr	r0, [r3, #0]
 8005040:	4770      	bx	lr
 8005042:	bf00      	nop
 8005044:	20000068 	.word	0x20000068

08005048 <__libc_init_array>:
 8005048:	b570      	push	{r4, r5, r6, lr}
 800504a:	4d0d      	ldr	r5, [pc, #52]	; (8005080 <__libc_init_array+0x38>)
 800504c:	4c0d      	ldr	r4, [pc, #52]	; (8005084 <__libc_init_array+0x3c>)
 800504e:	1b64      	subs	r4, r4, r5
 8005050:	10a4      	asrs	r4, r4, #2
 8005052:	2600      	movs	r6, #0
 8005054:	42a6      	cmp	r6, r4
 8005056:	d109      	bne.n	800506c <__libc_init_array+0x24>
 8005058:	4d0b      	ldr	r5, [pc, #44]	; (8005088 <__libc_init_array+0x40>)
 800505a:	4c0c      	ldr	r4, [pc, #48]	; (800508c <__libc_init_array+0x44>)
 800505c:	f000 fa56 	bl	800550c <_init>
 8005060:	1b64      	subs	r4, r4, r5
 8005062:	10a4      	asrs	r4, r4, #2
 8005064:	2600      	movs	r6, #0
 8005066:	42a6      	cmp	r6, r4
 8005068:	d105      	bne.n	8005076 <__libc_init_array+0x2e>
 800506a:	bd70      	pop	{r4, r5, r6, pc}
 800506c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005070:	4798      	blx	r3
 8005072:	3601      	adds	r6, #1
 8005074:	e7ee      	b.n	8005054 <__libc_init_array+0xc>
 8005076:	f855 3b04 	ldr.w	r3, [r5], #4
 800507a:	4798      	blx	r3
 800507c:	3601      	adds	r6, #1
 800507e:	e7f2      	b.n	8005066 <__libc_init_array+0x1e>
 8005080:	08005690 	.word	0x08005690
 8005084:	08005690 	.word	0x08005690
 8005088:	08005690 	.word	0x08005690
 800508c:	08005694 	.word	0x08005694

08005090 <__retarget_lock_init_recursive>:
 8005090:	4770      	bx	lr

08005092 <__retarget_lock_acquire_recursive>:
 8005092:	4770      	bx	lr

08005094 <__retarget_lock_release_recursive>:
 8005094:	4770      	bx	lr
	...

08005098 <_free_r>:
 8005098:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800509a:	2900      	cmp	r1, #0
 800509c:	d044      	beq.n	8005128 <_free_r+0x90>
 800509e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050a2:	9001      	str	r0, [sp, #4]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	f1a1 0404 	sub.w	r4, r1, #4
 80050aa:	bfb8      	it	lt
 80050ac:	18e4      	addlt	r4, r4, r3
 80050ae:	f000 f8df 	bl	8005270 <__malloc_lock>
 80050b2:	4a1e      	ldr	r2, [pc, #120]	; (800512c <_free_r+0x94>)
 80050b4:	9801      	ldr	r0, [sp, #4]
 80050b6:	6813      	ldr	r3, [r2, #0]
 80050b8:	b933      	cbnz	r3, 80050c8 <_free_r+0x30>
 80050ba:	6063      	str	r3, [r4, #4]
 80050bc:	6014      	str	r4, [r2, #0]
 80050be:	b003      	add	sp, #12
 80050c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80050c4:	f000 b8da 	b.w	800527c <__malloc_unlock>
 80050c8:	42a3      	cmp	r3, r4
 80050ca:	d908      	bls.n	80050de <_free_r+0x46>
 80050cc:	6825      	ldr	r5, [r4, #0]
 80050ce:	1961      	adds	r1, r4, r5
 80050d0:	428b      	cmp	r3, r1
 80050d2:	bf01      	itttt	eq
 80050d4:	6819      	ldreq	r1, [r3, #0]
 80050d6:	685b      	ldreq	r3, [r3, #4]
 80050d8:	1949      	addeq	r1, r1, r5
 80050da:	6021      	streq	r1, [r4, #0]
 80050dc:	e7ed      	b.n	80050ba <_free_r+0x22>
 80050de:	461a      	mov	r2, r3
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	b10b      	cbz	r3, 80050e8 <_free_r+0x50>
 80050e4:	42a3      	cmp	r3, r4
 80050e6:	d9fa      	bls.n	80050de <_free_r+0x46>
 80050e8:	6811      	ldr	r1, [r2, #0]
 80050ea:	1855      	adds	r5, r2, r1
 80050ec:	42a5      	cmp	r5, r4
 80050ee:	d10b      	bne.n	8005108 <_free_r+0x70>
 80050f0:	6824      	ldr	r4, [r4, #0]
 80050f2:	4421      	add	r1, r4
 80050f4:	1854      	adds	r4, r2, r1
 80050f6:	42a3      	cmp	r3, r4
 80050f8:	6011      	str	r1, [r2, #0]
 80050fa:	d1e0      	bne.n	80050be <_free_r+0x26>
 80050fc:	681c      	ldr	r4, [r3, #0]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	6053      	str	r3, [r2, #4]
 8005102:	440c      	add	r4, r1
 8005104:	6014      	str	r4, [r2, #0]
 8005106:	e7da      	b.n	80050be <_free_r+0x26>
 8005108:	d902      	bls.n	8005110 <_free_r+0x78>
 800510a:	230c      	movs	r3, #12
 800510c:	6003      	str	r3, [r0, #0]
 800510e:	e7d6      	b.n	80050be <_free_r+0x26>
 8005110:	6825      	ldr	r5, [r4, #0]
 8005112:	1961      	adds	r1, r4, r5
 8005114:	428b      	cmp	r3, r1
 8005116:	bf04      	itt	eq
 8005118:	6819      	ldreq	r1, [r3, #0]
 800511a:	685b      	ldreq	r3, [r3, #4]
 800511c:	6063      	str	r3, [r4, #4]
 800511e:	bf04      	itt	eq
 8005120:	1949      	addeq	r1, r1, r5
 8005122:	6021      	streq	r1, [r4, #0]
 8005124:	6054      	str	r4, [r2, #4]
 8005126:	e7ca      	b.n	80050be <_free_r+0x26>
 8005128:	b003      	add	sp, #12
 800512a:	bd30      	pop	{r4, r5, pc}
 800512c:	20004254 	.word	0x20004254

08005130 <sbrk_aligned>:
 8005130:	b570      	push	{r4, r5, r6, lr}
 8005132:	4e0e      	ldr	r6, [pc, #56]	; (800516c <sbrk_aligned+0x3c>)
 8005134:	460c      	mov	r4, r1
 8005136:	6831      	ldr	r1, [r6, #0]
 8005138:	4605      	mov	r5, r0
 800513a:	b911      	cbnz	r1, 8005142 <sbrk_aligned+0x12>
 800513c:	f000 f9d6 	bl	80054ec <_sbrk_r>
 8005140:	6030      	str	r0, [r6, #0]
 8005142:	4621      	mov	r1, r4
 8005144:	4628      	mov	r0, r5
 8005146:	f000 f9d1 	bl	80054ec <_sbrk_r>
 800514a:	1c43      	adds	r3, r0, #1
 800514c:	d00a      	beq.n	8005164 <sbrk_aligned+0x34>
 800514e:	1cc4      	adds	r4, r0, #3
 8005150:	f024 0403 	bic.w	r4, r4, #3
 8005154:	42a0      	cmp	r0, r4
 8005156:	d007      	beq.n	8005168 <sbrk_aligned+0x38>
 8005158:	1a21      	subs	r1, r4, r0
 800515a:	4628      	mov	r0, r5
 800515c:	f000 f9c6 	bl	80054ec <_sbrk_r>
 8005160:	3001      	adds	r0, #1
 8005162:	d101      	bne.n	8005168 <sbrk_aligned+0x38>
 8005164:	f04f 34ff 	mov.w	r4, #4294967295
 8005168:	4620      	mov	r0, r4
 800516a:	bd70      	pop	{r4, r5, r6, pc}
 800516c:	20004258 	.word	0x20004258

08005170 <_malloc_r>:
 8005170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005174:	1ccd      	adds	r5, r1, #3
 8005176:	f025 0503 	bic.w	r5, r5, #3
 800517a:	3508      	adds	r5, #8
 800517c:	2d0c      	cmp	r5, #12
 800517e:	bf38      	it	cc
 8005180:	250c      	movcc	r5, #12
 8005182:	2d00      	cmp	r5, #0
 8005184:	4607      	mov	r7, r0
 8005186:	db01      	blt.n	800518c <_malloc_r+0x1c>
 8005188:	42a9      	cmp	r1, r5
 800518a:	d905      	bls.n	8005198 <_malloc_r+0x28>
 800518c:	230c      	movs	r3, #12
 800518e:	603b      	str	r3, [r7, #0]
 8005190:	2600      	movs	r6, #0
 8005192:	4630      	mov	r0, r6
 8005194:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005198:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800526c <_malloc_r+0xfc>
 800519c:	f000 f868 	bl	8005270 <__malloc_lock>
 80051a0:	f8d8 3000 	ldr.w	r3, [r8]
 80051a4:	461c      	mov	r4, r3
 80051a6:	bb5c      	cbnz	r4, 8005200 <_malloc_r+0x90>
 80051a8:	4629      	mov	r1, r5
 80051aa:	4638      	mov	r0, r7
 80051ac:	f7ff ffc0 	bl	8005130 <sbrk_aligned>
 80051b0:	1c43      	adds	r3, r0, #1
 80051b2:	4604      	mov	r4, r0
 80051b4:	d155      	bne.n	8005262 <_malloc_r+0xf2>
 80051b6:	f8d8 4000 	ldr.w	r4, [r8]
 80051ba:	4626      	mov	r6, r4
 80051bc:	2e00      	cmp	r6, #0
 80051be:	d145      	bne.n	800524c <_malloc_r+0xdc>
 80051c0:	2c00      	cmp	r4, #0
 80051c2:	d048      	beq.n	8005256 <_malloc_r+0xe6>
 80051c4:	6823      	ldr	r3, [r4, #0]
 80051c6:	4631      	mov	r1, r6
 80051c8:	4638      	mov	r0, r7
 80051ca:	eb04 0903 	add.w	r9, r4, r3
 80051ce:	f000 f98d 	bl	80054ec <_sbrk_r>
 80051d2:	4581      	cmp	r9, r0
 80051d4:	d13f      	bne.n	8005256 <_malloc_r+0xe6>
 80051d6:	6821      	ldr	r1, [r4, #0]
 80051d8:	1a6d      	subs	r5, r5, r1
 80051da:	4629      	mov	r1, r5
 80051dc:	4638      	mov	r0, r7
 80051de:	f7ff ffa7 	bl	8005130 <sbrk_aligned>
 80051e2:	3001      	adds	r0, #1
 80051e4:	d037      	beq.n	8005256 <_malloc_r+0xe6>
 80051e6:	6823      	ldr	r3, [r4, #0]
 80051e8:	442b      	add	r3, r5
 80051ea:	6023      	str	r3, [r4, #0]
 80051ec:	f8d8 3000 	ldr.w	r3, [r8]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d038      	beq.n	8005266 <_malloc_r+0xf6>
 80051f4:	685a      	ldr	r2, [r3, #4]
 80051f6:	42a2      	cmp	r2, r4
 80051f8:	d12b      	bne.n	8005252 <_malloc_r+0xe2>
 80051fa:	2200      	movs	r2, #0
 80051fc:	605a      	str	r2, [r3, #4]
 80051fe:	e00f      	b.n	8005220 <_malloc_r+0xb0>
 8005200:	6822      	ldr	r2, [r4, #0]
 8005202:	1b52      	subs	r2, r2, r5
 8005204:	d41f      	bmi.n	8005246 <_malloc_r+0xd6>
 8005206:	2a0b      	cmp	r2, #11
 8005208:	d917      	bls.n	800523a <_malloc_r+0xca>
 800520a:	1961      	adds	r1, r4, r5
 800520c:	42a3      	cmp	r3, r4
 800520e:	6025      	str	r5, [r4, #0]
 8005210:	bf18      	it	ne
 8005212:	6059      	strne	r1, [r3, #4]
 8005214:	6863      	ldr	r3, [r4, #4]
 8005216:	bf08      	it	eq
 8005218:	f8c8 1000 	streq.w	r1, [r8]
 800521c:	5162      	str	r2, [r4, r5]
 800521e:	604b      	str	r3, [r1, #4]
 8005220:	4638      	mov	r0, r7
 8005222:	f104 060b 	add.w	r6, r4, #11
 8005226:	f000 f829 	bl	800527c <__malloc_unlock>
 800522a:	f026 0607 	bic.w	r6, r6, #7
 800522e:	1d23      	adds	r3, r4, #4
 8005230:	1af2      	subs	r2, r6, r3
 8005232:	d0ae      	beq.n	8005192 <_malloc_r+0x22>
 8005234:	1b9b      	subs	r3, r3, r6
 8005236:	50a3      	str	r3, [r4, r2]
 8005238:	e7ab      	b.n	8005192 <_malloc_r+0x22>
 800523a:	42a3      	cmp	r3, r4
 800523c:	6862      	ldr	r2, [r4, #4]
 800523e:	d1dd      	bne.n	80051fc <_malloc_r+0x8c>
 8005240:	f8c8 2000 	str.w	r2, [r8]
 8005244:	e7ec      	b.n	8005220 <_malloc_r+0xb0>
 8005246:	4623      	mov	r3, r4
 8005248:	6864      	ldr	r4, [r4, #4]
 800524a:	e7ac      	b.n	80051a6 <_malloc_r+0x36>
 800524c:	4634      	mov	r4, r6
 800524e:	6876      	ldr	r6, [r6, #4]
 8005250:	e7b4      	b.n	80051bc <_malloc_r+0x4c>
 8005252:	4613      	mov	r3, r2
 8005254:	e7cc      	b.n	80051f0 <_malloc_r+0x80>
 8005256:	230c      	movs	r3, #12
 8005258:	603b      	str	r3, [r7, #0]
 800525a:	4638      	mov	r0, r7
 800525c:	f000 f80e 	bl	800527c <__malloc_unlock>
 8005260:	e797      	b.n	8005192 <_malloc_r+0x22>
 8005262:	6025      	str	r5, [r4, #0]
 8005264:	e7dc      	b.n	8005220 <_malloc_r+0xb0>
 8005266:	605b      	str	r3, [r3, #4]
 8005268:	deff      	udf	#255	; 0xff
 800526a:	bf00      	nop
 800526c:	20004254 	.word	0x20004254

08005270 <__malloc_lock>:
 8005270:	4801      	ldr	r0, [pc, #4]	; (8005278 <__malloc_lock+0x8>)
 8005272:	f7ff bf0e 	b.w	8005092 <__retarget_lock_acquire_recursive>
 8005276:	bf00      	nop
 8005278:	20004250 	.word	0x20004250

0800527c <__malloc_unlock>:
 800527c:	4801      	ldr	r0, [pc, #4]	; (8005284 <__malloc_unlock+0x8>)
 800527e:	f7ff bf09 	b.w	8005094 <__retarget_lock_release_recursive>
 8005282:	bf00      	nop
 8005284:	20004250 	.word	0x20004250

08005288 <__sflush_r>:
 8005288:	898a      	ldrh	r2, [r1, #12]
 800528a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800528e:	4605      	mov	r5, r0
 8005290:	0710      	lsls	r0, r2, #28
 8005292:	460c      	mov	r4, r1
 8005294:	d458      	bmi.n	8005348 <__sflush_r+0xc0>
 8005296:	684b      	ldr	r3, [r1, #4]
 8005298:	2b00      	cmp	r3, #0
 800529a:	dc05      	bgt.n	80052a8 <__sflush_r+0x20>
 800529c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800529e:	2b00      	cmp	r3, #0
 80052a0:	dc02      	bgt.n	80052a8 <__sflush_r+0x20>
 80052a2:	2000      	movs	r0, #0
 80052a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80052aa:	2e00      	cmp	r6, #0
 80052ac:	d0f9      	beq.n	80052a2 <__sflush_r+0x1a>
 80052ae:	2300      	movs	r3, #0
 80052b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80052b4:	682f      	ldr	r7, [r5, #0]
 80052b6:	6a21      	ldr	r1, [r4, #32]
 80052b8:	602b      	str	r3, [r5, #0]
 80052ba:	d032      	beq.n	8005322 <__sflush_r+0x9a>
 80052bc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80052be:	89a3      	ldrh	r3, [r4, #12]
 80052c0:	075a      	lsls	r2, r3, #29
 80052c2:	d505      	bpl.n	80052d0 <__sflush_r+0x48>
 80052c4:	6863      	ldr	r3, [r4, #4]
 80052c6:	1ac0      	subs	r0, r0, r3
 80052c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80052ca:	b10b      	cbz	r3, 80052d0 <__sflush_r+0x48>
 80052cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80052ce:	1ac0      	subs	r0, r0, r3
 80052d0:	2300      	movs	r3, #0
 80052d2:	4602      	mov	r2, r0
 80052d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80052d6:	6a21      	ldr	r1, [r4, #32]
 80052d8:	4628      	mov	r0, r5
 80052da:	47b0      	blx	r6
 80052dc:	1c43      	adds	r3, r0, #1
 80052de:	89a3      	ldrh	r3, [r4, #12]
 80052e0:	d106      	bne.n	80052f0 <__sflush_r+0x68>
 80052e2:	6829      	ldr	r1, [r5, #0]
 80052e4:	291d      	cmp	r1, #29
 80052e6:	d82b      	bhi.n	8005340 <__sflush_r+0xb8>
 80052e8:	4a29      	ldr	r2, [pc, #164]	; (8005390 <__sflush_r+0x108>)
 80052ea:	410a      	asrs	r2, r1
 80052ec:	07d6      	lsls	r6, r2, #31
 80052ee:	d427      	bmi.n	8005340 <__sflush_r+0xb8>
 80052f0:	2200      	movs	r2, #0
 80052f2:	6062      	str	r2, [r4, #4]
 80052f4:	04d9      	lsls	r1, r3, #19
 80052f6:	6922      	ldr	r2, [r4, #16]
 80052f8:	6022      	str	r2, [r4, #0]
 80052fa:	d504      	bpl.n	8005306 <__sflush_r+0x7e>
 80052fc:	1c42      	adds	r2, r0, #1
 80052fe:	d101      	bne.n	8005304 <__sflush_r+0x7c>
 8005300:	682b      	ldr	r3, [r5, #0]
 8005302:	b903      	cbnz	r3, 8005306 <__sflush_r+0x7e>
 8005304:	6560      	str	r0, [r4, #84]	; 0x54
 8005306:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005308:	602f      	str	r7, [r5, #0]
 800530a:	2900      	cmp	r1, #0
 800530c:	d0c9      	beq.n	80052a2 <__sflush_r+0x1a>
 800530e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005312:	4299      	cmp	r1, r3
 8005314:	d002      	beq.n	800531c <__sflush_r+0x94>
 8005316:	4628      	mov	r0, r5
 8005318:	f7ff febe 	bl	8005098 <_free_r>
 800531c:	2000      	movs	r0, #0
 800531e:	6360      	str	r0, [r4, #52]	; 0x34
 8005320:	e7c0      	b.n	80052a4 <__sflush_r+0x1c>
 8005322:	2301      	movs	r3, #1
 8005324:	4628      	mov	r0, r5
 8005326:	47b0      	blx	r6
 8005328:	1c41      	adds	r1, r0, #1
 800532a:	d1c8      	bne.n	80052be <__sflush_r+0x36>
 800532c:	682b      	ldr	r3, [r5, #0]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d0c5      	beq.n	80052be <__sflush_r+0x36>
 8005332:	2b1d      	cmp	r3, #29
 8005334:	d001      	beq.n	800533a <__sflush_r+0xb2>
 8005336:	2b16      	cmp	r3, #22
 8005338:	d101      	bne.n	800533e <__sflush_r+0xb6>
 800533a:	602f      	str	r7, [r5, #0]
 800533c:	e7b1      	b.n	80052a2 <__sflush_r+0x1a>
 800533e:	89a3      	ldrh	r3, [r4, #12]
 8005340:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005344:	81a3      	strh	r3, [r4, #12]
 8005346:	e7ad      	b.n	80052a4 <__sflush_r+0x1c>
 8005348:	690f      	ldr	r7, [r1, #16]
 800534a:	2f00      	cmp	r7, #0
 800534c:	d0a9      	beq.n	80052a2 <__sflush_r+0x1a>
 800534e:	0793      	lsls	r3, r2, #30
 8005350:	680e      	ldr	r6, [r1, #0]
 8005352:	bf08      	it	eq
 8005354:	694b      	ldreq	r3, [r1, #20]
 8005356:	600f      	str	r7, [r1, #0]
 8005358:	bf18      	it	ne
 800535a:	2300      	movne	r3, #0
 800535c:	eba6 0807 	sub.w	r8, r6, r7
 8005360:	608b      	str	r3, [r1, #8]
 8005362:	f1b8 0f00 	cmp.w	r8, #0
 8005366:	dd9c      	ble.n	80052a2 <__sflush_r+0x1a>
 8005368:	6a21      	ldr	r1, [r4, #32]
 800536a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800536c:	4643      	mov	r3, r8
 800536e:	463a      	mov	r2, r7
 8005370:	4628      	mov	r0, r5
 8005372:	47b0      	blx	r6
 8005374:	2800      	cmp	r0, #0
 8005376:	dc06      	bgt.n	8005386 <__sflush_r+0xfe>
 8005378:	89a3      	ldrh	r3, [r4, #12]
 800537a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800537e:	81a3      	strh	r3, [r4, #12]
 8005380:	f04f 30ff 	mov.w	r0, #4294967295
 8005384:	e78e      	b.n	80052a4 <__sflush_r+0x1c>
 8005386:	4407      	add	r7, r0
 8005388:	eba8 0800 	sub.w	r8, r8, r0
 800538c:	e7e9      	b.n	8005362 <__sflush_r+0xda>
 800538e:	bf00      	nop
 8005390:	dfbffffe 	.word	0xdfbffffe

08005394 <_fflush_r>:
 8005394:	b538      	push	{r3, r4, r5, lr}
 8005396:	690b      	ldr	r3, [r1, #16]
 8005398:	4605      	mov	r5, r0
 800539a:	460c      	mov	r4, r1
 800539c:	b913      	cbnz	r3, 80053a4 <_fflush_r+0x10>
 800539e:	2500      	movs	r5, #0
 80053a0:	4628      	mov	r0, r5
 80053a2:	bd38      	pop	{r3, r4, r5, pc}
 80053a4:	b118      	cbz	r0, 80053ae <_fflush_r+0x1a>
 80053a6:	6a03      	ldr	r3, [r0, #32]
 80053a8:	b90b      	cbnz	r3, 80053ae <_fflush_r+0x1a>
 80053aa:	f7ff fc8f 	bl	8004ccc <__sinit>
 80053ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d0f3      	beq.n	800539e <_fflush_r+0xa>
 80053b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80053b8:	07d0      	lsls	r0, r2, #31
 80053ba:	d404      	bmi.n	80053c6 <_fflush_r+0x32>
 80053bc:	0599      	lsls	r1, r3, #22
 80053be:	d402      	bmi.n	80053c6 <_fflush_r+0x32>
 80053c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80053c2:	f7ff fe66 	bl	8005092 <__retarget_lock_acquire_recursive>
 80053c6:	4628      	mov	r0, r5
 80053c8:	4621      	mov	r1, r4
 80053ca:	f7ff ff5d 	bl	8005288 <__sflush_r>
 80053ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80053d0:	07da      	lsls	r2, r3, #31
 80053d2:	4605      	mov	r5, r0
 80053d4:	d4e4      	bmi.n	80053a0 <_fflush_r+0xc>
 80053d6:	89a3      	ldrh	r3, [r4, #12]
 80053d8:	059b      	lsls	r3, r3, #22
 80053da:	d4e1      	bmi.n	80053a0 <_fflush_r+0xc>
 80053dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80053de:	f7ff fe59 	bl	8005094 <__retarget_lock_release_recursive>
 80053e2:	e7dd      	b.n	80053a0 <_fflush_r+0xc>

080053e4 <__swhatbuf_r>:
 80053e4:	b570      	push	{r4, r5, r6, lr}
 80053e6:	460c      	mov	r4, r1
 80053e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053ec:	2900      	cmp	r1, #0
 80053ee:	b096      	sub	sp, #88	; 0x58
 80053f0:	4615      	mov	r5, r2
 80053f2:	461e      	mov	r6, r3
 80053f4:	da0d      	bge.n	8005412 <__swhatbuf_r+0x2e>
 80053f6:	89a3      	ldrh	r3, [r4, #12]
 80053f8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80053fc:	f04f 0100 	mov.w	r1, #0
 8005400:	bf0c      	ite	eq
 8005402:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005406:	2340      	movne	r3, #64	; 0x40
 8005408:	2000      	movs	r0, #0
 800540a:	6031      	str	r1, [r6, #0]
 800540c:	602b      	str	r3, [r5, #0]
 800540e:	b016      	add	sp, #88	; 0x58
 8005410:	bd70      	pop	{r4, r5, r6, pc}
 8005412:	466a      	mov	r2, sp
 8005414:	f000 f848 	bl	80054a8 <_fstat_r>
 8005418:	2800      	cmp	r0, #0
 800541a:	dbec      	blt.n	80053f6 <__swhatbuf_r+0x12>
 800541c:	9901      	ldr	r1, [sp, #4]
 800541e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005422:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005426:	4259      	negs	r1, r3
 8005428:	4159      	adcs	r1, r3
 800542a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800542e:	e7eb      	b.n	8005408 <__swhatbuf_r+0x24>

08005430 <__smakebuf_r>:
 8005430:	898b      	ldrh	r3, [r1, #12]
 8005432:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005434:	079d      	lsls	r5, r3, #30
 8005436:	4606      	mov	r6, r0
 8005438:	460c      	mov	r4, r1
 800543a:	d507      	bpl.n	800544c <__smakebuf_r+0x1c>
 800543c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005440:	6023      	str	r3, [r4, #0]
 8005442:	6123      	str	r3, [r4, #16]
 8005444:	2301      	movs	r3, #1
 8005446:	6163      	str	r3, [r4, #20]
 8005448:	b002      	add	sp, #8
 800544a:	bd70      	pop	{r4, r5, r6, pc}
 800544c:	ab01      	add	r3, sp, #4
 800544e:	466a      	mov	r2, sp
 8005450:	f7ff ffc8 	bl	80053e4 <__swhatbuf_r>
 8005454:	9900      	ldr	r1, [sp, #0]
 8005456:	4605      	mov	r5, r0
 8005458:	4630      	mov	r0, r6
 800545a:	f7ff fe89 	bl	8005170 <_malloc_r>
 800545e:	b948      	cbnz	r0, 8005474 <__smakebuf_r+0x44>
 8005460:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005464:	059a      	lsls	r2, r3, #22
 8005466:	d4ef      	bmi.n	8005448 <__smakebuf_r+0x18>
 8005468:	f023 0303 	bic.w	r3, r3, #3
 800546c:	f043 0302 	orr.w	r3, r3, #2
 8005470:	81a3      	strh	r3, [r4, #12]
 8005472:	e7e3      	b.n	800543c <__smakebuf_r+0xc>
 8005474:	89a3      	ldrh	r3, [r4, #12]
 8005476:	6020      	str	r0, [r4, #0]
 8005478:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800547c:	81a3      	strh	r3, [r4, #12]
 800547e:	9b00      	ldr	r3, [sp, #0]
 8005480:	6163      	str	r3, [r4, #20]
 8005482:	9b01      	ldr	r3, [sp, #4]
 8005484:	6120      	str	r0, [r4, #16]
 8005486:	b15b      	cbz	r3, 80054a0 <__smakebuf_r+0x70>
 8005488:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800548c:	4630      	mov	r0, r6
 800548e:	f000 f81d 	bl	80054cc <_isatty_r>
 8005492:	b128      	cbz	r0, 80054a0 <__smakebuf_r+0x70>
 8005494:	89a3      	ldrh	r3, [r4, #12]
 8005496:	f023 0303 	bic.w	r3, r3, #3
 800549a:	f043 0301 	orr.w	r3, r3, #1
 800549e:	81a3      	strh	r3, [r4, #12]
 80054a0:	89a3      	ldrh	r3, [r4, #12]
 80054a2:	431d      	orrs	r5, r3
 80054a4:	81a5      	strh	r5, [r4, #12]
 80054a6:	e7cf      	b.n	8005448 <__smakebuf_r+0x18>

080054a8 <_fstat_r>:
 80054a8:	b538      	push	{r3, r4, r5, lr}
 80054aa:	4d07      	ldr	r5, [pc, #28]	; (80054c8 <_fstat_r+0x20>)
 80054ac:	2300      	movs	r3, #0
 80054ae:	4604      	mov	r4, r0
 80054b0:	4608      	mov	r0, r1
 80054b2:	4611      	mov	r1, r2
 80054b4:	602b      	str	r3, [r5, #0]
 80054b6:	f7fb faec 	bl	8000a92 <_fstat>
 80054ba:	1c43      	adds	r3, r0, #1
 80054bc:	d102      	bne.n	80054c4 <_fstat_r+0x1c>
 80054be:	682b      	ldr	r3, [r5, #0]
 80054c0:	b103      	cbz	r3, 80054c4 <_fstat_r+0x1c>
 80054c2:	6023      	str	r3, [r4, #0]
 80054c4:	bd38      	pop	{r3, r4, r5, pc}
 80054c6:	bf00      	nop
 80054c8:	2000424c 	.word	0x2000424c

080054cc <_isatty_r>:
 80054cc:	b538      	push	{r3, r4, r5, lr}
 80054ce:	4d06      	ldr	r5, [pc, #24]	; (80054e8 <_isatty_r+0x1c>)
 80054d0:	2300      	movs	r3, #0
 80054d2:	4604      	mov	r4, r0
 80054d4:	4608      	mov	r0, r1
 80054d6:	602b      	str	r3, [r5, #0]
 80054d8:	f7fb faeb 	bl	8000ab2 <_isatty>
 80054dc:	1c43      	adds	r3, r0, #1
 80054de:	d102      	bne.n	80054e6 <_isatty_r+0x1a>
 80054e0:	682b      	ldr	r3, [r5, #0]
 80054e2:	b103      	cbz	r3, 80054e6 <_isatty_r+0x1a>
 80054e4:	6023      	str	r3, [r4, #0]
 80054e6:	bd38      	pop	{r3, r4, r5, pc}
 80054e8:	2000424c 	.word	0x2000424c

080054ec <_sbrk_r>:
 80054ec:	b538      	push	{r3, r4, r5, lr}
 80054ee:	4d06      	ldr	r5, [pc, #24]	; (8005508 <_sbrk_r+0x1c>)
 80054f0:	2300      	movs	r3, #0
 80054f2:	4604      	mov	r4, r0
 80054f4:	4608      	mov	r0, r1
 80054f6:	602b      	str	r3, [r5, #0]
 80054f8:	f7fb faf4 	bl	8000ae4 <_sbrk>
 80054fc:	1c43      	adds	r3, r0, #1
 80054fe:	d102      	bne.n	8005506 <_sbrk_r+0x1a>
 8005500:	682b      	ldr	r3, [r5, #0]
 8005502:	b103      	cbz	r3, 8005506 <_sbrk_r+0x1a>
 8005504:	6023      	str	r3, [r4, #0]
 8005506:	bd38      	pop	{r3, r4, r5, pc}
 8005508:	2000424c 	.word	0x2000424c

0800550c <_init>:
 800550c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800550e:	bf00      	nop
 8005510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005512:	bc08      	pop	{r3}
 8005514:	469e      	mov	lr, r3
 8005516:	4770      	bx	lr

08005518 <_fini>:
 8005518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800551a:	bf00      	nop
 800551c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800551e:	bc08      	pop	{r3}
 8005520:	469e      	mov	lr, r3
 8005522:	4770      	bx	lr
